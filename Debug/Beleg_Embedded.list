
Beleg_Embedded.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041e4  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  080042a0  080042a0  000142a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800437c  0800437c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  0800437c  0800437c  0001437c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004384  08004384  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004384  08004384  00014384  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004388  08004388  00014388  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800438c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009e8  20000010  0800439c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200009f8  0800439c  000209f8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011448  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021d6  00000000  00000000  00031480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e90  00000000  00000000  00033658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000dc8  00000000  00000000  000344e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018369  00000000  00000000  000352b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011127  00000000  00000000  0004d619  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ec58  00000000  00000000  0005e740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fd398  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003500  00000000  00000000  000fd3e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000010 	.word	0x20000010
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08004288 	.word	0x08004288

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000014 	.word	0x20000014
 8000100:	08004288 	.word	0x08004288

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	0008      	movs	r0, r1
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	; (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	; (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	4657      	mov	r7, sl
 8000434:	464e      	mov	r6, r9
 8000436:	4645      	mov	r5, r8
 8000438:	46de      	mov	lr, fp
 800043a:	b5e0      	push	{r5, r6, r7, lr}
 800043c:	0004      	movs	r4, r0
 800043e:	000d      	movs	r5, r1
 8000440:	4692      	mov	sl, r2
 8000442:	4699      	mov	r9, r3
 8000444:	b083      	sub	sp, #12
 8000446:	428b      	cmp	r3, r1
 8000448:	d830      	bhi.n	80004ac <__udivmoddi4+0x7c>
 800044a:	d02d      	beq.n	80004a8 <__udivmoddi4+0x78>
 800044c:	4649      	mov	r1, r9
 800044e:	4650      	mov	r0, sl
 8000450:	f000 f8ba 	bl	80005c8 <__clzdi2>
 8000454:	0029      	movs	r1, r5
 8000456:	0006      	movs	r6, r0
 8000458:	0020      	movs	r0, r4
 800045a:	f000 f8b5 	bl	80005c8 <__clzdi2>
 800045e:	1a33      	subs	r3, r6, r0
 8000460:	4698      	mov	r8, r3
 8000462:	3b20      	subs	r3, #32
 8000464:	469b      	mov	fp, r3
 8000466:	d433      	bmi.n	80004d0 <__udivmoddi4+0xa0>
 8000468:	465a      	mov	r2, fp
 800046a:	4653      	mov	r3, sl
 800046c:	4093      	lsls	r3, r2
 800046e:	4642      	mov	r2, r8
 8000470:	001f      	movs	r7, r3
 8000472:	4653      	mov	r3, sl
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d83a      	bhi.n	80004f2 <__udivmoddi4+0xc2>
 800047c:	42af      	cmp	r7, r5
 800047e:	d100      	bne.n	8000482 <__udivmoddi4+0x52>
 8000480:	e078      	b.n	8000574 <__udivmoddi4+0x144>
 8000482:	465b      	mov	r3, fp
 8000484:	1ba4      	subs	r4, r4, r6
 8000486:	41bd      	sbcs	r5, r7
 8000488:	2b00      	cmp	r3, #0
 800048a:	da00      	bge.n	800048e <__udivmoddi4+0x5e>
 800048c:	e075      	b.n	800057a <__udivmoddi4+0x14a>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
 8000492:	9200      	str	r2, [sp, #0]
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2301      	movs	r3, #1
 8000498:	465a      	mov	r2, fp
 800049a:	4093      	lsls	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	4642      	mov	r2, r8
 80004a2:	4093      	lsls	r3, r2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	e028      	b.n	80004fa <__udivmoddi4+0xca>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d9cf      	bls.n	800044c <__udivmoddi4+0x1c>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <__udivmoddi4+0x8e>
 80004ba:	601c      	str	r4, [r3, #0]
 80004bc:	605d      	str	r5, [r3, #4]
 80004be:	9800      	ldr	r0, [sp, #0]
 80004c0:	9901      	ldr	r1, [sp, #4]
 80004c2:	b003      	add	sp, #12
 80004c4:	bcf0      	pop	{r4, r5, r6, r7}
 80004c6:	46bb      	mov	fp, r7
 80004c8:	46b2      	mov	sl, r6
 80004ca:	46a9      	mov	r9, r5
 80004cc:	46a0      	mov	r8, r4
 80004ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d0:	4642      	mov	r2, r8
 80004d2:	2320      	movs	r3, #32
 80004d4:	1a9b      	subs	r3, r3, r2
 80004d6:	4652      	mov	r2, sl
 80004d8:	40da      	lsrs	r2, r3
 80004da:	4641      	mov	r1, r8
 80004dc:	0013      	movs	r3, r2
 80004de:	464a      	mov	r2, r9
 80004e0:	408a      	lsls	r2, r1
 80004e2:	0017      	movs	r7, r2
 80004e4:	4642      	mov	r2, r8
 80004e6:	431f      	orrs	r7, r3
 80004e8:	4653      	mov	r3, sl
 80004ea:	4093      	lsls	r3, r2
 80004ec:	001e      	movs	r6, r3
 80004ee:	42af      	cmp	r7, r5
 80004f0:	d9c4      	bls.n	800047c <__udivmoddi4+0x4c>
 80004f2:	2200      	movs	r2, #0
 80004f4:	2300      	movs	r3, #0
 80004f6:	9200      	str	r2, [sp, #0]
 80004f8:	9301      	str	r3, [sp, #4]
 80004fa:	4643      	mov	r3, r8
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d0d9      	beq.n	80004b4 <__udivmoddi4+0x84>
 8000500:	07fb      	lsls	r3, r7, #31
 8000502:	0872      	lsrs	r2, r6, #1
 8000504:	431a      	orrs	r2, r3
 8000506:	4646      	mov	r6, r8
 8000508:	087b      	lsrs	r3, r7, #1
 800050a:	e00e      	b.n	800052a <__udivmoddi4+0xfa>
 800050c:	42ab      	cmp	r3, r5
 800050e:	d101      	bne.n	8000514 <__udivmoddi4+0xe4>
 8000510:	42a2      	cmp	r2, r4
 8000512:	d80c      	bhi.n	800052e <__udivmoddi4+0xfe>
 8000514:	1aa4      	subs	r4, r4, r2
 8000516:	419d      	sbcs	r5, r3
 8000518:	2001      	movs	r0, #1
 800051a:	1924      	adds	r4, r4, r4
 800051c:	416d      	adcs	r5, r5
 800051e:	2100      	movs	r1, #0
 8000520:	3e01      	subs	r6, #1
 8000522:	1824      	adds	r4, r4, r0
 8000524:	414d      	adcs	r5, r1
 8000526:	2e00      	cmp	r6, #0
 8000528:	d006      	beq.n	8000538 <__udivmoddi4+0x108>
 800052a:	42ab      	cmp	r3, r5
 800052c:	d9ee      	bls.n	800050c <__udivmoddi4+0xdc>
 800052e:	3e01      	subs	r6, #1
 8000530:	1924      	adds	r4, r4, r4
 8000532:	416d      	adcs	r5, r5
 8000534:	2e00      	cmp	r6, #0
 8000536:	d1f8      	bne.n	800052a <__udivmoddi4+0xfa>
 8000538:	9800      	ldr	r0, [sp, #0]
 800053a:	9901      	ldr	r1, [sp, #4]
 800053c:	465b      	mov	r3, fp
 800053e:	1900      	adds	r0, r0, r4
 8000540:	4169      	adcs	r1, r5
 8000542:	2b00      	cmp	r3, #0
 8000544:	db24      	blt.n	8000590 <__udivmoddi4+0x160>
 8000546:	002b      	movs	r3, r5
 8000548:	465a      	mov	r2, fp
 800054a:	4644      	mov	r4, r8
 800054c:	40d3      	lsrs	r3, r2
 800054e:	002a      	movs	r2, r5
 8000550:	40e2      	lsrs	r2, r4
 8000552:	001c      	movs	r4, r3
 8000554:	465b      	mov	r3, fp
 8000556:	0015      	movs	r5, r2
 8000558:	2b00      	cmp	r3, #0
 800055a:	db2a      	blt.n	80005b2 <__udivmoddi4+0x182>
 800055c:	0026      	movs	r6, r4
 800055e:	409e      	lsls	r6, r3
 8000560:	0033      	movs	r3, r6
 8000562:	0026      	movs	r6, r4
 8000564:	4647      	mov	r7, r8
 8000566:	40be      	lsls	r6, r7
 8000568:	0032      	movs	r2, r6
 800056a:	1a80      	subs	r0, r0, r2
 800056c:	4199      	sbcs	r1, r3
 800056e:	9000      	str	r0, [sp, #0]
 8000570:	9101      	str	r1, [sp, #4]
 8000572:	e79f      	b.n	80004b4 <__udivmoddi4+0x84>
 8000574:	42a3      	cmp	r3, r4
 8000576:	d8bc      	bhi.n	80004f2 <__udivmoddi4+0xc2>
 8000578:	e783      	b.n	8000482 <__udivmoddi4+0x52>
 800057a:	4642      	mov	r2, r8
 800057c:	2320      	movs	r3, #32
 800057e:	2100      	movs	r1, #0
 8000580:	1a9b      	subs	r3, r3, r2
 8000582:	2200      	movs	r2, #0
 8000584:	9100      	str	r1, [sp, #0]
 8000586:	9201      	str	r2, [sp, #4]
 8000588:	2201      	movs	r2, #1
 800058a:	40da      	lsrs	r2, r3
 800058c:	9201      	str	r2, [sp, #4]
 800058e:	e786      	b.n	800049e <__udivmoddi4+0x6e>
 8000590:	4642      	mov	r2, r8
 8000592:	2320      	movs	r3, #32
 8000594:	1a9b      	subs	r3, r3, r2
 8000596:	002a      	movs	r2, r5
 8000598:	4646      	mov	r6, r8
 800059a:	409a      	lsls	r2, r3
 800059c:	0023      	movs	r3, r4
 800059e:	40f3      	lsrs	r3, r6
 80005a0:	4644      	mov	r4, r8
 80005a2:	4313      	orrs	r3, r2
 80005a4:	002a      	movs	r2, r5
 80005a6:	40e2      	lsrs	r2, r4
 80005a8:	001c      	movs	r4, r3
 80005aa:	465b      	mov	r3, fp
 80005ac:	0015      	movs	r5, r2
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	dad4      	bge.n	800055c <__udivmoddi4+0x12c>
 80005b2:	4642      	mov	r2, r8
 80005b4:	002f      	movs	r7, r5
 80005b6:	2320      	movs	r3, #32
 80005b8:	0026      	movs	r6, r4
 80005ba:	4097      	lsls	r7, r2
 80005bc:	1a9b      	subs	r3, r3, r2
 80005be:	40de      	lsrs	r6, r3
 80005c0:	003b      	movs	r3, r7
 80005c2:	4333      	orrs	r3, r6
 80005c4:	e7cd      	b.n	8000562 <__udivmoddi4+0x132>
 80005c6:	46c0      	nop			; (mov r8, r8)

080005c8 <__clzdi2>:
 80005c8:	b510      	push	{r4, lr}
 80005ca:	2900      	cmp	r1, #0
 80005cc:	d103      	bne.n	80005d6 <__clzdi2+0xe>
 80005ce:	f000 f807 	bl	80005e0 <__clzsi2>
 80005d2:	3020      	adds	r0, #32
 80005d4:	e002      	b.n	80005dc <__clzdi2+0x14>
 80005d6:	0008      	movs	r0, r1
 80005d8:	f000 f802 	bl	80005e0 <__clzsi2>
 80005dc:	bd10      	pop	{r4, pc}
 80005de:	46c0      	nop			; (mov r8, r8)

080005e0 <__clzsi2>:
 80005e0:	211c      	movs	r1, #28
 80005e2:	2301      	movs	r3, #1
 80005e4:	041b      	lsls	r3, r3, #16
 80005e6:	4298      	cmp	r0, r3
 80005e8:	d301      	bcc.n	80005ee <__clzsi2+0xe>
 80005ea:	0c00      	lsrs	r0, r0, #16
 80005ec:	3910      	subs	r1, #16
 80005ee:	0a1b      	lsrs	r3, r3, #8
 80005f0:	4298      	cmp	r0, r3
 80005f2:	d301      	bcc.n	80005f8 <__clzsi2+0x18>
 80005f4:	0a00      	lsrs	r0, r0, #8
 80005f6:	3908      	subs	r1, #8
 80005f8:	091b      	lsrs	r3, r3, #4
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0x22>
 80005fe:	0900      	lsrs	r0, r0, #4
 8000600:	3904      	subs	r1, #4
 8000602:	a202      	add	r2, pc, #8	; (adr r2, 800060c <__clzsi2+0x2c>)
 8000604:	5c10      	ldrb	r0, [r2, r0]
 8000606:	1840      	adds	r0, r0, r1
 8000608:	4770      	bx	lr
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	02020304 	.word	0x02020304
 8000610:	01010101 	.word	0x01010101
	...

0800061c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000622:	f000 fd89 	bl	8001138 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000626:	f000 f973 	bl	8000910 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800062a:	f000 fb23 	bl	8000c74 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800062e:	f000 fad3 	bl	8000bd8 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000632:	f000 fa03 	bl	8000a3c <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000636:	f000 fa81 	bl	8000b3c <MX_USART1_UART_Init>
  MX_DAC1_Init();
 800063a:	f000 f9c9 	bl	80009d0 <MX_DAC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 800063e:	4ba5      	ldr	r3, [pc, #660]	; (80008d4 <main+0x2b8>)
 8000640:	0018      	movs	r0, r3
 8000642:	f002 f8eb 	bl	800281c <HAL_TIM_Base_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	// Key request
	for (int key = 0; key < MAX_KEYS; ++key)
 8000646:	2300      	movs	r3, #0
 8000648:	607b      	str	r3, [r7, #4]
 800064a:	e13d      	b.n	80008c8 <main+0x2ac>
	{
		if(key == MAX_KEYS -1)
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	2b07      	cmp	r3, #7
 8000650:	d109      	bne.n	8000666 <main+0x4a>
			HAL_GPIO_WritePin(KEY_PORT, key+1, GPIO_PIN_SET);
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	b29b      	uxth	r3, r3
 8000656:	3301      	adds	r3, #1
 8000658:	b29b      	uxth	r3, r3
 800065a:	489f      	ldr	r0, [pc, #636]	; (80008d8 <main+0x2bc>)
 800065c:	2201      	movs	r2, #1
 800065e:	0019      	movs	r1, r3
 8000660:	f001 f99f 	bl	80019a2 <HAL_GPIO_WritePin>
 8000664:	e006      	b.n	8000674 <main+0x58>
		else
			HAL_GPIO_WritePin(KEY_PORT, key, GPIO_PIN_SET);
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	b29b      	uxth	r3, r3
 800066a:	489b      	ldr	r0, [pc, #620]	; (80008d8 <main+0x2bc>)
 800066c:	2201      	movs	r2, #1
 800066e:	0019      	movs	r1, r3
 8000670:	f001 f997 	bl	80019a2 <HAL_GPIO_WritePin>

		for (int bank = 0; bank < MAX_BANKS; ++bank)
 8000674:	2300      	movs	r3, #0
 8000676:	603b      	str	r3, [r7, #0]
 8000678:	e10b      	b.n	8000892 <main+0x276>
				}
			}
			else */
			{
				// MK is pressed
				if((HAL_GPIO_ReadPin(BANK_MK_PORT, bank) == GPIO_PIN_SET)&&(keyMatrixMKPressed[bank][key] == 0))
 800067a:	683b      	ldr	r3, [r7, #0]
 800067c:	b29b      	uxth	r3, r3
 800067e:	4a97      	ldr	r2, [pc, #604]	; (80008dc <main+0x2c0>)
 8000680:	0019      	movs	r1, r3
 8000682:	0010      	movs	r0, r2
 8000684:	f001 f970 	bl	8001968 <HAL_GPIO_ReadPin>
 8000688:	0003      	movs	r3, r0
 800068a:	2b01      	cmp	r3, #1
 800068c:	d11a      	bne.n	80006c4 <main+0xa8>
 800068e:	4b94      	ldr	r3, [pc, #592]	; (80008e0 <main+0x2c4>)
 8000690:	683a      	ldr	r2, [r7, #0]
 8000692:	00d1      	lsls	r1, r2, #3
 8000694:	687a      	ldr	r2, [r7, #4]
 8000696:	188a      	adds	r2, r1, r2
 8000698:	0092      	lsls	r2, r2, #2
 800069a:	58d3      	ldr	r3, [r2, r3]
 800069c:	2b00      	cmp	r3, #0
 800069e:	d111      	bne.n	80006c4 <main+0xa8>
				{
					keyMatrixMK[bank][key] = htim2.Instance->CNT;
 80006a0:	4b8c      	ldr	r3, [pc, #560]	; (80008d4 <main+0x2b8>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80006a6:	4b8f      	ldr	r3, [pc, #572]	; (80008e4 <main+0x2c8>)
 80006a8:	683a      	ldr	r2, [r7, #0]
 80006aa:	00d0      	lsls	r0, r2, #3
 80006ac:	687a      	ldr	r2, [r7, #4]
 80006ae:	1882      	adds	r2, r0, r2
 80006b0:	0092      	lsls	r2, r2, #2
 80006b2:	50d1      	str	r1, [r2, r3]
					keyMatrixMKPressed[bank][key] = 1;
 80006b4:	4b8a      	ldr	r3, [pc, #552]	; (80008e0 <main+0x2c4>)
 80006b6:	683a      	ldr	r2, [r7, #0]
 80006b8:	00d1      	lsls	r1, r2, #3
 80006ba:	687a      	ldr	r2, [r7, #4]
 80006bc:	188a      	adds	r2, r1, r2
 80006be:	0092      	lsls	r2, r2, #2
 80006c0:	2101      	movs	r1, #1
 80006c2:	50d1      	str	r1, [r2, r3]
				}

				// BR is pressed
				if ((HAL_GPIO_ReadPin(BANK_BR_PORT, bank) == GPIO_PIN_SET)&&(keyMatrixBRPressed[bank][key] == 0))
 80006c4:	683b      	ldr	r3, [r7, #0]
 80006c6:	b29b      	uxth	r3, r3
 80006c8:	4a87      	ldr	r2, [pc, #540]	; (80008e8 <main+0x2cc>)
 80006ca:	0019      	movs	r1, r3
 80006cc:	0010      	movs	r0, r2
 80006ce:	f001 f94b 	bl	8001968 <HAL_GPIO_ReadPin>
 80006d2:	0003      	movs	r3, r0
 80006d4:	2b01      	cmp	r3, #1
 80006d6:	d11a      	bne.n	800070e <main+0xf2>
 80006d8:	4b84      	ldr	r3, [pc, #528]	; (80008ec <main+0x2d0>)
 80006da:	683a      	ldr	r2, [r7, #0]
 80006dc:	00d1      	lsls	r1, r2, #3
 80006de:	687a      	ldr	r2, [r7, #4]
 80006e0:	188a      	adds	r2, r1, r2
 80006e2:	0092      	lsls	r2, r2, #2
 80006e4:	58d3      	ldr	r3, [r2, r3]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d111      	bne.n	800070e <main+0xf2>
				{
					keyMatrixBR[bank][key] = htim2.Instance->CNT;
 80006ea:	4b7a      	ldr	r3, [pc, #488]	; (80008d4 <main+0x2b8>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80006f0:	4b7f      	ldr	r3, [pc, #508]	; (80008f0 <main+0x2d4>)
 80006f2:	683a      	ldr	r2, [r7, #0]
 80006f4:	00d0      	lsls	r0, r2, #3
 80006f6:	687a      	ldr	r2, [r7, #4]
 80006f8:	1882      	adds	r2, r0, r2
 80006fa:	0092      	lsls	r2, r2, #2
 80006fc:	50d1      	str	r1, [r2, r3]
					keyMatrixBRPressed[bank][key] = 1;
 80006fe:	4b7b      	ldr	r3, [pc, #492]	; (80008ec <main+0x2d0>)
 8000700:	683a      	ldr	r2, [r7, #0]
 8000702:	00d1      	lsls	r1, r2, #3
 8000704:	687a      	ldr	r2, [r7, #4]
 8000706:	188a      	adds	r2, r1, r2
 8000708:	0092      	lsls	r2, r2, #2
 800070a:	2101      	movs	r1, #1
 800070c:	50d1      	str	r1, [r2, r3]
				}

				// MK not pressed
				if(HAL_GPIO_ReadPin(BANK_MK_PORT, bank) == GPIO_PIN_RESET)
 800070e:	683b      	ldr	r3, [r7, #0]
 8000710:	b29b      	uxth	r3, r3
 8000712:	4a72      	ldr	r2, [pc, #456]	; (80008dc <main+0x2c0>)
 8000714:	0019      	movs	r1, r3
 8000716:	0010      	movs	r0, r2
 8000718:	f001 f926 	bl	8001968 <HAL_GPIO_ReadPin>
 800071c:	1e03      	subs	r3, r0, #0
 800071e:	d10f      	bne.n	8000740 <main+0x124>
				{
					keyMatrixMK[bank][key] = 0;
 8000720:	4b70      	ldr	r3, [pc, #448]	; (80008e4 <main+0x2c8>)
 8000722:	683a      	ldr	r2, [r7, #0]
 8000724:	00d1      	lsls	r1, r2, #3
 8000726:	687a      	ldr	r2, [r7, #4]
 8000728:	188a      	adds	r2, r1, r2
 800072a:	0092      	lsls	r2, r2, #2
 800072c:	2100      	movs	r1, #0
 800072e:	50d1      	str	r1, [r2, r3]
					keyMatrixMKPressed[bank][key] = 0;
 8000730:	4b6b      	ldr	r3, [pc, #428]	; (80008e0 <main+0x2c4>)
 8000732:	683a      	ldr	r2, [r7, #0]
 8000734:	00d1      	lsls	r1, r2, #3
 8000736:	687a      	ldr	r2, [r7, #4]
 8000738:	188a      	adds	r2, r1, r2
 800073a:	0092      	lsls	r2, r2, #2
 800073c:	2100      	movs	r1, #0
 800073e:	50d1      	str	r1, [r2, r3]
				}

				// BR not pressed
				if(HAL_GPIO_ReadPin(BANK_BR_PORT, bank) == GPIO_PIN_RESET)
 8000740:	683b      	ldr	r3, [r7, #0]
 8000742:	b29b      	uxth	r3, r3
 8000744:	4a68      	ldr	r2, [pc, #416]	; (80008e8 <main+0x2cc>)
 8000746:	0019      	movs	r1, r3
 8000748:	0010      	movs	r0, r2
 800074a:	f001 f90d 	bl	8001968 <HAL_GPIO_ReadPin>
 800074e:	1e03      	subs	r3, r0, #0
 8000750:	d10f      	bne.n	8000772 <main+0x156>
				{
					keyMatrixBR[bank][key] = 0;
 8000752:	4b67      	ldr	r3, [pc, #412]	; (80008f0 <main+0x2d4>)
 8000754:	683a      	ldr	r2, [r7, #0]
 8000756:	00d1      	lsls	r1, r2, #3
 8000758:	687a      	ldr	r2, [r7, #4]
 800075a:	188a      	adds	r2, r1, r2
 800075c:	0092      	lsls	r2, r2, #2
 800075e:	2100      	movs	r1, #0
 8000760:	50d1      	str	r1, [r2, r3]
					keyMatrixBRPressed[bank][key] = 0;
 8000762:	4b62      	ldr	r3, [pc, #392]	; (80008ec <main+0x2d0>)
 8000764:	683a      	ldr	r2, [r7, #0]
 8000766:	00d1      	lsls	r1, r2, #3
 8000768:	687a      	ldr	r2, [r7, #4]
 800076a:	188a      	adds	r2, r1, r2
 800076c:	0092      	lsls	r2, r2, #2
 800076e:	2100      	movs	r1, #0
 8000770:	50d1      	str	r1, [r2, r3]
				}
			}

			if ((keyMatrixBR[bank][key] != keyMatrixBROld[bank][key]))
 8000772:	4b5f      	ldr	r3, [pc, #380]	; (80008f0 <main+0x2d4>)
 8000774:	683a      	ldr	r2, [r7, #0]
 8000776:	00d1      	lsls	r1, r2, #3
 8000778:	687a      	ldr	r2, [r7, #4]
 800077a:	188a      	adds	r2, r1, r2
 800077c:	0092      	lsls	r2, r2, #2
 800077e:	58d2      	ldr	r2, [r2, r3]
 8000780:	4b5c      	ldr	r3, [pc, #368]	; (80008f4 <main+0x2d8>)
 8000782:	6839      	ldr	r1, [r7, #0]
 8000784:	00c8      	lsls	r0, r1, #3
 8000786:	6879      	ldr	r1, [r7, #4]
 8000788:	1841      	adds	r1, r0, r1
 800078a:	0089      	lsls	r1, r1, #2
 800078c:	58cb      	ldr	r3, [r1, r3]
 800078e:	429a      	cmp	r2, r3
 8000790:	d100      	bne.n	8000794 <main+0x178>
 8000792:	e07b      	b.n	800088c <main+0x270>
			{
				// calculate time diff
				if (keyMatrixBR[bank][key] < keyMatrixMK[bank][key])
 8000794:	4b56      	ldr	r3, [pc, #344]	; (80008f0 <main+0x2d4>)
 8000796:	683a      	ldr	r2, [r7, #0]
 8000798:	00d1      	lsls	r1, r2, #3
 800079a:	687a      	ldr	r2, [r7, #4]
 800079c:	188a      	adds	r2, r1, r2
 800079e:	0092      	lsls	r2, r2, #2
 80007a0:	58d2      	ldr	r2, [r2, r3]
 80007a2:	4b50      	ldr	r3, [pc, #320]	; (80008e4 <main+0x2c8>)
 80007a4:	6839      	ldr	r1, [r7, #0]
 80007a6:	00c8      	lsls	r0, r1, #3
 80007a8:	6879      	ldr	r1, [r7, #4]
 80007aa:	1841      	adds	r1, r0, r1
 80007ac:	0089      	lsls	r1, r1, #2
 80007ae:	58cb      	ldr	r3, [r1, r3]
 80007b0:	429a      	cmp	r2, r3
 80007b2:	d217      	bcs.n	80007e4 <main+0x1c8>
				{
					keyMatrixTime[bank][key] = 0xFFFFFFFF - keyMatrixMK[bank][key] + keyMatrixBR[bank][key];
 80007b4:	4b4e      	ldr	r3, [pc, #312]	; (80008f0 <main+0x2d4>)
 80007b6:	683a      	ldr	r2, [r7, #0]
 80007b8:	00d1      	lsls	r1, r2, #3
 80007ba:	687a      	ldr	r2, [r7, #4]
 80007bc:	188a      	adds	r2, r1, r2
 80007be:	0092      	lsls	r2, r2, #2
 80007c0:	58d2      	ldr	r2, [r2, r3]
 80007c2:	4b48      	ldr	r3, [pc, #288]	; (80008e4 <main+0x2c8>)
 80007c4:	6839      	ldr	r1, [r7, #0]
 80007c6:	00c8      	lsls	r0, r1, #3
 80007c8:	6879      	ldr	r1, [r7, #4]
 80007ca:	1841      	adds	r1, r0, r1
 80007cc:	0089      	lsls	r1, r1, #2
 80007ce:	58cb      	ldr	r3, [r1, r3]
 80007d0:	1ad3      	subs	r3, r2, r3
 80007d2:	1e59      	subs	r1, r3, #1
 80007d4:	4b48      	ldr	r3, [pc, #288]	; (80008f8 <main+0x2dc>)
 80007d6:	683a      	ldr	r2, [r7, #0]
 80007d8:	00d0      	lsls	r0, r2, #3
 80007da:	687a      	ldr	r2, [r7, #4]
 80007dc:	1882      	adds	r2, r0, r2
 80007de:	0092      	lsls	r2, r2, #2
 80007e0:	50d1      	str	r1, [r2, r3]
 80007e2:	e015      	b.n	8000810 <main+0x1f4>
				}
				else
				{
					keyMatrixTime[bank][key] = keyMatrixBR[bank][key] - keyMatrixMK[bank][key];
 80007e4:	4b42      	ldr	r3, [pc, #264]	; (80008f0 <main+0x2d4>)
 80007e6:	683a      	ldr	r2, [r7, #0]
 80007e8:	00d1      	lsls	r1, r2, #3
 80007ea:	687a      	ldr	r2, [r7, #4]
 80007ec:	188a      	adds	r2, r1, r2
 80007ee:	0092      	lsls	r2, r2, #2
 80007f0:	58d2      	ldr	r2, [r2, r3]
 80007f2:	4b3c      	ldr	r3, [pc, #240]	; (80008e4 <main+0x2c8>)
 80007f4:	6839      	ldr	r1, [r7, #0]
 80007f6:	00c8      	lsls	r0, r1, #3
 80007f8:	6879      	ldr	r1, [r7, #4]
 80007fa:	1841      	adds	r1, r0, r1
 80007fc:	0089      	lsls	r1, r1, #2
 80007fe:	58cb      	ldr	r3, [r1, r3]
 8000800:	1ad1      	subs	r1, r2, r3
 8000802:	4b3d      	ldr	r3, [pc, #244]	; (80008f8 <main+0x2dc>)
 8000804:	683a      	ldr	r2, [r7, #0]
 8000806:	00d0      	lsls	r0, r2, #3
 8000808:	687a      	ldr	r2, [r7, #4]
 800080a:	1882      	adds	r2, r0, r2
 800080c:	0092      	lsls	r2, r2, #2
 800080e:	50d1      	str	r1, [r2, r3]
				}

				// create MIDI package
				// note
				midi[1] = (bank * MAX_KEYS + key);
 8000810:	683b      	ldr	r3, [r7, #0]
 8000812:	b2db      	uxtb	r3, r3
 8000814:	00db      	lsls	r3, r3, #3
 8000816:	b2da      	uxtb	r2, r3
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	b2db      	uxtb	r3, r3
 800081c:	18d3      	adds	r3, r2, r3
 800081e:	b2da      	uxtb	r2, r3
 8000820:	4b36      	ldr	r3, [pc, #216]	; (80008fc <main+0x2e0>)
 8000822:	705a      	strb	r2, [r3, #1]
				// velocity
				if(keyMatrixTime[bank][key] > 5000)
 8000824:	4b34      	ldr	r3, [pc, #208]	; (80008f8 <main+0x2dc>)
 8000826:	683a      	ldr	r2, [r7, #0]
 8000828:	00d1      	lsls	r1, r2, #3
 800082a:	687a      	ldr	r2, [r7, #4]
 800082c:	188a      	adds	r2, r1, r2
 800082e:	0092      	lsls	r2, r2, #2
 8000830:	58d3      	ldr	r3, [r2, r3]
 8000832:	4a33      	ldr	r2, [pc, #204]	; (8000900 <main+0x2e4>)
 8000834:	4293      	cmp	r3, r2
 8000836:	d903      	bls.n	8000840 <main+0x224>
					midi[2] = 0;
 8000838:	4b30      	ldr	r3, [pc, #192]	; (80008fc <main+0x2e0>)
 800083a:	2200      	movs	r2, #0
 800083c:	709a      	strb	r2, [r3, #2]
 800083e:	e01f      	b.n	8000880 <main+0x264>
				else if(keyMatrixTime[bank][key] < 1000)
 8000840:	4b2d      	ldr	r3, [pc, #180]	; (80008f8 <main+0x2dc>)
 8000842:	683a      	ldr	r2, [r7, #0]
 8000844:	00d1      	lsls	r1, r2, #3
 8000846:	687a      	ldr	r2, [r7, #4]
 8000848:	188a      	adds	r2, r1, r2
 800084a:	0092      	lsls	r2, r2, #2
 800084c:	58d2      	ldr	r2, [r2, r3]
 800084e:	23fa      	movs	r3, #250	; 0xfa
 8000850:	009b      	lsls	r3, r3, #2
 8000852:	429a      	cmp	r2, r3
 8000854:	d203      	bcs.n	800085e <main+0x242>
					midi[2] = 127;
 8000856:	4b29      	ldr	r3, [pc, #164]	; (80008fc <main+0x2e0>)
 8000858:	227f      	movs	r2, #127	; 0x7f
 800085a:	709a      	strb	r2, [r3, #2]
 800085c:	e010      	b.n	8000880 <main+0x264>
				else
					midi[2] = 127 -((keyMatrixTime[bank][key] - 1000)/32);
 800085e:	4b26      	ldr	r3, [pc, #152]	; (80008f8 <main+0x2dc>)
 8000860:	683a      	ldr	r2, [r7, #0]
 8000862:	00d1      	lsls	r1, r2, #3
 8000864:	687a      	ldr	r2, [r7, #4]
 8000866:	188a      	adds	r2, r1, r2
 8000868:	0092      	lsls	r2, r2, #2
 800086a:	58d3      	ldr	r3, [r2, r3]
 800086c:	4a25      	ldr	r2, [pc, #148]	; (8000904 <main+0x2e8>)
 800086e:	4694      	mov	ip, r2
 8000870:	4463      	add	r3, ip
 8000872:	095b      	lsrs	r3, r3, #5
 8000874:	b2db      	uxtb	r3, r3
 8000876:	227f      	movs	r2, #127	; 0x7f
 8000878:	1ad3      	subs	r3, r2, r3
 800087a:	b2da      	uxtb	r2, r3
 800087c:	4b1f      	ldr	r3, [pc, #124]	; (80008fc <main+0x2e0>)
 800087e:	709a      	strb	r2, [r3, #2]
				// send MIDI
				HAL_UART_Transmit(&huart2, midi, 3, 31250);
 8000880:	4b21      	ldr	r3, [pc, #132]	; (8000908 <main+0x2ec>)
 8000882:	491e      	ldr	r1, [pc, #120]	; (80008fc <main+0x2e0>)
 8000884:	4821      	ldr	r0, [pc, #132]	; (800090c <main+0x2f0>)
 8000886:	2203      	movs	r2, #3
 8000888:	f002 fe56 	bl	8003538 <HAL_UART_Transmit>
		for (int bank = 0; bank < MAX_BANKS; ++bank)
 800088c:	683b      	ldr	r3, [r7, #0]
 800088e:	3301      	adds	r3, #1
 8000890:	603b      	str	r3, [r7, #0]
 8000892:	683b      	ldr	r3, [r7, #0]
 8000894:	2b0a      	cmp	r3, #10
 8000896:	dc00      	bgt.n	800089a <main+0x27e>
 8000898:	e6ef      	b.n	800067a <main+0x5e>
				// analoge
				//HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_1,DAC_ALIGN_12B_R,);
			}
		}
		if(key == MAX_KEYS-1)
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	2b07      	cmp	r3, #7
 800089e:	d109      	bne.n	80008b4 <main+0x298>
			HAL_GPIO_WritePin(KEY_PORT, key+1, GPIO_PIN_RESET);
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	b29b      	uxth	r3, r3
 80008a4:	3301      	adds	r3, #1
 80008a6:	b29b      	uxth	r3, r3
 80008a8:	480b      	ldr	r0, [pc, #44]	; (80008d8 <main+0x2bc>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	0019      	movs	r1, r3
 80008ae:	f001 f878 	bl	80019a2 <HAL_GPIO_WritePin>
 80008b2:	e006      	b.n	80008c2 <main+0x2a6>
		else
			HAL_GPIO_WritePin(KEY_PORT, key, GPIO_PIN_RESET);
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	b29b      	uxth	r3, r3
 80008b8:	4807      	ldr	r0, [pc, #28]	; (80008d8 <main+0x2bc>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	0019      	movs	r1, r3
 80008be:	f001 f870 	bl	80019a2 <HAL_GPIO_WritePin>
	for (int key = 0; key < MAX_KEYS; ++key)
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	3301      	adds	r3, #1
 80008c6:	607b      	str	r3, [r7, #4]
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	2b07      	cmp	r3, #7
 80008cc:	dc00      	bgt.n	80008d0 <main+0x2b4>
 80008ce:	e6bd      	b.n	800064c <main+0x30>
 80008d0:	e6b9      	b.n	8000646 <main+0x2a>
 80008d2:	46c0      	nop			; (mov r8, r8)
 80008d4:	20000040 	.word	0x20000040
 80008d8:	50000c00 	.word	0x50000c00
 80008dc:	50000400 	.word	0x50000400
 80008e0:	20000474 	.word	0x20000474
 80008e4:	200001b4 	.word	0x200001b4
 80008e8:	50000800 	.word	0x50000800
 80008ec:	200005d4 	.word	0x200005d4
 80008f0:	20000314 	.word	0x20000314
 80008f4:	20000894 	.word	0x20000894
 80008f8:	20000734 	.word	0x20000734
 80008fc:	20000000 	.word	0x20000000
 8000900:	00001388 	.word	0x00001388
 8000904:	fffffc18 	.word	0xfffffc18
 8000908:	00007a12 	.word	0x00007a12
 800090c:	20000120 	.word	0x20000120

08000910 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000910:	b590      	push	{r4, r7, lr}
 8000912:	b093      	sub	sp, #76	; 0x4c
 8000914:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000916:	2410      	movs	r4, #16
 8000918:	193b      	adds	r3, r7, r4
 800091a:	0018      	movs	r0, r3
 800091c:	2338      	movs	r3, #56	; 0x38
 800091e:	001a      	movs	r2, r3
 8000920:	2100      	movs	r1, #0
 8000922:	f003 fca9 	bl	8004278 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000926:	003b      	movs	r3, r7
 8000928:	0018      	movs	r0, r3
 800092a:	2310      	movs	r3, #16
 800092c:	001a      	movs	r2, r3
 800092e:	2100      	movs	r1, #0
 8000930:	f003 fca2 	bl	8004278 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000934:	2380      	movs	r3, #128	; 0x80
 8000936:	009b      	lsls	r3, r3, #2
 8000938:	0018      	movs	r0, r3
 800093a:	f001 f84f 	bl	80019dc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800093e:	193b      	adds	r3, r7, r4
 8000940:	2202      	movs	r2, #2
 8000942:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000944:	193b      	adds	r3, r7, r4
 8000946:	2280      	movs	r2, #128	; 0x80
 8000948:	0052      	lsls	r2, r2, #1
 800094a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV2;
 800094c:	193b      	adds	r3, r7, r4
 800094e:	2280      	movs	r2, #128	; 0x80
 8000950:	0112      	lsls	r2, r2, #4
 8000952:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000954:	0021      	movs	r1, r4
 8000956:	187b      	adds	r3, r7, r1
 8000958:	2240      	movs	r2, #64	; 0x40
 800095a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800095c:	187b      	adds	r3, r7, r1
 800095e:	2202      	movs	r2, #2
 8000960:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000962:	187b      	adds	r3, r7, r1
 8000964:	2202      	movs	r2, #2
 8000966:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000968:	187b      	adds	r3, r7, r1
 800096a:	2200      	movs	r2, #0
 800096c:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 800096e:	187b      	adds	r3, r7, r1
 8000970:	2208      	movs	r2, #8
 8000972:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000974:	187b      	adds	r3, r7, r1
 8000976:	2280      	movs	r2, #128	; 0x80
 8000978:	0292      	lsls	r2, r2, #10
 800097a:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800097c:	187b      	adds	r3, r7, r1
 800097e:	2280      	movs	r2, #128	; 0x80
 8000980:	0492      	lsls	r2, r2, #18
 8000982:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000984:	187b      	adds	r3, r7, r1
 8000986:	2280      	movs	r2, #128	; 0x80
 8000988:	0592      	lsls	r2, r2, #22
 800098a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800098c:	187b      	adds	r3, r7, r1
 800098e:	0018      	movs	r0, r3
 8000990:	f001 f870 	bl	8001a74 <HAL_RCC_OscConfig>
 8000994:	1e03      	subs	r3, r0, #0
 8000996:	d001      	beq.n	800099c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000998:	f000 fa14 	bl	8000dc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800099c:	003b      	movs	r3, r7
 800099e:	2207      	movs	r2, #7
 80009a0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009a2:	003b      	movs	r3, r7
 80009a4:	2202      	movs	r2, #2
 80009a6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009a8:	003b      	movs	r3, r7
 80009aa:	2200      	movs	r2, #0
 80009ac:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 80009ae:	003b      	movs	r3, r7
 80009b0:	22e0      	movs	r2, #224	; 0xe0
 80009b2:	01d2      	lsls	r2, r2, #7
 80009b4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009b6:	003b      	movs	r3, r7
 80009b8:	2102      	movs	r1, #2
 80009ba:	0018      	movs	r0, r3
 80009bc:	f001 fb74 	bl	80020a8 <HAL_RCC_ClockConfig>
 80009c0:	1e03      	subs	r3, r0, #0
 80009c2:	d001      	beq.n	80009c8 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80009c4:	f000 f9fe 	bl	8000dc4 <Error_Handler>
  }
}
 80009c8:	46c0      	nop			; (mov r8, r8)
 80009ca:	46bd      	mov	sp, r7
 80009cc:	b013      	add	sp, #76	; 0x4c
 80009ce:	bd90      	pop	{r4, r7, pc}

080009d0 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b08a      	sub	sp, #40	; 0x28
 80009d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80009d6:	1d3b      	adds	r3, r7, #4
 80009d8:	0018      	movs	r0, r3
 80009da:	2324      	movs	r3, #36	; 0x24
 80009dc:	001a      	movs	r2, r3
 80009de:	2100      	movs	r1, #0
 80009e0:	f003 fc4a 	bl	8004278 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80009e4:	4b13      	ldr	r3, [pc, #76]	; (8000a34 <MX_DAC1_Init+0x64>)
 80009e6:	4a14      	ldr	r2, [pc, #80]	; (8000a38 <MX_DAC1_Init+0x68>)
 80009e8:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80009ea:	4b12      	ldr	r3, [pc, #72]	; (8000a34 <MX_DAC1_Init+0x64>)
 80009ec:	0018      	movs	r0, r3
 80009ee:	f000 fd17 	bl	8001420 <HAL_DAC_Init>
 80009f2:	1e03      	subs	r3, r0, #0
 80009f4:	d001      	beq.n	80009fa <MX_DAC1_Init+0x2a>
  {
    Error_Handler();
 80009f6:	f000 f9e5 	bl	8000dc4 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80009fa:	1d3b      	adds	r3, r7, #4
 80009fc:	2200      	movs	r2, #0
 80009fe:	601a      	str	r2, [r3, #0]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000a00:	1d3b      	adds	r3, r7, #4
 8000a02:	2200      	movs	r2, #0
 8000a04:	605a      	str	r2, [r3, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000a06:	1d3b      	adds	r3, r7, #4
 8000a08:	2200      	movs	r2, #0
 8000a0a:	609a      	str	r2, [r3, #8]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;
 8000a0c:	1d3b      	adds	r3, r7, #4
 8000a0e:	2201      	movs	r2, #1
 8000a10:	60da      	str	r2, [r3, #12]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000a12:	1d3b      	adds	r3, r7, #4
 8000a14:	2200      	movs	r2, #0
 8000a16:	611a      	str	r2, [r3, #16]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000a18:	1d39      	adds	r1, r7, #4
 8000a1a:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <MX_DAC1_Init+0x64>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	0018      	movs	r0, r3
 8000a20:	f000 fd22 	bl	8001468 <HAL_DAC_ConfigChannel>
 8000a24:	1e03      	subs	r3, r0, #0
 8000a26:	d001      	beq.n	8000a2c <MX_DAC1_Init+0x5c>
  {
    Error_Handler();
 8000a28:	f000 f9cc 	bl	8000dc4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000a2c:	46c0      	nop			; (mov r8, r8)
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	b00a      	add	sp, #40	; 0x28
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	2000002c 	.word	0x2000002c
 8000a38:	40007400 	.word	0x40007400

08000a3c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b08e      	sub	sp, #56	; 0x38
 8000a40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a42:	2328      	movs	r3, #40	; 0x28
 8000a44:	18fb      	adds	r3, r7, r3
 8000a46:	0018      	movs	r0, r3
 8000a48:	2310      	movs	r3, #16
 8000a4a:	001a      	movs	r2, r3
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	f003 fc13 	bl	8004278 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a52:	231c      	movs	r3, #28
 8000a54:	18fb      	adds	r3, r7, r3
 8000a56:	0018      	movs	r0, r3
 8000a58:	230c      	movs	r3, #12
 8000a5a:	001a      	movs	r2, r3
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	f003 fc0b 	bl	8004278 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a62:	003b      	movs	r3, r7
 8000a64:	0018      	movs	r0, r3
 8000a66:	231c      	movs	r3, #28
 8000a68:	001a      	movs	r2, r3
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	f003 fc04 	bl	8004278 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a70:	4b30      	ldr	r3, [pc, #192]	; (8000b34 <MX_TIM2_Init+0xf8>)
 8000a72:	2280      	movs	r2, #128	; 0x80
 8000a74:	05d2      	lsls	r2, r2, #23
 8000a76:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3125;
 8000a78:	4b2e      	ldr	r3, [pc, #184]	; (8000b34 <MX_TIM2_Init+0xf8>)
 8000a7a:	4a2f      	ldr	r2, [pc, #188]	; (8000b38 <MX_TIM2_Init+0xfc>)
 8000a7c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a7e:	4b2d      	ldr	r3, [pc, #180]	; (8000b34 <MX_TIM2_Init+0xf8>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000a84:	4b2b      	ldr	r3, [pc, #172]	; (8000b34 <MX_TIM2_Init+0xf8>)
 8000a86:	2201      	movs	r2, #1
 8000a88:	4252      	negs	r2, r2
 8000a8a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a8c:	4b29      	ldr	r3, [pc, #164]	; (8000b34 <MX_TIM2_Init+0xf8>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a92:	4b28      	ldr	r3, [pc, #160]	; (8000b34 <MX_TIM2_Init+0xf8>)
 8000a94:	2280      	movs	r2, #128	; 0x80
 8000a96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a98:	4b26      	ldr	r3, [pc, #152]	; (8000b34 <MX_TIM2_Init+0xf8>)
 8000a9a:	0018      	movs	r0, r3
 8000a9c:	f001 fe66 	bl	800276c <HAL_TIM_Base_Init>
 8000aa0:	1e03      	subs	r3, r0, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8000aa4:	f000 f98e 	bl	8000dc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000aa8:	2128      	movs	r1, #40	; 0x28
 8000aaa:	187b      	adds	r3, r7, r1
 8000aac:	2280      	movs	r2, #128	; 0x80
 8000aae:	0152      	lsls	r2, r2, #5
 8000ab0:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ab2:	187a      	adds	r2, r7, r1
 8000ab4:	4b1f      	ldr	r3, [pc, #124]	; (8000b34 <MX_TIM2_Init+0xf8>)
 8000ab6:	0011      	movs	r1, r2
 8000ab8:	0018      	movs	r0, r3
 8000aba:	f001 ffc3 	bl	8002a44 <HAL_TIM_ConfigClockSource>
 8000abe:	1e03      	subs	r3, r0, #0
 8000ac0:	d001      	beq.n	8000ac6 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8000ac2:	f000 f97f 	bl	8000dc4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8000ac6:	4b1b      	ldr	r3, [pc, #108]	; (8000b34 <MX_TIM2_Init+0xf8>)
 8000ac8:	0018      	movs	r0, r3
 8000aca:	f001 fefb 	bl	80028c4 <HAL_TIM_OC_Init>
 8000ace:	1e03      	subs	r3, r0, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000ad2:	f000 f977 	bl	8000dc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ad6:	211c      	movs	r1, #28
 8000ad8:	187b      	adds	r3, r7, r1
 8000ada:	2200      	movs	r2, #0
 8000adc:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ade:	187b      	adds	r3, r7, r1
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ae4:	187a      	adds	r2, r7, r1
 8000ae6:	4b13      	ldr	r3, [pc, #76]	; (8000b34 <MX_TIM2_Init+0xf8>)
 8000ae8:	0011      	movs	r1, r2
 8000aea:	0018      	movs	r0, r3
 8000aec:	f002 fc60 	bl	80033b0 <HAL_TIMEx_MasterConfigSynchronization>
 8000af0:	1e03      	subs	r3, r0, #0
 8000af2:	d001      	beq.n	8000af8 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8000af4:	f000 f966 	bl	8000dc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000af8:	003b      	movs	r3, r7
 8000afa:	2200      	movs	r2, #0
 8000afc:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000afe:	003b      	movs	r3, r7
 8000b00:	2200      	movs	r2, #0
 8000b02:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b04:	003b      	movs	r3, r7
 8000b06:	2200      	movs	r2, #0
 8000b08:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b0a:	003b      	movs	r3, r7
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b10:	0039      	movs	r1, r7
 8000b12:	4b08      	ldr	r3, [pc, #32]	; (8000b34 <MX_TIM2_Init+0xf8>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	0018      	movs	r0, r3
 8000b18:	f001 ff34 	bl	8002984 <HAL_TIM_OC_ConfigChannel>
 8000b1c:	1e03      	subs	r3, r0, #0
 8000b1e:	d001      	beq.n	8000b24 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8000b20:	f000 f950 	bl	8000dc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000b24:	4b03      	ldr	r3, [pc, #12]	; (8000b34 <MX_TIM2_Init+0xf8>)
 8000b26:	0018      	movs	r0, r3
 8000b28:	f000 f9da 	bl	8000ee0 <HAL_TIM_MspPostInit>

}
 8000b2c:	46c0      	nop			; (mov r8, r8)
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	b00e      	add	sp, #56	; 0x38
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	20000040 	.word	0x20000040
 8000b38:	00000c35 	.word	0x00000c35

08000b3c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b40:	4b22      	ldr	r3, [pc, #136]	; (8000bcc <MX_USART1_UART_Init+0x90>)
 8000b42:	4a23      	ldr	r2, [pc, #140]	; (8000bd0 <MX_USART1_UART_Init+0x94>)
 8000b44:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 31250;
 8000b46:	4b21      	ldr	r3, [pc, #132]	; (8000bcc <MX_USART1_UART_Init+0x90>)
 8000b48:	4a22      	ldr	r2, [pc, #136]	; (8000bd4 <MX_USART1_UART_Init+0x98>)
 8000b4a:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b4c:	4b1f      	ldr	r3, [pc, #124]	; (8000bcc <MX_USART1_UART_Init+0x90>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b52:	4b1e      	ldr	r3, [pc, #120]	; (8000bcc <MX_USART1_UART_Init+0x90>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b58:	4b1c      	ldr	r3, [pc, #112]	; (8000bcc <MX_USART1_UART_Init+0x90>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX;
 8000b5e:	4b1b      	ldr	r3, [pc, #108]	; (8000bcc <MX_USART1_UART_Init+0x90>)
 8000b60:	2208      	movs	r2, #8
 8000b62:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b64:	4b19      	ldr	r3, [pc, #100]	; (8000bcc <MX_USART1_UART_Init+0x90>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b6a:	4b18      	ldr	r3, [pc, #96]	; (8000bcc <MX_USART1_UART_Init+0x90>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b70:	4b16      	ldr	r3, [pc, #88]	; (8000bcc <MX_USART1_UART_Init+0x90>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b76:	4b15      	ldr	r3, [pc, #84]	; (8000bcc <MX_USART1_UART_Init+0x90>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b7c:	4b13      	ldr	r3, [pc, #76]	; (8000bcc <MX_USART1_UART_Init+0x90>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b82:	4b12      	ldr	r3, [pc, #72]	; (8000bcc <MX_USART1_UART_Init+0x90>)
 8000b84:	0018      	movs	r0, r3
 8000b86:	f002 fc81 	bl	800348c <HAL_UART_Init>
 8000b8a:	1e03      	subs	r3, r0, #0
 8000b8c:	d001      	beq.n	8000b92 <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
 8000b8e:	f000 f919 	bl	8000dc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b92:	4b0e      	ldr	r3, [pc, #56]	; (8000bcc <MX_USART1_UART_Init+0x90>)
 8000b94:	2100      	movs	r1, #0
 8000b96:	0018      	movs	r0, r3
 8000b98:	f003 fa6a 	bl	8004070 <HAL_UARTEx_SetTxFifoThreshold>
 8000b9c:	1e03      	subs	r3, r0, #0
 8000b9e:	d001      	beq.n	8000ba4 <MX_USART1_UART_Init+0x68>
  {
    Error_Handler();
 8000ba0:	f000 f910 	bl	8000dc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ba4:	4b09      	ldr	r3, [pc, #36]	; (8000bcc <MX_USART1_UART_Init+0x90>)
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	0018      	movs	r0, r3
 8000baa:	f003 faa1 	bl	80040f0 <HAL_UARTEx_SetRxFifoThreshold>
 8000bae:	1e03      	subs	r3, r0, #0
 8000bb0:	d001      	beq.n	8000bb6 <MX_USART1_UART_Init+0x7a>
  {
    Error_Handler();
 8000bb2:	f000 f907 	bl	8000dc4 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 8000bb6:	4b05      	ldr	r3, [pc, #20]	; (8000bcc <MX_USART1_UART_Init+0x90>)
 8000bb8:	0018      	movs	r0, r3
 8000bba:	f003 f9e1 	bl	8003f80 <HAL_UARTEx_EnableFifoMode>
 8000bbe:	1e03      	subs	r3, r0, #0
 8000bc0:	d001      	beq.n	8000bc6 <MX_USART1_UART_Init+0x8a>
  {
    Error_Handler();
 8000bc2:	f000 f8ff 	bl	8000dc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000bc6:	46c0      	nop			; (mov r8, r8)
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	2000008c 	.word	0x2000008c
 8000bd0:	40013800 	.word	0x40013800
 8000bd4:	00007a12 	.word	0x00007a12

08000bd8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bdc:	4b23      	ldr	r3, [pc, #140]	; (8000c6c <MX_USART2_UART_Init+0x94>)
 8000bde:	4a24      	ldr	r2, [pc, #144]	; (8000c70 <MX_USART2_UART_Init+0x98>)
 8000be0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000be2:	4b22      	ldr	r3, [pc, #136]	; (8000c6c <MX_USART2_UART_Init+0x94>)
 8000be4:	22e1      	movs	r2, #225	; 0xe1
 8000be6:	0252      	lsls	r2, r2, #9
 8000be8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bea:	4b20      	ldr	r3, [pc, #128]	; (8000c6c <MX_USART2_UART_Init+0x94>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bf0:	4b1e      	ldr	r3, [pc, #120]	; (8000c6c <MX_USART2_UART_Init+0x94>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bf6:	4b1d      	ldr	r3, [pc, #116]	; (8000c6c <MX_USART2_UART_Init+0x94>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bfc:	4b1b      	ldr	r3, [pc, #108]	; (8000c6c <MX_USART2_UART_Init+0x94>)
 8000bfe:	220c      	movs	r2, #12
 8000c00:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c02:	4b1a      	ldr	r3, [pc, #104]	; (8000c6c <MX_USART2_UART_Init+0x94>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c08:	4b18      	ldr	r3, [pc, #96]	; (8000c6c <MX_USART2_UART_Init+0x94>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c0e:	4b17      	ldr	r3, [pc, #92]	; (8000c6c <MX_USART2_UART_Init+0x94>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c14:	4b15      	ldr	r3, [pc, #84]	; (8000c6c <MX_USART2_UART_Init+0x94>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c1a:	4b14      	ldr	r3, [pc, #80]	; (8000c6c <MX_USART2_UART_Init+0x94>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c20:	4b12      	ldr	r3, [pc, #72]	; (8000c6c <MX_USART2_UART_Init+0x94>)
 8000c22:	0018      	movs	r0, r3
 8000c24:	f002 fc32 	bl	800348c <HAL_UART_Init>
 8000c28:	1e03      	subs	r3, r0, #0
 8000c2a:	d001      	beq.n	8000c30 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000c2c:	f000 f8ca 	bl	8000dc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c30:	4b0e      	ldr	r3, [pc, #56]	; (8000c6c <MX_USART2_UART_Init+0x94>)
 8000c32:	2100      	movs	r1, #0
 8000c34:	0018      	movs	r0, r3
 8000c36:	f003 fa1b 	bl	8004070 <HAL_UARTEx_SetTxFifoThreshold>
 8000c3a:	1e03      	subs	r3, r0, #0
 8000c3c:	d001      	beq.n	8000c42 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000c3e:	f000 f8c1 	bl	8000dc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c42:	4b0a      	ldr	r3, [pc, #40]	; (8000c6c <MX_USART2_UART_Init+0x94>)
 8000c44:	2100      	movs	r1, #0
 8000c46:	0018      	movs	r0, r3
 8000c48:	f003 fa52 	bl	80040f0 <HAL_UARTEx_SetRxFifoThreshold>
 8000c4c:	1e03      	subs	r3, r0, #0
 8000c4e:	d001      	beq.n	8000c54 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000c50:	f000 f8b8 	bl	8000dc4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000c54:	4b05      	ldr	r3, [pc, #20]	; (8000c6c <MX_USART2_UART_Init+0x94>)
 8000c56:	0018      	movs	r0, r3
 8000c58:	f003 f9d0 	bl	8003ffc <HAL_UARTEx_DisableFifoMode>
 8000c5c:	1e03      	subs	r3, r0, #0
 8000c5e:	d001      	beq.n	8000c64 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000c60:	f000 f8b0 	bl	8000dc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c64:	46c0      	nop			; (mov r8, r8)
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	46c0      	nop			; (mov r8, r8)
 8000c6c:	20000120 	.word	0x20000120
 8000c70:	40004400 	.word	0x40004400

08000c74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c74:	b590      	push	{r4, r7, lr}
 8000c76:	b08b      	sub	sp, #44	; 0x2c
 8000c78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c7a:	2414      	movs	r4, #20
 8000c7c:	193b      	adds	r3, r7, r4
 8000c7e:	0018      	movs	r0, r3
 8000c80:	2314      	movs	r3, #20
 8000c82:	001a      	movs	r2, r3
 8000c84:	2100      	movs	r1, #0
 8000c86:	f003 faf7 	bl	8004278 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c8a:	4b49      	ldr	r3, [pc, #292]	; (8000db0 <MX_GPIO_Init+0x13c>)
 8000c8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c8e:	4b48      	ldr	r3, [pc, #288]	; (8000db0 <MX_GPIO_Init+0x13c>)
 8000c90:	2104      	movs	r1, #4
 8000c92:	430a      	orrs	r2, r1
 8000c94:	635a      	str	r2, [r3, #52]	; 0x34
 8000c96:	4b46      	ldr	r3, [pc, #280]	; (8000db0 <MX_GPIO_Init+0x13c>)
 8000c98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c9a:	2204      	movs	r2, #4
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	613b      	str	r3, [r7, #16]
 8000ca0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ca2:	4b43      	ldr	r3, [pc, #268]	; (8000db0 <MX_GPIO_Init+0x13c>)
 8000ca4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ca6:	4b42      	ldr	r3, [pc, #264]	; (8000db0 <MX_GPIO_Init+0x13c>)
 8000ca8:	2120      	movs	r1, #32
 8000caa:	430a      	orrs	r2, r1
 8000cac:	635a      	str	r2, [r3, #52]	; 0x34
 8000cae:	4b40      	ldr	r3, [pc, #256]	; (8000db0 <MX_GPIO_Init+0x13c>)
 8000cb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cb2:	2220      	movs	r2, #32
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	60fb      	str	r3, [r7, #12]
 8000cb8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cba:	4b3d      	ldr	r3, [pc, #244]	; (8000db0 <MX_GPIO_Init+0x13c>)
 8000cbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000cbe:	4b3c      	ldr	r3, [pc, #240]	; (8000db0 <MX_GPIO_Init+0x13c>)
 8000cc0:	2101      	movs	r1, #1
 8000cc2:	430a      	orrs	r2, r1
 8000cc4:	635a      	str	r2, [r3, #52]	; 0x34
 8000cc6:	4b3a      	ldr	r3, [pc, #232]	; (8000db0 <MX_GPIO_Init+0x13c>)
 8000cc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cca:	2201      	movs	r2, #1
 8000ccc:	4013      	ands	r3, r2
 8000cce:	60bb      	str	r3, [r7, #8]
 8000cd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cd2:	4b37      	ldr	r3, [pc, #220]	; (8000db0 <MX_GPIO_Init+0x13c>)
 8000cd4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000cd6:	4b36      	ldr	r3, [pc, #216]	; (8000db0 <MX_GPIO_Init+0x13c>)
 8000cd8:	2102      	movs	r1, #2
 8000cda:	430a      	orrs	r2, r1
 8000cdc:	635a      	str	r2, [r3, #52]	; 0x34
 8000cde:	4b34      	ldr	r3, [pc, #208]	; (8000db0 <MX_GPIO_Init+0x13c>)
 8000ce0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ce2:	2202      	movs	r2, #2
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	607b      	str	r3, [r7, #4]
 8000ce8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cea:	4b31      	ldr	r3, [pc, #196]	; (8000db0 <MX_GPIO_Init+0x13c>)
 8000cec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000cee:	4b30      	ldr	r3, [pc, #192]	; (8000db0 <MX_GPIO_Init+0x13c>)
 8000cf0:	2108      	movs	r1, #8
 8000cf2:	430a      	orrs	r2, r1
 8000cf4:	635a      	str	r2, [r3, #52]	; 0x34
 8000cf6:	4b2e      	ldr	r3, [pc, #184]	; (8000db0 <MX_GPIO_Init+0x13c>)
 8000cf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cfa:	2208      	movs	r2, #8
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	603b      	str	r3, [r7, #0]
 8000d00:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000d02:	23a0      	movs	r3, #160	; 0xa0
 8000d04:	05db      	lsls	r3, r3, #23
 8000d06:	2200      	movs	r2, #0
 8000d08:	2120      	movs	r1, #32
 8000d0a:	0018      	movs	r0, r3
 8000d0c:	f000 fe49 	bl	80019a2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
 8000d10:	2380      	movs	r3, #128	; 0x80
 8000d12:	33ff      	adds	r3, #255	; 0xff
 8000d14:	4827      	ldr	r0, [pc, #156]	; (8000db4 <MX_GPIO_Init+0x140>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	0019      	movs	r1, r3
 8000d1a:	f000 fe42 	bl	80019a2 <HAL_GPIO_WritePin>
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 PC6 PC7
                           PC8 PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000d1e:	193b      	adds	r3, r7, r4
 8000d20:	4a25      	ldr	r2, [pc, #148]	; (8000db8 <MX_GPIO_Init+0x144>)
 8000d22:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d24:	193b      	adds	r3, r7, r4
 8000d26:	2200      	movs	r2, #0
 8000d28:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2a:	193b      	adds	r3, r7, r4
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d30:	193b      	adds	r3, r7, r4
 8000d32:	4a22      	ldr	r2, [pc, #136]	; (8000dbc <MX_GPIO_Init+0x148>)
 8000d34:	0019      	movs	r1, r3
 8000d36:	0010      	movs	r0, r2
 8000d38:	f000 fcb2 	bl	80016a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000d3c:	193b      	adds	r3, r7, r4
 8000d3e:	2220      	movs	r2, #32
 8000d40:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d42:	193b      	adds	r3, r7, r4
 8000d44:	2201      	movs	r2, #1
 8000d46:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d48:	193b      	adds	r3, r7, r4
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d4e:	193b      	adds	r3, r7, r4
 8000d50:	2202      	movs	r2, #2
 8000d52:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000d54:	193a      	adds	r2, r7, r4
 8000d56:	23a0      	movs	r3, #160	; 0xa0
 8000d58:	05db      	lsls	r3, r3, #23
 8000d5a:	0011      	movs	r1, r2
 8000d5c:	0018      	movs	r0, r3
 8000d5e:	f000 fc9f 	bl	80016a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB3 PB4 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000d62:	193b      	adds	r3, r7, r4
 8000d64:	4a14      	ldr	r2, [pc, #80]	; (8000db8 <MX_GPIO_Init+0x144>)
 8000d66:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d68:	193b      	adds	r3, r7, r4
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6e:	193b      	adds	r3, r7, r4
 8000d70:	2200      	movs	r2, #0
 8000d72:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d74:	193b      	adds	r3, r7, r4
 8000d76:	4a12      	ldr	r2, [pc, #72]	; (8000dc0 <MX_GPIO_Init+0x14c>)
 8000d78:	0019      	movs	r1, r3
 8000d7a:	0010      	movs	r0, r2
 8000d7c:	f000 fc90 	bl	80016a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD0 PD1 PD2
                           PD3 PD4 PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
 8000d80:	0021      	movs	r1, r4
 8000d82:	187b      	adds	r3, r7, r1
 8000d84:	2280      	movs	r2, #128	; 0x80
 8000d86:	32ff      	adds	r2, #255	; 0xff
 8000d88:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d8a:	187b      	adds	r3, r7, r1
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d90:	187b      	adds	r3, r7, r1
 8000d92:	2200      	movs	r2, #0
 8000d94:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d96:	187b      	adds	r3, r7, r1
 8000d98:	2200      	movs	r2, #0
 8000d9a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d9c:	187b      	adds	r3, r7, r1
 8000d9e:	4a05      	ldr	r2, [pc, #20]	; (8000db4 <MX_GPIO_Init+0x140>)
 8000da0:	0019      	movs	r1, r3
 8000da2:	0010      	movs	r0, r2
 8000da4:	f000 fc7c 	bl	80016a0 <HAL_GPIO_Init>

}
 8000da8:	46c0      	nop			; (mov r8, r8)
 8000daa:	46bd      	mov	sp, r7
 8000dac:	b00b      	add	sp, #44	; 0x2c
 8000dae:	bd90      	pop	{r4, r7, pc}
 8000db0:	40021000 	.word	0x40021000
 8000db4:	50000c00 	.word	0x50000c00
 8000db8:	000007ff 	.word	0x000007ff
 8000dbc:	50000800 	.word	0x50000800
 8000dc0:	50000400 	.word	0x50000400

08000dc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dc8:	b672      	cpsid	i
}
 8000dca:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dcc:	e7fe      	b.n	8000dcc <Error_Handler+0x8>
	...

08000dd0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dd6:	4b11      	ldr	r3, [pc, #68]	; (8000e1c <HAL_MspInit+0x4c>)
 8000dd8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000dda:	4b10      	ldr	r3, [pc, #64]	; (8000e1c <HAL_MspInit+0x4c>)
 8000ddc:	2101      	movs	r1, #1
 8000dde:	430a      	orrs	r2, r1
 8000de0:	641a      	str	r2, [r3, #64]	; 0x40
 8000de2:	4b0e      	ldr	r3, [pc, #56]	; (8000e1c <HAL_MspInit+0x4c>)
 8000de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de6:	2201      	movs	r2, #1
 8000de8:	4013      	ands	r3, r2
 8000dea:	607b      	str	r3, [r7, #4]
 8000dec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dee:	4b0b      	ldr	r3, [pc, #44]	; (8000e1c <HAL_MspInit+0x4c>)
 8000df0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000df2:	4b0a      	ldr	r3, [pc, #40]	; (8000e1c <HAL_MspInit+0x4c>)
 8000df4:	2180      	movs	r1, #128	; 0x80
 8000df6:	0549      	lsls	r1, r1, #21
 8000df8:	430a      	orrs	r2, r1
 8000dfa:	63da      	str	r2, [r3, #60]	; 0x3c
 8000dfc:	4b07      	ldr	r3, [pc, #28]	; (8000e1c <HAL_MspInit+0x4c>)
 8000dfe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000e00:	2380      	movs	r3, #128	; 0x80
 8000e02:	055b      	lsls	r3, r3, #21
 8000e04:	4013      	ands	r3, r2
 8000e06:	603b      	str	r3, [r7, #0]
 8000e08:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8000e0a:	23c0      	movs	r3, #192	; 0xc0
 8000e0c:	00db      	lsls	r3, r3, #3
 8000e0e:	0018      	movs	r0, r3
 8000e10:	f000 fa3c 	bl	800128c <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e14:	46c0      	nop			; (mov r8, r8)
 8000e16:	46bd      	mov	sp, r7
 8000e18:	b002      	add	sp, #8
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	40021000 	.word	0x40021000

08000e20 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000e20:	b590      	push	{r4, r7, lr}
 8000e22:	b08b      	sub	sp, #44	; 0x2c
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e28:	2414      	movs	r4, #20
 8000e2a:	193b      	adds	r3, r7, r4
 8000e2c:	0018      	movs	r0, r3
 8000e2e:	2314      	movs	r3, #20
 8000e30:	001a      	movs	r2, r3
 8000e32:	2100      	movs	r1, #0
 8000e34:	f003 fa20 	bl	8004278 <memset>
  if(hdac->Instance==DAC1)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a18      	ldr	r2, [pc, #96]	; (8000ea0 <HAL_DAC_MspInit+0x80>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d129      	bne.n	8000e96 <HAL_DAC_MspInit+0x76>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000e42:	4b18      	ldr	r3, [pc, #96]	; (8000ea4 <HAL_DAC_MspInit+0x84>)
 8000e44:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000e46:	4b17      	ldr	r3, [pc, #92]	; (8000ea4 <HAL_DAC_MspInit+0x84>)
 8000e48:	2180      	movs	r1, #128	; 0x80
 8000e4a:	0589      	lsls	r1, r1, #22
 8000e4c:	430a      	orrs	r2, r1
 8000e4e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000e50:	4b14      	ldr	r3, [pc, #80]	; (8000ea4 <HAL_DAC_MspInit+0x84>)
 8000e52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000e54:	2380      	movs	r3, #128	; 0x80
 8000e56:	059b      	lsls	r3, r3, #22
 8000e58:	4013      	ands	r3, r2
 8000e5a:	613b      	str	r3, [r7, #16]
 8000e5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e5e:	4b11      	ldr	r3, [pc, #68]	; (8000ea4 <HAL_DAC_MspInit+0x84>)
 8000e60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e62:	4b10      	ldr	r3, [pc, #64]	; (8000ea4 <HAL_DAC_MspInit+0x84>)
 8000e64:	2101      	movs	r1, #1
 8000e66:	430a      	orrs	r2, r1
 8000e68:	635a      	str	r2, [r3, #52]	; 0x34
 8000e6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ea4 <HAL_DAC_MspInit+0x84>)
 8000e6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e6e:	2201      	movs	r2, #1
 8000e70:	4013      	ands	r3, r2
 8000e72:	60fb      	str	r3, [r7, #12]
 8000e74:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = ANALOGE_OUT_Pin;
 8000e76:	193b      	adds	r3, r7, r4
 8000e78:	2210      	movs	r2, #16
 8000e7a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e7c:	193b      	adds	r3, r7, r4
 8000e7e:	2203      	movs	r2, #3
 8000e80:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e82:	193b      	adds	r3, r7, r4
 8000e84:	2200      	movs	r2, #0
 8000e86:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(ANALOGE_OUT_GPIO_Port, &GPIO_InitStruct);
 8000e88:	193a      	adds	r2, r7, r4
 8000e8a:	23a0      	movs	r3, #160	; 0xa0
 8000e8c:	05db      	lsls	r3, r3, #23
 8000e8e:	0011      	movs	r1, r2
 8000e90:	0018      	movs	r0, r3
 8000e92:	f000 fc05 	bl	80016a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8000e96:	46c0      	nop			; (mov r8, r8)
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	b00b      	add	sp, #44	; 0x2c
 8000e9c:	bd90      	pop	{r4, r7, pc}
 8000e9e:	46c0      	nop			; (mov r8, r8)
 8000ea0:	40007400 	.word	0x40007400
 8000ea4:	40021000 	.word	0x40021000

08000ea8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681a      	ldr	r2, [r3, #0]
 8000eb4:	2380      	movs	r3, #128	; 0x80
 8000eb6:	05db      	lsls	r3, r3, #23
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	d10b      	bne.n	8000ed4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ebc:	4b07      	ldr	r3, [pc, #28]	; (8000edc <HAL_TIM_Base_MspInit+0x34>)
 8000ebe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000ec0:	4b06      	ldr	r3, [pc, #24]	; (8000edc <HAL_TIM_Base_MspInit+0x34>)
 8000ec2:	2101      	movs	r1, #1
 8000ec4:	430a      	orrs	r2, r1
 8000ec6:	63da      	str	r2, [r3, #60]	; 0x3c
 8000ec8:	4b04      	ldr	r3, [pc, #16]	; (8000edc <HAL_TIM_Base_MspInit+0x34>)
 8000eca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ecc:	2201      	movs	r2, #1
 8000ece:	4013      	ands	r3, r2
 8000ed0:	60fb      	str	r3, [r7, #12]
 8000ed2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000ed4:	46c0      	nop			; (mov r8, r8)
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	b004      	add	sp, #16
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	40021000 	.word	0x40021000

08000ee0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ee0:	b590      	push	{r4, r7, lr}
 8000ee2:	b089      	sub	sp, #36	; 0x24
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee8:	240c      	movs	r4, #12
 8000eea:	193b      	adds	r3, r7, r4
 8000eec:	0018      	movs	r0, r3
 8000eee:	2314      	movs	r3, #20
 8000ef0:	001a      	movs	r2, r3
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	f003 f9c0 	bl	8004278 <memset>
  if(htim->Instance==TIM2)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	2380      	movs	r3, #128	; 0x80
 8000efe:	05db      	lsls	r3, r3, #23
 8000f00:	429a      	cmp	r2, r3
 8000f02:	d122      	bne.n	8000f4a <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f04:	4b13      	ldr	r3, [pc, #76]	; (8000f54 <HAL_TIM_MspPostInit+0x74>)
 8000f06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f08:	4b12      	ldr	r3, [pc, #72]	; (8000f54 <HAL_TIM_MspPostInit+0x74>)
 8000f0a:	2101      	movs	r1, #1
 8000f0c:	430a      	orrs	r2, r1
 8000f0e:	635a      	str	r2, [r3, #52]	; 0x34
 8000f10:	4b10      	ldr	r3, [pc, #64]	; (8000f54 <HAL_TIM_MspPostInit+0x74>)
 8000f12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f14:	2201      	movs	r2, #1
 8000f16:	4013      	ands	r3, r2
 8000f18:	60bb      	str	r3, [r7, #8]
 8000f1a:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f1c:	0021      	movs	r1, r4
 8000f1e:	187b      	adds	r3, r7, r1
 8000f20:	2201      	movs	r2, #1
 8000f22:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f24:	187b      	adds	r3, r7, r1
 8000f26:	2202      	movs	r2, #2
 8000f28:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2a:	187b      	adds	r3, r7, r1
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f30:	187b      	adds	r3, r7, r1
 8000f32:	2200      	movs	r2, #0
 8000f34:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8000f36:	187b      	adds	r3, r7, r1
 8000f38:	2202      	movs	r2, #2
 8000f3a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f3c:	187a      	adds	r2, r7, r1
 8000f3e:	23a0      	movs	r3, #160	; 0xa0
 8000f40:	05db      	lsls	r3, r3, #23
 8000f42:	0011      	movs	r1, r2
 8000f44:	0018      	movs	r0, r3
 8000f46:	f000 fbab 	bl	80016a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000f4a:	46c0      	nop			; (mov r8, r8)
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	b009      	add	sp, #36	; 0x24
 8000f50:	bd90      	pop	{r4, r7, pc}
 8000f52:	46c0      	nop			; (mov r8, r8)
 8000f54:	40021000 	.word	0x40021000

08000f58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f58:	b590      	push	{r4, r7, lr}
 8000f5a:	b099      	sub	sp, #100	; 0x64
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f60:	234c      	movs	r3, #76	; 0x4c
 8000f62:	18fb      	adds	r3, r7, r3
 8000f64:	0018      	movs	r0, r3
 8000f66:	2314      	movs	r3, #20
 8000f68:	001a      	movs	r2, r3
 8000f6a:	2100      	movs	r1, #0
 8000f6c:	f003 f984 	bl	8004278 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f70:	2418      	movs	r4, #24
 8000f72:	193b      	adds	r3, r7, r4
 8000f74:	0018      	movs	r0, r3
 8000f76:	2334      	movs	r3, #52	; 0x34
 8000f78:	001a      	movs	r2, r3
 8000f7a:	2100      	movs	r1, #0
 8000f7c:	f003 f97c 	bl	8004278 <memset>
  if(huart->Instance==USART1)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a46      	ldr	r2, [pc, #280]	; (80010a0 <HAL_UART_MspInit+0x148>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d140      	bne.n	800100c <HAL_UART_MspInit+0xb4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000f8a:	193b      	adds	r3, r7, r4
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000f90:	193b      	adds	r3, r7, r4
 8000f92:	2200      	movs	r2, #0
 8000f94:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f96:	193b      	adds	r3, r7, r4
 8000f98:	0018      	movs	r0, r3
 8000f9a:	f001 fa2f 	bl	80023fc <HAL_RCCEx_PeriphCLKConfig>
 8000f9e:	1e03      	subs	r3, r0, #0
 8000fa0:	d001      	beq.n	8000fa6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000fa2:	f7ff ff0f 	bl	8000dc4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000fa6:	4b3f      	ldr	r3, [pc, #252]	; (80010a4 <HAL_UART_MspInit+0x14c>)
 8000fa8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000faa:	4b3e      	ldr	r3, [pc, #248]	; (80010a4 <HAL_UART_MspInit+0x14c>)
 8000fac:	2180      	movs	r1, #128	; 0x80
 8000fae:	01c9      	lsls	r1, r1, #7
 8000fb0:	430a      	orrs	r2, r1
 8000fb2:	641a      	str	r2, [r3, #64]	; 0x40
 8000fb4:	4b3b      	ldr	r3, [pc, #236]	; (80010a4 <HAL_UART_MspInit+0x14c>)
 8000fb6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fb8:	2380      	movs	r3, #128	; 0x80
 8000fba:	01db      	lsls	r3, r3, #7
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	617b      	str	r3, [r7, #20]
 8000fc0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc2:	4b38      	ldr	r3, [pc, #224]	; (80010a4 <HAL_UART_MspInit+0x14c>)
 8000fc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000fc6:	4b37      	ldr	r3, [pc, #220]	; (80010a4 <HAL_UART_MspInit+0x14c>)
 8000fc8:	2101      	movs	r1, #1
 8000fca:	430a      	orrs	r2, r1
 8000fcc:	635a      	str	r2, [r3, #52]	; 0x34
 8000fce:	4b35      	ldr	r3, [pc, #212]	; (80010a4 <HAL_UART_MspInit+0x14c>)
 8000fd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	613b      	str	r3, [r7, #16]
 8000fd8:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|MIDI_OUT_Pin;
 8000fda:	214c      	movs	r1, #76	; 0x4c
 8000fdc:	187b      	adds	r3, r7, r1
 8000fde:	22c0      	movs	r2, #192	; 0xc0
 8000fe0:	00d2      	lsls	r2, r2, #3
 8000fe2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe4:	187b      	adds	r3, r7, r1
 8000fe6:	2202      	movs	r2, #2
 8000fe8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fea:	187b      	adds	r3, r7, r1
 8000fec:	2200      	movs	r2, #0
 8000fee:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff0:	187b      	adds	r3, r7, r1
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000ff6:	187b      	adds	r3, r7, r1
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ffc:	187a      	adds	r2, r7, r1
 8000ffe:	23a0      	movs	r3, #160	; 0xa0
 8001000:	05db      	lsls	r3, r3, #23
 8001002:	0011      	movs	r1, r2
 8001004:	0018      	movs	r0, r3
 8001006:	f000 fb4b 	bl	80016a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800100a:	e044      	b.n	8001096 <HAL_UART_MspInit+0x13e>
  else if(huart->Instance==USART2)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a25      	ldr	r2, [pc, #148]	; (80010a8 <HAL_UART_MspInit+0x150>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d13f      	bne.n	8001096 <HAL_UART_MspInit+0x13e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001016:	2118      	movs	r1, #24
 8001018:	187b      	adds	r3, r7, r1
 800101a:	2202      	movs	r2, #2
 800101c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_HSI;
 800101e:	187b      	adds	r3, r7, r1
 8001020:	2208      	movs	r2, #8
 8001022:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001024:	187b      	adds	r3, r7, r1
 8001026:	0018      	movs	r0, r3
 8001028:	f001 f9e8 	bl	80023fc <HAL_RCCEx_PeriphCLKConfig>
 800102c:	1e03      	subs	r3, r0, #0
 800102e:	d001      	beq.n	8001034 <HAL_UART_MspInit+0xdc>
      Error_Handler();
 8001030:	f7ff fec8 	bl	8000dc4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001034:	4b1b      	ldr	r3, [pc, #108]	; (80010a4 <HAL_UART_MspInit+0x14c>)
 8001036:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001038:	4b1a      	ldr	r3, [pc, #104]	; (80010a4 <HAL_UART_MspInit+0x14c>)
 800103a:	2180      	movs	r1, #128	; 0x80
 800103c:	0289      	lsls	r1, r1, #10
 800103e:	430a      	orrs	r2, r1
 8001040:	63da      	str	r2, [r3, #60]	; 0x3c
 8001042:	4b18      	ldr	r3, [pc, #96]	; (80010a4 <HAL_UART_MspInit+0x14c>)
 8001044:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001046:	2380      	movs	r3, #128	; 0x80
 8001048:	029b      	lsls	r3, r3, #10
 800104a:	4013      	ands	r3, r2
 800104c:	60fb      	str	r3, [r7, #12]
 800104e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001050:	4b14      	ldr	r3, [pc, #80]	; (80010a4 <HAL_UART_MspInit+0x14c>)
 8001052:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001054:	4b13      	ldr	r3, [pc, #76]	; (80010a4 <HAL_UART_MspInit+0x14c>)
 8001056:	2101      	movs	r1, #1
 8001058:	430a      	orrs	r2, r1
 800105a:	635a      	str	r2, [r3, #52]	; 0x34
 800105c:	4b11      	ldr	r3, [pc, #68]	; (80010a4 <HAL_UART_MspInit+0x14c>)
 800105e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001060:	2201      	movs	r2, #1
 8001062:	4013      	ands	r3, r2
 8001064:	60bb      	str	r3, [r7, #8]
 8001066:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001068:	214c      	movs	r1, #76	; 0x4c
 800106a:	187b      	adds	r3, r7, r1
 800106c:	220c      	movs	r2, #12
 800106e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001070:	187b      	adds	r3, r7, r1
 8001072:	2202      	movs	r2, #2
 8001074:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001076:	187b      	adds	r3, r7, r1
 8001078:	2200      	movs	r2, #0
 800107a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107c:	187b      	adds	r3, r7, r1
 800107e:	2200      	movs	r2, #0
 8001080:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001082:	187b      	adds	r3, r7, r1
 8001084:	2201      	movs	r2, #1
 8001086:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001088:	187a      	adds	r2, r7, r1
 800108a:	23a0      	movs	r3, #160	; 0xa0
 800108c:	05db      	lsls	r3, r3, #23
 800108e:	0011      	movs	r1, r2
 8001090:	0018      	movs	r0, r3
 8001092:	f000 fb05 	bl	80016a0 <HAL_GPIO_Init>
}
 8001096:	46c0      	nop			; (mov r8, r8)
 8001098:	46bd      	mov	sp, r7
 800109a:	b019      	add	sp, #100	; 0x64
 800109c:	bd90      	pop	{r4, r7, pc}
 800109e:	46c0      	nop			; (mov r8, r8)
 80010a0:	40013800 	.word	0x40013800
 80010a4:	40021000 	.word	0x40021000
 80010a8:	40004400 	.word	0x40004400

080010ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010b0:	e7fe      	b.n	80010b0 <NMI_Handler+0x4>

080010b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010b2:	b580      	push	{r7, lr}
 80010b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010b6:	e7fe      	b.n	80010b6 <HardFault_Handler+0x4>

080010b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80010bc:	46c0      	nop			; (mov r8, r8)
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010c2:	b580      	push	{r7, lr}
 80010c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010c6:	46c0      	nop			; (mov r8, r8)
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}

080010cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010d0:	f000 f89c 	bl	800120c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010d4:	46c0      	nop			; (mov r8, r8)
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}

080010da <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010da:	b580      	push	{r7, lr}
 80010dc:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010de:	46c0      	nop			; (mov r8, r8)
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}

080010e4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80010e4:	480d      	ldr	r0, [pc, #52]	; (800111c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80010e6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80010e8:	f7ff fff7 	bl	80010da <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010ec:	480c      	ldr	r0, [pc, #48]	; (8001120 <LoopForever+0x6>)
  ldr r1, =_edata
 80010ee:	490d      	ldr	r1, [pc, #52]	; (8001124 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010f0:	4a0d      	ldr	r2, [pc, #52]	; (8001128 <LoopForever+0xe>)
  movs r3, #0
 80010f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010f4:	e002      	b.n	80010fc <LoopCopyDataInit>

080010f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010fa:	3304      	adds	r3, #4

080010fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001100:	d3f9      	bcc.n	80010f6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001102:	4a0a      	ldr	r2, [pc, #40]	; (800112c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001104:	4c0a      	ldr	r4, [pc, #40]	; (8001130 <LoopForever+0x16>)
  movs r3, #0
 8001106:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001108:	e001      	b.n	800110e <LoopFillZerobss>

0800110a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800110a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800110c:	3204      	adds	r2, #4

0800110e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800110e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001110:	d3fb      	bcc.n	800110a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001112:	f003 f88d 	bl	8004230 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001116:	f7ff fa81 	bl	800061c <main>

0800111a <LoopForever>:

LoopForever:
  b LoopForever
 800111a:	e7fe      	b.n	800111a <LoopForever>
  ldr   r0, =_estack
 800111c:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8001120:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001124:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001128:	0800438c 	.word	0x0800438c
  ldr r2, =_sbss
 800112c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001130:	200009f8 	.word	0x200009f8

08001134 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001134:	e7fe      	b.n	8001134 <ADC1_COMP_IRQHandler>
	...

08001138 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800113e:	1dfb      	adds	r3, r7, #7
 8001140:	2200      	movs	r2, #0
 8001142:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001144:	4b0b      	ldr	r3, [pc, #44]	; (8001174 <HAL_Init+0x3c>)
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	4b0a      	ldr	r3, [pc, #40]	; (8001174 <HAL_Init+0x3c>)
 800114a:	2180      	movs	r1, #128	; 0x80
 800114c:	0049      	lsls	r1, r1, #1
 800114e:	430a      	orrs	r2, r1
 8001150:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001152:	2000      	movs	r0, #0
 8001154:	f000 f810 	bl	8001178 <HAL_InitTick>
 8001158:	1e03      	subs	r3, r0, #0
 800115a:	d003      	beq.n	8001164 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800115c:	1dfb      	adds	r3, r7, #7
 800115e:	2201      	movs	r2, #1
 8001160:	701a      	strb	r2, [r3, #0]
 8001162:	e001      	b.n	8001168 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001164:	f7ff fe34 	bl	8000dd0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001168:	1dfb      	adds	r3, r7, #7
 800116a:	781b      	ldrb	r3, [r3, #0]
}
 800116c:	0018      	movs	r0, r3
 800116e:	46bd      	mov	sp, r7
 8001170:	b002      	add	sp, #8
 8001172:	bd80      	pop	{r7, pc}
 8001174:	40022000 	.word	0x40022000

08001178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001178:	b590      	push	{r4, r7, lr}
 800117a:	b085      	sub	sp, #20
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001180:	230f      	movs	r3, #15
 8001182:	18fb      	adds	r3, r7, r3
 8001184:	2200      	movs	r2, #0
 8001186:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001188:	4b1d      	ldr	r3, [pc, #116]	; (8001200 <HAL_InitTick+0x88>)
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d02b      	beq.n	80011e8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001190:	4b1c      	ldr	r3, [pc, #112]	; (8001204 <HAL_InitTick+0x8c>)
 8001192:	681c      	ldr	r4, [r3, #0]
 8001194:	4b1a      	ldr	r3, [pc, #104]	; (8001200 <HAL_InitTick+0x88>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	0019      	movs	r1, r3
 800119a:	23fa      	movs	r3, #250	; 0xfa
 800119c:	0098      	lsls	r0, r3, #2
 800119e:	f7fe ffb1 	bl	8000104 <__udivsi3>
 80011a2:	0003      	movs	r3, r0
 80011a4:	0019      	movs	r1, r3
 80011a6:	0020      	movs	r0, r4
 80011a8:	f7fe ffac 	bl	8000104 <__udivsi3>
 80011ac:	0003      	movs	r3, r0
 80011ae:	0018      	movs	r0, r3
 80011b0:	f000 f929 	bl	8001406 <HAL_SYSTICK_Config>
 80011b4:	1e03      	subs	r3, r0, #0
 80011b6:	d112      	bne.n	80011de <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2b03      	cmp	r3, #3
 80011bc:	d80a      	bhi.n	80011d4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011be:	6879      	ldr	r1, [r7, #4]
 80011c0:	2301      	movs	r3, #1
 80011c2:	425b      	negs	r3, r3
 80011c4:	2200      	movs	r2, #0
 80011c6:	0018      	movs	r0, r3
 80011c8:	f000 f908 	bl	80013dc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011cc:	4b0e      	ldr	r3, [pc, #56]	; (8001208 <HAL_InitTick+0x90>)
 80011ce:	687a      	ldr	r2, [r7, #4]
 80011d0:	601a      	str	r2, [r3, #0]
 80011d2:	e00d      	b.n	80011f0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80011d4:	230f      	movs	r3, #15
 80011d6:	18fb      	adds	r3, r7, r3
 80011d8:	2201      	movs	r2, #1
 80011da:	701a      	strb	r2, [r3, #0]
 80011dc:	e008      	b.n	80011f0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80011de:	230f      	movs	r3, #15
 80011e0:	18fb      	adds	r3, r7, r3
 80011e2:	2201      	movs	r2, #1
 80011e4:	701a      	strb	r2, [r3, #0]
 80011e6:	e003      	b.n	80011f0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011e8:	230f      	movs	r3, #15
 80011ea:	18fb      	adds	r3, r7, r3
 80011ec:	2201      	movs	r2, #1
 80011ee:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80011f0:	230f      	movs	r3, #15
 80011f2:	18fb      	adds	r3, r7, r3
 80011f4:	781b      	ldrb	r3, [r3, #0]
}
 80011f6:	0018      	movs	r0, r3
 80011f8:	46bd      	mov	sp, r7
 80011fa:	b005      	add	sp, #20
 80011fc:	bd90      	pop	{r4, r7, pc}
 80011fe:	46c0      	nop			; (mov r8, r8)
 8001200:	2000000c 	.word	0x2000000c
 8001204:	20000004 	.word	0x20000004
 8001208:	20000008 	.word	0x20000008

0800120c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001210:	4b05      	ldr	r3, [pc, #20]	; (8001228 <HAL_IncTick+0x1c>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	001a      	movs	r2, r3
 8001216:	4b05      	ldr	r3, [pc, #20]	; (800122c <HAL_IncTick+0x20>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	18d2      	adds	r2, r2, r3
 800121c:	4b03      	ldr	r3, [pc, #12]	; (800122c <HAL_IncTick+0x20>)
 800121e:	601a      	str	r2, [r3, #0]
}
 8001220:	46c0      	nop			; (mov r8, r8)
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	46c0      	nop			; (mov r8, r8)
 8001228:	2000000c 	.word	0x2000000c
 800122c:	200009f4 	.word	0x200009f4

08001230 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
  return uwTick;
 8001234:	4b02      	ldr	r3, [pc, #8]	; (8001240 <HAL_GetTick+0x10>)
 8001236:	681b      	ldr	r3, [r3, #0]
}
 8001238:	0018      	movs	r0, r3
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	46c0      	nop			; (mov r8, r8)
 8001240:	200009f4 	.word	0x200009f4

08001244 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800124c:	f7ff fff0 	bl	8001230 <HAL_GetTick>
 8001250:	0003      	movs	r3, r0
 8001252:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	3301      	adds	r3, #1
 800125c:	d005      	beq.n	800126a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800125e:	4b0a      	ldr	r3, [pc, #40]	; (8001288 <HAL_Delay+0x44>)
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	001a      	movs	r2, r3
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	189b      	adds	r3, r3, r2
 8001268:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800126a:	46c0      	nop			; (mov r8, r8)
 800126c:	f7ff ffe0 	bl	8001230 <HAL_GetTick>
 8001270:	0002      	movs	r2, r0
 8001272:	68bb      	ldr	r3, [r7, #8]
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	68fa      	ldr	r2, [r7, #12]
 8001278:	429a      	cmp	r2, r3
 800127a:	d8f7      	bhi.n	800126c <HAL_Delay+0x28>
  {
  }
}
 800127c:	46c0      	nop			; (mov r8, r8)
 800127e:	46c0      	nop			; (mov r8, r8)
 8001280:	46bd      	mov	sp, r7
 8001282:	b004      	add	sp, #16
 8001284:	bd80      	pop	{r7, pc}
 8001286:	46c0      	nop			; (mov r8, r8)
 8001288:	2000000c 	.word	0x2000000c

0800128c <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8001294:	4b06      	ldr	r3, [pc, #24]	; (80012b0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a06      	ldr	r2, [pc, #24]	; (80012b4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 800129a:	4013      	ands	r3, r2
 800129c:	0019      	movs	r1, r3
 800129e:	4b04      	ldr	r3, [pc, #16]	; (80012b0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80012a0:	687a      	ldr	r2, [r7, #4]
 80012a2:	430a      	orrs	r2, r1
 80012a4:	601a      	str	r2, [r3, #0]
}
 80012a6:	46c0      	nop			; (mov r8, r8)
 80012a8:	46bd      	mov	sp, r7
 80012aa:	b002      	add	sp, #8
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	46c0      	nop			; (mov r8, r8)
 80012b0:	40010000 	.word	0x40010000
 80012b4:	fffff9ff 	.word	0xfffff9ff

080012b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012b8:	b590      	push	{r4, r7, lr}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	0002      	movs	r2, r0
 80012c0:	6039      	str	r1, [r7, #0]
 80012c2:	1dfb      	adds	r3, r7, #7
 80012c4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80012c6:	1dfb      	adds	r3, r7, #7
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	2b7f      	cmp	r3, #127	; 0x7f
 80012cc:	d828      	bhi.n	8001320 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012ce:	4a2f      	ldr	r2, [pc, #188]	; (800138c <__NVIC_SetPriority+0xd4>)
 80012d0:	1dfb      	adds	r3, r7, #7
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	b25b      	sxtb	r3, r3
 80012d6:	089b      	lsrs	r3, r3, #2
 80012d8:	33c0      	adds	r3, #192	; 0xc0
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	589b      	ldr	r3, [r3, r2]
 80012de:	1dfa      	adds	r2, r7, #7
 80012e0:	7812      	ldrb	r2, [r2, #0]
 80012e2:	0011      	movs	r1, r2
 80012e4:	2203      	movs	r2, #3
 80012e6:	400a      	ands	r2, r1
 80012e8:	00d2      	lsls	r2, r2, #3
 80012ea:	21ff      	movs	r1, #255	; 0xff
 80012ec:	4091      	lsls	r1, r2
 80012ee:	000a      	movs	r2, r1
 80012f0:	43d2      	mvns	r2, r2
 80012f2:	401a      	ands	r2, r3
 80012f4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	019b      	lsls	r3, r3, #6
 80012fa:	22ff      	movs	r2, #255	; 0xff
 80012fc:	401a      	ands	r2, r3
 80012fe:	1dfb      	adds	r3, r7, #7
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	0018      	movs	r0, r3
 8001304:	2303      	movs	r3, #3
 8001306:	4003      	ands	r3, r0
 8001308:	00db      	lsls	r3, r3, #3
 800130a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800130c:	481f      	ldr	r0, [pc, #124]	; (800138c <__NVIC_SetPriority+0xd4>)
 800130e:	1dfb      	adds	r3, r7, #7
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	b25b      	sxtb	r3, r3
 8001314:	089b      	lsrs	r3, r3, #2
 8001316:	430a      	orrs	r2, r1
 8001318:	33c0      	adds	r3, #192	; 0xc0
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800131e:	e031      	b.n	8001384 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001320:	4a1b      	ldr	r2, [pc, #108]	; (8001390 <__NVIC_SetPriority+0xd8>)
 8001322:	1dfb      	adds	r3, r7, #7
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	0019      	movs	r1, r3
 8001328:	230f      	movs	r3, #15
 800132a:	400b      	ands	r3, r1
 800132c:	3b08      	subs	r3, #8
 800132e:	089b      	lsrs	r3, r3, #2
 8001330:	3306      	adds	r3, #6
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	18d3      	adds	r3, r2, r3
 8001336:	3304      	adds	r3, #4
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	1dfa      	adds	r2, r7, #7
 800133c:	7812      	ldrb	r2, [r2, #0]
 800133e:	0011      	movs	r1, r2
 8001340:	2203      	movs	r2, #3
 8001342:	400a      	ands	r2, r1
 8001344:	00d2      	lsls	r2, r2, #3
 8001346:	21ff      	movs	r1, #255	; 0xff
 8001348:	4091      	lsls	r1, r2
 800134a:	000a      	movs	r2, r1
 800134c:	43d2      	mvns	r2, r2
 800134e:	401a      	ands	r2, r3
 8001350:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	019b      	lsls	r3, r3, #6
 8001356:	22ff      	movs	r2, #255	; 0xff
 8001358:	401a      	ands	r2, r3
 800135a:	1dfb      	adds	r3, r7, #7
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	0018      	movs	r0, r3
 8001360:	2303      	movs	r3, #3
 8001362:	4003      	ands	r3, r0
 8001364:	00db      	lsls	r3, r3, #3
 8001366:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001368:	4809      	ldr	r0, [pc, #36]	; (8001390 <__NVIC_SetPriority+0xd8>)
 800136a:	1dfb      	adds	r3, r7, #7
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	001c      	movs	r4, r3
 8001370:	230f      	movs	r3, #15
 8001372:	4023      	ands	r3, r4
 8001374:	3b08      	subs	r3, #8
 8001376:	089b      	lsrs	r3, r3, #2
 8001378:	430a      	orrs	r2, r1
 800137a:	3306      	adds	r3, #6
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	18c3      	adds	r3, r0, r3
 8001380:	3304      	adds	r3, #4
 8001382:	601a      	str	r2, [r3, #0]
}
 8001384:	46c0      	nop			; (mov r8, r8)
 8001386:	46bd      	mov	sp, r7
 8001388:	b003      	add	sp, #12
 800138a:	bd90      	pop	{r4, r7, pc}
 800138c:	e000e100 	.word	0xe000e100
 8001390:	e000ed00 	.word	0xe000ed00

08001394 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	1e5a      	subs	r2, r3, #1
 80013a0:	2380      	movs	r3, #128	; 0x80
 80013a2:	045b      	lsls	r3, r3, #17
 80013a4:	429a      	cmp	r2, r3
 80013a6:	d301      	bcc.n	80013ac <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013a8:	2301      	movs	r3, #1
 80013aa:	e010      	b.n	80013ce <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013ac:	4b0a      	ldr	r3, [pc, #40]	; (80013d8 <SysTick_Config+0x44>)
 80013ae:	687a      	ldr	r2, [r7, #4]
 80013b0:	3a01      	subs	r2, #1
 80013b2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013b4:	2301      	movs	r3, #1
 80013b6:	425b      	negs	r3, r3
 80013b8:	2103      	movs	r1, #3
 80013ba:	0018      	movs	r0, r3
 80013bc:	f7ff ff7c 	bl	80012b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013c0:	4b05      	ldr	r3, [pc, #20]	; (80013d8 <SysTick_Config+0x44>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013c6:	4b04      	ldr	r3, [pc, #16]	; (80013d8 <SysTick_Config+0x44>)
 80013c8:	2207      	movs	r2, #7
 80013ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013cc:	2300      	movs	r3, #0
}
 80013ce:	0018      	movs	r0, r3
 80013d0:	46bd      	mov	sp, r7
 80013d2:	b002      	add	sp, #8
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	46c0      	nop			; (mov r8, r8)
 80013d8:	e000e010 	.word	0xe000e010

080013dc <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b084      	sub	sp, #16
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	60b9      	str	r1, [r7, #8]
 80013e4:	607a      	str	r2, [r7, #4]
 80013e6:	210f      	movs	r1, #15
 80013e8:	187b      	adds	r3, r7, r1
 80013ea:	1c02      	adds	r2, r0, #0
 80013ec:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80013ee:	68ba      	ldr	r2, [r7, #8]
 80013f0:	187b      	adds	r3, r7, r1
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	b25b      	sxtb	r3, r3
 80013f6:	0011      	movs	r1, r2
 80013f8:	0018      	movs	r0, r3
 80013fa:	f7ff ff5d 	bl	80012b8 <__NVIC_SetPriority>
}
 80013fe:	46c0      	nop			; (mov r8, r8)
 8001400:	46bd      	mov	sp, r7
 8001402:	b004      	add	sp, #16
 8001404:	bd80      	pop	{r7, pc}

08001406 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001406:	b580      	push	{r7, lr}
 8001408:	b082      	sub	sp, #8
 800140a:	af00      	add	r7, sp, #0
 800140c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	0018      	movs	r0, r3
 8001412:	f7ff ffbf 	bl	8001394 <SysTick_Config>
 8001416:	0003      	movs	r3, r0
}
 8001418:	0018      	movs	r0, r3
 800141a:	46bd      	mov	sp, r7
 800141c:	b002      	add	sp, #8
 800141e:	bd80      	pop	{r7, pc}

08001420 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d101      	bne.n	8001432 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	e015      	b.n	800145e <HAL_DAC_Init+0x3e>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	791b      	ldrb	r3, [r3, #4]
 8001436:	b2db      	uxtb	r3, r3
 8001438:	2b00      	cmp	r3, #0
 800143a:	d106      	bne.n	800144a <HAL_DAC_Init+0x2a>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2200      	movs	r2, #0
 8001440:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	0018      	movs	r0, r3
 8001446:	f7ff fceb 	bl	8000e20 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2202      	movs	r2, #2
 800144e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2200      	movs	r2, #0
 8001454:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2201      	movs	r2, #1
 800145a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800145c:	2300      	movs	r3, #0
}
 800145e:	0018      	movs	r0, r3
 8001460:	46bd      	mov	sp, r7
 8001462:	b002      	add	sp, #8
 8001464:	bd80      	pop	{r7, pc}
	...

08001468 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b088      	sub	sp, #32
 800146c:	af00      	add	r7, sp, #0
 800146e:	60f8      	str	r0, [r7, #12]
 8001470:	60b9      	str	r1, [r7, #8]
 8001472:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	795b      	ldrb	r3, [r3, #5]
 8001478:	2b01      	cmp	r3, #1
 800147a:	d101      	bne.n	8001480 <HAL_DAC_ConfigChannel+0x18>
 800147c:	2302      	movs	r3, #2
 800147e:	e107      	b.n	8001690 <HAL_DAC_ConfigChannel+0x228>
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	2201      	movs	r2, #1
 8001484:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	2202      	movs	r2, #2
 800148a:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	2b04      	cmp	r3, #4
 8001492:	d000      	beq.n	8001496 <HAL_DAC_ConfigChannel+0x2e>
 8001494:	e074      	b.n	8001580 <HAL_DAC_ConfigChannel+0x118>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8001496:	f7ff fecb 	bl	8001230 <HAL_GetTick>
 800149a:	0003      	movs	r3, r0
 800149c:	61fb      	str	r3, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d134      	bne.n	800150e <HAL_DAC_ConfigChannel+0xa6>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80014a4:	e011      	b.n	80014ca <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80014a6:	f7ff fec3 	bl	8001230 <HAL_GetTick>
 80014aa:	0002      	movs	r2, r0
 80014ac:	69fb      	ldr	r3, [r7, #28]
 80014ae:	1ad3      	subs	r3, r2, r3
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	d90a      	bls.n	80014ca <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	691b      	ldr	r3, [r3, #16]
 80014b8:	2208      	movs	r2, #8
 80014ba:	431a      	orrs	r2, r3
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	2203      	movs	r2, #3
 80014c4:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80014c6:	2303      	movs	r3, #3
 80014c8:	e0e2      	b.n	8001690 <HAL_DAC_ConfigChannel+0x228>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014d0:	2380      	movs	r3, #128	; 0x80
 80014d2:	021b      	lsls	r3, r3, #8
 80014d4:	4013      	ands	r3, r2
 80014d6:	d1e6      	bne.n	80014a6 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 80014d8:	2001      	movs	r0, #1
 80014da:	f7ff feb3 	bl	8001244 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	68ba      	ldr	r2, [r7, #8]
 80014e4:	6992      	ldr	r2, [r2, #24]
 80014e6:	641a      	str	r2, [r3, #64]	; 0x40
 80014e8:	e01e      	b.n	8001528 <HAL_DAC_ConfigChannel+0xc0>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80014ea:	f7ff fea1 	bl	8001230 <HAL_GetTick>
 80014ee:	0002      	movs	r2, r0
 80014f0:	69fb      	ldr	r3, [r7, #28]
 80014f2:	1ad3      	subs	r3, r2, r3
 80014f4:	2b01      	cmp	r3, #1
 80014f6:	d90a      	bls.n	800150e <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	691b      	ldr	r3, [r3, #16]
 80014fc:	2208      	movs	r2, #8
 80014fe:	431a      	orrs	r2, r3
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	2203      	movs	r2, #3
 8001508:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800150a:	2303      	movs	r3, #3
 800150c:	e0c0      	b.n	8001690 <HAL_DAC_ConfigChannel+0x228>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001514:	2b00      	cmp	r3, #0
 8001516:	dbe8      	blt.n	80014ea <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8001518:	2001      	movs	r0, #1
 800151a:	f7ff fe93 	bl	8001244 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	68ba      	ldr	r2, [r7, #8]
 8001524:	6992      	ldr	r2, [r2, #24]
 8001526:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800152e:	687a      	ldr	r2, [r7, #4]
 8001530:	2110      	movs	r1, #16
 8001532:	400a      	ands	r2, r1
 8001534:	4958      	ldr	r1, [pc, #352]	; (8001698 <HAL_DAC_ConfigChannel+0x230>)
 8001536:	4091      	lsls	r1, r2
 8001538:	000a      	movs	r2, r1
 800153a:	43d2      	mvns	r2, r2
 800153c:	401a      	ands	r2, r3
 800153e:	0011      	movs	r1, r2
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	69da      	ldr	r2, [r3, #28]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2010      	movs	r0, #16
 8001548:	4003      	ands	r3, r0
 800154a:	409a      	lsls	r2, r3
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	430a      	orrs	r2, r1
 8001552:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800155a:	687a      	ldr	r2, [r7, #4]
 800155c:	2110      	movs	r1, #16
 800155e:	400a      	ands	r2, r1
 8001560:	21ff      	movs	r1, #255	; 0xff
 8001562:	4091      	lsls	r1, r2
 8001564:	000a      	movs	r2, r1
 8001566:	43d2      	mvns	r2, r2
 8001568:	401a      	ands	r2, r3
 800156a:	0011      	movs	r1, r2
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	6a1a      	ldr	r2, [r3, #32]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2010      	movs	r0, #16
 8001574:	4003      	ands	r3, r0
 8001576:	409a      	lsls	r2, r3
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	430a      	orrs	r2, r1
 800157e:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	691b      	ldr	r3, [r3, #16]
 8001584:	2b01      	cmp	r3, #1
 8001586:	d11d      	bne.n	80015c4 <HAL_DAC_ConfigChannel+0x15c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800158e:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2210      	movs	r2, #16
 8001594:	4013      	ands	r3, r2
 8001596:	221f      	movs	r2, #31
 8001598:	409a      	lsls	r2, r3
 800159a:	0013      	movs	r3, r2
 800159c:	43da      	mvns	r2, r3
 800159e:	69bb      	ldr	r3, [r7, #24]
 80015a0:	4013      	ands	r3, r2
 80015a2:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	695b      	ldr	r3, [r3, #20]
 80015a8:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2210      	movs	r2, #16
 80015ae:	4013      	ands	r3, r2
 80015b0:	697a      	ldr	r2, [r7, #20]
 80015b2:	409a      	lsls	r2, r3
 80015b4:	0013      	movs	r3, r2
 80015b6:	69ba      	ldr	r2, [r7, #24]
 80015b8:	4313      	orrs	r3, r2
 80015ba:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	69ba      	ldr	r2, [r7, #24]
 80015c2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015ca:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2210      	movs	r2, #16
 80015d0:	4013      	ands	r3, r2
 80015d2:	2207      	movs	r2, #7
 80015d4:	409a      	lsls	r2, r3
 80015d6:	0013      	movs	r3, r2
 80015d8:	43da      	mvns	r2, r3
 80015da:	69bb      	ldr	r3, [r7, #24]
 80015dc:	4013      	ands	r3, r2
 80015de:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	431a      	orrs	r2, r3
 80015ea:	68bb      	ldr	r3, [r7, #8]
 80015ec:	68db      	ldr	r3, [r3, #12]
 80015ee:	4313      	orrs	r3, r2
 80015f0:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2210      	movs	r2, #16
 80015f6:	4013      	ands	r3, r2
 80015f8:	697a      	ldr	r2, [r7, #20]
 80015fa:	409a      	lsls	r2, r3
 80015fc:	0013      	movs	r3, r2
 80015fe:	69ba      	ldr	r2, [r7, #24]
 8001600:	4313      	orrs	r3, r2
 8001602:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	69ba      	ldr	r2, [r7, #24]
 800160a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2110      	movs	r1, #16
 8001616:	400b      	ands	r3, r1
 8001618:	2180      	movs	r1, #128	; 0x80
 800161a:	01c9      	lsls	r1, r1, #7
 800161c:	4099      	lsls	r1, r3
 800161e:	000b      	movs	r3, r1
 8001620:	43d9      	mvns	r1, r3
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	400a      	ands	r2, r1
 8001628:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2210      	movs	r2, #16
 8001636:	4013      	ands	r3, r2
 8001638:	4a18      	ldr	r2, [pc, #96]	; (800169c <HAL_DAC_ConfigChannel+0x234>)
 800163a:	409a      	lsls	r2, r3
 800163c:	0013      	movs	r3, r2
 800163e:	43da      	mvns	r2, r3
 8001640:	69bb      	ldr	r3, [r7, #24]
 8001642:	4013      	ands	r3, r2
 8001644:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8001646:	68bb      	ldr	r3, [r7, #8]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2210      	movs	r2, #16
 8001650:	4013      	ands	r3, r2
 8001652:	697a      	ldr	r2, [r7, #20]
 8001654:	409a      	lsls	r2, r3
 8001656:	0013      	movs	r3, r2
 8001658:	69ba      	ldr	r2, [r7, #24]
 800165a:	4313      	orrs	r3, r2
 800165c:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	69ba      	ldr	r2, [r7, #24]
 8001664:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2110      	movs	r1, #16
 8001670:	400b      	ands	r3, r1
 8001672:	21c0      	movs	r1, #192	; 0xc0
 8001674:	4099      	lsls	r1, r3
 8001676:	000b      	movs	r3, r1
 8001678:	43d9      	mvns	r1, r3
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	400a      	ands	r2, r1
 8001680:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	2201      	movs	r2, #1
 8001686:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	2200      	movs	r2, #0
 800168c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800168e:	2300      	movs	r3, #0
}
 8001690:	0018      	movs	r0, r3
 8001692:	46bd      	mov	sp, r7
 8001694:	b008      	add	sp, #32
 8001696:	bd80      	pop	{r7, pc}
 8001698:	000003ff 	.word	0x000003ff
 800169c:	00000ffe 	.word	0x00000ffe

080016a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b086      	sub	sp, #24
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016aa:	2300      	movs	r3, #0
 80016ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016ae:	e147      	b.n	8001940 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	2101      	movs	r1, #1
 80016b6:	697a      	ldr	r2, [r7, #20]
 80016b8:	4091      	lsls	r1, r2
 80016ba:	000a      	movs	r2, r1
 80016bc:	4013      	ands	r3, r2
 80016be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d100      	bne.n	80016c8 <HAL_GPIO_Init+0x28>
 80016c6:	e138      	b.n	800193a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	2203      	movs	r2, #3
 80016ce:	4013      	ands	r3, r2
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d005      	beq.n	80016e0 <HAL_GPIO_Init+0x40>
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	2203      	movs	r2, #3
 80016da:	4013      	ands	r3, r2
 80016dc:	2b02      	cmp	r3, #2
 80016de:	d130      	bne.n	8001742 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	005b      	lsls	r3, r3, #1
 80016ea:	2203      	movs	r2, #3
 80016ec:	409a      	lsls	r2, r3
 80016ee:	0013      	movs	r3, r2
 80016f0:	43da      	mvns	r2, r3
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	4013      	ands	r3, r2
 80016f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	68da      	ldr	r2, [r3, #12]
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	005b      	lsls	r3, r3, #1
 8001700:	409a      	lsls	r2, r3
 8001702:	0013      	movs	r3, r2
 8001704:	693a      	ldr	r2, [r7, #16]
 8001706:	4313      	orrs	r3, r2
 8001708:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	693a      	ldr	r2, [r7, #16]
 800170e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001716:	2201      	movs	r2, #1
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	409a      	lsls	r2, r3
 800171c:	0013      	movs	r3, r2
 800171e:	43da      	mvns	r2, r3
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	4013      	ands	r3, r2
 8001724:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	091b      	lsrs	r3, r3, #4
 800172c:	2201      	movs	r2, #1
 800172e:	401a      	ands	r2, r3
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	409a      	lsls	r2, r3
 8001734:	0013      	movs	r3, r2
 8001736:	693a      	ldr	r2, [r7, #16]
 8001738:	4313      	orrs	r3, r2
 800173a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	693a      	ldr	r2, [r7, #16]
 8001740:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	2203      	movs	r2, #3
 8001748:	4013      	ands	r3, r2
 800174a:	2b03      	cmp	r3, #3
 800174c:	d017      	beq.n	800177e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	68db      	ldr	r3, [r3, #12]
 8001752:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	005b      	lsls	r3, r3, #1
 8001758:	2203      	movs	r2, #3
 800175a:	409a      	lsls	r2, r3
 800175c:	0013      	movs	r3, r2
 800175e:	43da      	mvns	r2, r3
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	4013      	ands	r3, r2
 8001764:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	689a      	ldr	r2, [r3, #8]
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	005b      	lsls	r3, r3, #1
 800176e:	409a      	lsls	r2, r3
 8001770:	0013      	movs	r3, r2
 8001772:	693a      	ldr	r2, [r7, #16]
 8001774:	4313      	orrs	r3, r2
 8001776:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	693a      	ldr	r2, [r7, #16]
 800177c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	2203      	movs	r2, #3
 8001784:	4013      	ands	r3, r2
 8001786:	2b02      	cmp	r3, #2
 8001788:	d123      	bne.n	80017d2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	08da      	lsrs	r2, r3, #3
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	3208      	adds	r2, #8
 8001792:	0092      	lsls	r2, r2, #2
 8001794:	58d3      	ldr	r3, [r2, r3]
 8001796:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	2207      	movs	r2, #7
 800179c:	4013      	ands	r3, r2
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	220f      	movs	r2, #15
 80017a2:	409a      	lsls	r2, r3
 80017a4:	0013      	movs	r3, r2
 80017a6:	43da      	mvns	r2, r3
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	4013      	ands	r3, r2
 80017ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	691a      	ldr	r2, [r3, #16]
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	2107      	movs	r1, #7
 80017b6:	400b      	ands	r3, r1
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	409a      	lsls	r2, r3
 80017bc:	0013      	movs	r3, r2
 80017be:	693a      	ldr	r2, [r7, #16]
 80017c0:	4313      	orrs	r3, r2
 80017c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	08da      	lsrs	r2, r3, #3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	3208      	adds	r2, #8
 80017cc:	0092      	lsls	r2, r2, #2
 80017ce:	6939      	ldr	r1, [r7, #16]
 80017d0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	005b      	lsls	r3, r3, #1
 80017dc:	2203      	movs	r2, #3
 80017de:	409a      	lsls	r2, r3
 80017e0:	0013      	movs	r3, r2
 80017e2:	43da      	mvns	r2, r3
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	4013      	ands	r3, r2
 80017e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	2203      	movs	r2, #3
 80017f0:	401a      	ands	r2, r3
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	005b      	lsls	r3, r3, #1
 80017f6:	409a      	lsls	r2, r3
 80017f8:	0013      	movs	r3, r2
 80017fa:	693a      	ldr	r2, [r7, #16]
 80017fc:	4313      	orrs	r3, r2
 80017fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	693a      	ldr	r2, [r7, #16]
 8001804:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	685a      	ldr	r2, [r3, #4]
 800180a:	23c0      	movs	r3, #192	; 0xc0
 800180c:	029b      	lsls	r3, r3, #10
 800180e:	4013      	ands	r3, r2
 8001810:	d100      	bne.n	8001814 <HAL_GPIO_Init+0x174>
 8001812:	e092      	b.n	800193a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001814:	4a50      	ldr	r2, [pc, #320]	; (8001958 <HAL_GPIO_Init+0x2b8>)
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	089b      	lsrs	r3, r3, #2
 800181a:	3318      	adds	r3, #24
 800181c:	009b      	lsls	r3, r3, #2
 800181e:	589b      	ldr	r3, [r3, r2]
 8001820:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	2203      	movs	r2, #3
 8001826:	4013      	ands	r3, r2
 8001828:	00db      	lsls	r3, r3, #3
 800182a:	220f      	movs	r2, #15
 800182c:	409a      	lsls	r2, r3
 800182e:	0013      	movs	r3, r2
 8001830:	43da      	mvns	r2, r3
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	4013      	ands	r3, r2
 8001836:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001838:	687a      	ldr	r2, [r7, #4]
 800183a:	23a0      	movs	r3, #160	; 0xa0
 800183c:	05db      	lsls	r3, r3, #23
 800183e:	429a      	cmp	r2, r3
 8001840:	d013      	beq.n	800186a <HAL_GPIO_Init+0x1ca>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	4a45      	ldr	r2, [pc, #276]	; (800195c <HAL_GPIO_Init+0x2bc>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d00d      	beq.n	8001866 <HAL_GPIO_Init+0x1c6>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	4a44      	ldr	r2, [pc, #272]	; (8001960 <HAL_GPIO_Init+0x2c0>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d007      	beq.n	8001862 <HAL_GPIO_Init+0x1c2>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4a43      	ldr	r2, [pc, #268]	; (8001964 <HAL_GPIO_Init+0x2c4>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d101      	bne.n	800185e <HAL_GPIO_Init+0x1be>
 800185a:	2303      	movs	r3, #3
 800185c:	e006      	b.n	800186c <HAL_GPIO_Init+0x1cc>
 800185e:	2305      	movs	r3, #5
 8001860:	e004      	b.n	800186c <HAL_GPIO_Init+0x1cc>
 8001862:	2302      	movs	r3, #2
 8001864:	e002      	b.n	800186c <HAL_GPIO_Init+0x1cc>
 8001866:	2301      	movs	r3, #1
 8001868:	e000      	b.n	800186c <HAL_GPIO_Init+0x1cc>
 800186a:	2300      	movs	r3, #0
 800186c:	697a      	ldr	r2, [r7, #20]
 800186e:	2103      	movs	r1, #3
 8001870:	400a      	ands	r2, r1
 8001872:	00d2      	lsls	r2, r2, #3
 8001874:	4093      	lsls	r3, r2
 8001876:	693a      	ldr	r2, [r7, #16]
 8001878:	4313      	orrs	r3, r2
 800187a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800187c:	4936      	ldr	r1, [pc, #216]	; (8001958 <HAL_GPIO_Init+0x2b8>)
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	089b      	lsrs	r3, r3, #2
 8001882:	3318      	adds	r3, #24
 8001884:	009b      	lsls	r3, r3, #2
 8001886:	693a      	ldr	r2, [r7, #16]
 8001888:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800188a:	4b33      	ldr	r3, [pc, #204]	; (8001958 <HAL_GPIO_Init+0x2b8>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	43da      	mvns	r2, r3
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	4013      	ands	r3, r2
 8001898:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	685a      	ldr	r2, [r3, #4]
 800189e:	2380      	movs	r3, #128	; 0x80
 80018a0:	035b      	lsls	r3, r3, #13
 80018a2:	4013      	ands	r3, r2
 80018a4:	d003      	beq.n	80018ae <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80018a6:	693a      	ldr	r2, [r7, #16]
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	4313      	orrs	r3, r2
 80018ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80018ae:	4b2a      	ldr	r3, [pc, #168]	; (8001958 <HAL_GPIO_Init+0x2b8>)
 80018b0:	693a      	ldr	r2, [r7, #16]
 80018b2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80018b4:	4b28      	ldr	r3, [pc, #160]	; (8001958 <HAL_GPIO_Init+0x2b8>)
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	43da      	mvns	r2, r3
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	4013      	ands	r3, r2
 80018c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	685a      	ldr	r2, [r3, #4]
 80018c8:	2380      	movs	r3, #128	; 0x80
 80018ca:	039b      	lsls	r3, r3, #14
 80018cc:	4013      	ands	r3, r2
 80018ce:	d003      	beq.n	80018d8 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80018d0:	693a      	ldr	r2, [r7, #16]
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	4313      	orrs	r3, r2
 80018d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80018d8:	4b1f      	ldr	r3, [pc, #124]	; (8001958 <HAL_GPIO_Init+0x2b8>)
 80018da:	693a      	ldr	r2, [r7, #16]
 80018dc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80018de:	4a1e      	ldr	r2, [pc, #120]	; (8001958 <HAL_GPIO_Init+0x2b8>)
 80018e0:	2384      	movs	r3, #132	; 0x84
 80018e2:	58d3      	ldr	r3, [r2, r3]
 80018e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	43da      	mvns	r2, r3
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	4013      	ands	r3, r2
 80018ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	685a      	ldr	r2, [r3, #4]
 80018f4:	2380      	movs	r3, #128	; 0x80
 80018f6:	029b      	lsls	r3, r3, #10
 80018f8:	4013      	ands	r3, r2
 80018fa:	d003      	beq.n	8001904 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80018fc:	693a      	ldr	r2, [r7, #16]
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	4313      	orrs	r3, r2
 8001902:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001904:	4914      	ldr	r1, [pc, #80]	; (8001958 <HAL_GPIO_Init+0x2b8>)
 8001906:	2284      	movs	r2, #132	; 0x84
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800190c:	4a12      	ldr	r2, [pc, #72]	; (8001958 <HAL_GPIO_Init+0x2b8>)
 800190e:	2380      	movs	r3, #128	; 0x80
 8001910:	58d3      	ldr	r3, [r2, r3]
 8001912:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	43da      	mvns	r2, r3
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	4013      	ands	r3, r2
 800191c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	685a      	ldr	r2, [r3, #4]
 8001922:	2380      	movs	r3, #128	; 0x80
 8001924:	025b      	lsls	r3, r3, #9
 8001926:	4013      	ands	r3, r2
 8001928:	d003      	beq.n	8001932 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800192a:	693a      	ldr	r2, [r7, #16]
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	4313      	orrs	r3, r2
 8001930:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001932:	4909      	ldr	r1, [pc, #36]	; (8001958 <HAL_GPIO_Init+0x2b8>)
 8001934:	2280      	movs	r2, #128	; 0x80
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	3301      	adds	r3, #1
 800193e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	40da      	lsrs	r2, r3
 8001948:	1e13      	subs	r3, r2, #0
 800194a:	d000      	beq.n	800194e <HAL_GPIO_Init+0x2ae>
 800194c:	e6b0      	b.n	80016b0 <HAL_GPIO_Init+0x10>
  }
}
 800194e:	46c0      	nop			; (mov r8, r8)
 8001950:	46c0      	nop			; (mov r8, r8)
 8001952:	46bd      	mov	sp, r7
 8001954:	b006      	add	sp, #24
 8001956:	bd80      	pop	{r7, pc}
 8001958:	40021800 	.word	0x40021800
 800195c:	50000400 	.word	0x50000400
 8001960:	50000800 	.word	0x50000800
 8001964:	50000c00 	.word	0x50000c00

08001968 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b084      	sub	sp, #16
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	000a      	movs	r2, r1
 8001972:	1cbb      	adds	r3, r7, #2
 8001974:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	691b      	ldr	r3, [r3, #16]
 800197a:	1cba      	adds	r2, r7, #2
 800197c:	8812      	ldrh	r2, [r2, #0]
 800197e:	4013      	ands	r3, r2
 8001980:	d004      	beq.n	800198c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001982:	230f      	movs	r3, #15
 8001984:	18fb      	adds	r3, r7, r3
 8001986:	2201      	movs	r2, #1
 8001988:	701a      	strb	r2, [r3, #0]
 800198a:	e003      	b.n	8001994 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800198c:	230f      	movs	r3, #15
 800198e:	18fb      	adds	r3, r7, r3
 8001990:	2200      	movs	r2, #0
 8001992:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001994:	230f      	movs	r3, #15
 8001996:	18fb      	adds	r3, r7, r3
 8001998:	781b      	ldrb	r3, [r3, #0]
}
 800199a:	0018      	movs	r0, r3
 800199c:	46bd      	mov	sp, r7
 800199e:	b004      	add	sp, #16
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019a2:	b580      	push	{r7, lr}
 80019a4:	b082      	sub	sp, #8
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]
 80019aa:	0008      	movs	r0, r1
 80019ac:	0011      	movs	r1, r2
 80019ae:	1cbb      	adds	r3, r7, #2
 80019b0:	1c02      	adds	r2, r0, #0
 80019b2:	801a      	strh	r2, [r3, #0]
 80019b4:	1c7b      	adds	r3, r7, #1
 80019b6:	1c0a      	adds	r2, r1, #0
 80019b8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019ba:	1c7b      	adds	r3, r7, #1
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d004      	beq.n	80019cc <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80019c2:	1cbb      	adds	r3, r7, #2
 80019c4:	881a      	ldrh	r2, [r3, #0]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80019ca:	e003      	b.n	80019d4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80019cc:	1cbb      	adds	r3, r7, #2
 80019ce:	881a      	ldrh	r2, [r3, #0]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80019d4:	46c0      	nop			; (mov r8, r8)
 80019d6:	46bd      	mov	sp, r7
 80019d8:	b002      	add	sp, #8
 80019da:	bd80      	pop	{r7, pc}

080019dc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80019e4:	4b19      	ldr	r3, [pc, #100]	; (8001a4c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a19      	ldr	r2, [pc, #100]	; (8001a50 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80019ea:	4013      	ands	r3, r2
 80019ec:	0019      	movs	r1, r3
 80019ee:	4b17      	ldr	r3, [pc, #92]	; (8001a4c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80019f0:	687a      	ldr	r2, [r7, #4]
 80019f2:	430a      	orrs	r2, r1
 80019f4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80019f6:	687a      	ldr	r2, [r7, #4]
 80019f8:	2380      	movs	r3, #128	; 0x80
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d11f      	bne.n	8001a40 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001a00:	4b14      	ldr	r3, [pc, #80]	; (8001a54 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	0013      	movs	r3, r2
 8001a06:	005b      	lsls	r3, r3, #1
 8001a08:	189b      	adds	r3, r3, r2
 8001a0a:	005b      	lsls	r3, r3, #1
 8001a0c:	4912      	ldr	r1, [pc, #72]	; (8001a58 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001a0e:	0018      	movs	r0, r3
 8001a10:	f7fe fb78 	bl	8000104 <__udivsi3>
 8001a14:	0003      	movs	r3, r0
 8001a16:	3301      	adds	r3, #1
 8001a18:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a1a:	e008      	b.n	8001a2e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d003      	beq.n	8001a2a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	3b01      	subs	r3, #1
 8001a26:	60fb      	str	r3, [r7, #12]
 8001a28:	e001      	b.n	8001a2e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	e009      	b.n	8001a42 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a2e:	4b07      	ldr	r3, [pc, #28]	; (8001a4c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001a30:	695a      	ldr	r2, [r3, #20]
 8001a32:	2380      	movs	r3, #128	; 0x80
 8001a34:	00db      	lsls	r3, r3, #3
 8001a36:	401a      	ands	r2, r3
 8001a38:	2380      	movs	r3, #128	; 0x80
 8001a3a:	00db      	lsls	r3, r3, #3
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d0ed      	beq.n	8001a1c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001a40:	2300      	movs	r3, #0
}
 8001a42:	0018      	movs	r0, r3
 8001a44:	46bd      	mov	sp, r7
 8001a46:	b004      	add	sp, #16
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	46c0      	nop			; (mov r8, r8)
 8001a4c:	40007000 	.word	0x40007000
 8001a50:	fffff9ff 	.word	0xfffff9ff
 8001a54:	20000004 	.word	0x20000004
 8001a58:	000f4240 	.word	0x000f4240

08001a5c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001a60:	4b03      	ldr	r3, [pc, #12]	; (8001a70 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001a62:	689a      	ldr	r2, [r3, #8]
 8001a64:	23e0      	movs	r3, #224	; 0xe0
 8001a66:	01db      	lsls	r3, r3, #7
 8001a68:	4013      	ands	r3, r2
}
 8001a6a:	0018      	movs	r0, r3
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	40021000 	.word	0x40021000

08001a74 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b088      	sub	sp, #32
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d101      	bne.n	8001a86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e2fe      	b.n	8002084 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	d100      	bne.n	8001a92 <HAL_RCC_OscConfig+0x1e>
 8001a90:	e07c      	b.n	8001b8c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a92:	4bc3      	ldr	r3, [pc, #780]	; (8001da0 <HAL_RCC_OscConfig+0x32c>)
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	2238      	movs	r2, #56	; 0x38
 8001a98:	4013      	ands	r3, r2
 8001a9a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a9c:	4bc0      	ldr	r3, [pc, #768]	; (8001da0 <HAL_RCC_OscConfig+0x32c>)
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	2203      	movs	r2, #3
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001aa6:	69bb      	ldr	r3, [r7, #24]
 8001aa8:	2b10      	cmp	r3, #16
 8001aaa:	d102      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x3e>
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	2b03      	cmp	r3, #3
 8001ab0:	d002      	beq.n	8001ab8 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001ab2:	69bb      	ldr	r3, [r7, #24]
 8001ab4:	2b08      	cmp	r3, #8
 8001ab6:	d10b      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ab8:	4bb9      	ldr	r3, [pc, #740]	; (8001da0 <HAL_RCC_OscConfig+0x32c>)
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	2380      	movs	r3, #128	; 0x80
 8001abe:	029b      	lsls	r3, r3, #10
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	d062      	beq.n	8001b8a <HAL_RCC_OscConfig+0x116>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d15e      	bne.n	8001b8a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	e2d9      	b.n	8002084 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	685a      	ldr	r2, [r3, #4]
 8001ad4:	2380      	movs	r3, #128	; 0x80
 8001ad6:	025b      	lsls	r3, r3, #9
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d107      	bne.n	8001aec <HAL_RCC_OscConfig+0x78>
 8001adc:	4bb0      	ldr	r3, [pc, #704]	; (8001da0 <HAL_RCC_OscConfig+0x32c>)
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	4baf      	ldr	r3, [pc, #700]	; (8001da0 <HAL_RCC_OscConfig+0x32c>)
 8001ae2:	2180      	movs	r1, #128	; 0x80
 8001ae4:	0249      	lsls	r1, r1, #9
 8001ae6:	430a      	orrs	r2, r1
 8001ae8:	601a      	str	r2, [r3, #0]
 8001aea:	e020      	b.n	8001b2e <HAL_RCC_OscConfig+0xba>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	685a      	ldr	r2, [r3, #4]
 8001af0:	23a0      	movs	r3, #160	; 0xa0
 8001af2:	02db      	lsls	r3, r3, #11
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d10e      	bne.n	8001b16 <HAL_RCC_OscConfig+0xa2>
 8001af8:	4ba9      	ldr	r3, [pc, #676]	; (8001da0 <HAL_RCC_OscConfig+0x32c>)
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	4ba8      	ldr	r3, [pc, #672]	; (8001da0 <HAL_RCC_OscConfig+0x32c>)
 8001afe:	2180      	movs	r1, #128	; 0x80
 8001b00:	02c9      	lsls	r1, r1, #11
 8001b02:	430a      	orrs	r2, r1
 8001b04:	601a      	str	r2, [r3, #0]
 8001b06:	4ba6      	ldr	r3, [pc, #664]	; (8001da0 <HAL_RCC_OscConfig+0x32c>)
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	4ba5      	ldr	r3, [pc, #660]	; (8001da0 <HAL_RCC_OscConfig+0x32c>)
 8001b0c:	2180      	movs	r1, #128	; 0x80
 8001b0e:	0249      	lsls	r1, r1, #9
 8001b10:	430a      	orrs	r2, r1
 8001b12:	601a      	str	r2, [r3, #0]
 8001b14:	e00b      	b.n	8001b2e <HAL_RCC_OscConfig+0xba>
 8001b16:	4ba2      	ldr	r3, [pc, #648]	; (8001da0 <HAL_RCC_OscConfig+0x32c>)
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	4ba1      	ldr	r3, [pc, #644]	; (8001da0 <HAL_RCC_OscConfig+0x32c>)
 8001b1c:	49a1      	ldr	r1, [pc, #644]	; (8001da4 <HAL_RCC_OscConfig+0x330>)
 8001b1e:	400a      	ands	r2, r1
 8001b20:	601a      	str	r2, [r3, #0]
 8001b22:	4b9f      	ldr	r3, [pc, #636]	; (8001da0 <HAL_RCC_OscConfig+0x32c>)
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	4b9e      	ldr	r3, [pc, #632]	; (8001da0 <HAL_RCC_OscConfig+0x32c>)
 8001b28:	499f      	ldr	r1, [pc, #636]	; (8001da8 <HAL_RCC_OscConfig+0x334>)
 8001b2a:	400a      	ands	r2, r1
 8001b2c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d014      	beq.n	8001b60 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b36:	f7ff fb7b 	bl	8001230 <HAL_GetTick>
 8001b3a:	0003      	movs	r3, r0
 8001b3c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b3e:	e008      	b.n	8001b52 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b40:	f7ff fb76 	bl	8001230 <HAL_GetTick>
 8001b44:	0002      	movs	r2, r0
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	2b64      	cmp	r3, #100	; 0x64
 8001b4c:	d901      	bls.n	8001b52 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	e298      	b.n	8002084 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b52:	4b93      	ldr	r3, [pc, #588]	; (8001da0 <HAL_RCC_OscConfig+0x32c>)
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	2380      	movs	r3, #128	; 0x80
 8001b58:	029b      	lsls	r3, r3, #10
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	d0f0      	beq.n	8001b40 <HAL_RCC_OscConfig+0xcc>
 8001b5e:	e015      	b.n	8001b8c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b60:	f7ff fb66 	bl	8001230 <HAL_GetTick>
 8001b64:	0003      	movs	r3, r0
 8001b66:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b68:	e008      	b.n	8001b7c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b6a:	f7ff fb61 	bl	8001230 <HAL_GetTick>
 8001b6e:	0002      	movs	r2, r0
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	2b64      	cmp	r3, #100	; 0x64
 8001b76:	d901      	bls.n	8001b7c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001b78:	2303      	movs	r3, #3
 8001b7a:	e283      	b.n	8002084 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b7c:	4b88      	ldr	r3, [pc, #544]	; (8001da0 <HAL_RCC_OscConfig+0x32c>)
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	2380      	movs	r3, #128	; 0x80
 8001b82:	029b      	lsls	r3, r3, #10
 8001b84:	4013      	ands	r3, r2
 8001b86:	d1f0      	bne.n	8001b6a <HAL_RCC_OscConfig+0xf6>
 8001b88:	e000      	b.n	8001b8c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b8a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	2202      	movs	r2, #2
 8001b92:	4013      	ands	r3, r2
 8001b94:	d100      	bne.n	8001b98 <HAL_RCC_OscConfig+0x124>
 8001b96:	e099      	b.n	8001ccc <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b98:	4b81      	ldr	r3, [pc, #516]	; (8001da0 <HAL_RCC_OscConfig+0x32c>)
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	2238      	movs	r2, #56	; 0x38
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ba2:	4b7f      	ldr	r3, [pc, #508]	; (8001da0 <HAL_RCC_OscConfig+0x32c>)
 8001ba4:	68db      	ldr	r3, [r3, #12]
 8001ba6:	2203      	movs	r2, #3
 8001ba8:	4013      	ands	r3, r2
 8001baa:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001bac:	69bb      	ldr	r3, [r7, #24]
 8001bae:	2b10      	cmp	r3, #16
 8001bb0:	d102      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x144>
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	2b02      	cmp	r3, #2
 8001bb6:	d002      	beq.n	8001bbe <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001bb8:	69bb      	ldr	r3, [r7, #24]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d135      	bne.n	8001c2a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001bbe:	4b78      	ldr	r3, [pc, #480]	; (8001da0 <HAL_RCC_OscConfig+0x32c>)
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	2380      	movs	r3, #128	; 0x80
 8001bc4:	00db      	lsls	r3, r3, #3
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	d005      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x162>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	68db      	ldr	r3, [r3, #12]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d101      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e256      	b.n	8002084 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bd6:	4b72      	ldr	r3, [pc, #456]	; (8001da0 <HAL_RCC_OscConfig+0x32c>)
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	4a74      	ldr	r2, [pc, #464]	; (8001dac <HAL_RCC_OscConfig+0x338>)
 8001bdc:	4013      	ands	r3, r2
 8001bde:	0019      	movs	r1, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	695b      	ldr	r3, [r3, #20]
 8001be4:	021a      	lsls	r2, r3, #8
 8001be6:	4b6e      	ldr	r3, [pc, #440]	; (8001da0 <HAL_RCC_OscConfig+0x32c>)
 8001be8:	430a      	orrs	r2, r1
 8001bea:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bec:	69bb      	ldr	r3, [r7, #24]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d112      	bne.n	8001c18 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001bf2:	4b6b      	ldr	r3, [pc, #428]	; (8001da0 <HAL_RCC_OscConfig+0x32c>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a6e      	ldr	r2, [pc, #440]	; (8001db0 <HAL_RCC_OscConfig+0x33c>)
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	0019      	movs	r1, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	691a      	ldr	r2, [r3, #16]
 8001c00:	4b67      	ldr	r3, [pc, #412]	; (8001da0 <HAL_RCC_OscConfig+0x32c>)
 8001c02:	430a      	orrs	r2, r1
 8001c04:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001c06:	4b66      	ldr	r3, [pc, #408]	; (8001da0 <HAL_RCC_OscConfig+0x32c>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	0adb      	lsrs	r3, r3, #11
 8001c0c:	2207      	movs	r2, #7
 8001c0e:	4013      	ands	r3, r2
 8001c10:	4a68      	ldr	r2, [pc, #416]	; (8001db4 <HAL_RCC_OscConfig+0x340>)
 8001c12:	40da      	lsrs	r2, r3
 8001c14:	4b68      	ldr	r3, [pc, #416]	; (8001db8 <HAL_RCC_OscConfig+0x344>)
 8001c16:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001c18:	4b68      	ldr	r3, [pc, #416]	; (8001dbc <HAL_RCC_OscConfig+0x348>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	0018      	movs	r0, r3
 8001c1e:	f7ff faab 	bl	8001178 <HAL_InitTick>
 8001c22:	1e03      	subs	r3, r0, #0
 8001c24:	d051      	beq.n	8001cca <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e22c      	b.n	8002084 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	68db      	ldr	r3, [r3, #12]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d030      	beq.n	8001c94 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001c32:	4b5b      	ldr	r3, [pc, #364]	; (8001da0 <HAL_RCC_OscConfig+0x32c>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a5e      	ldr	r2, [pc, #376]	; (8001db0 <HAL_RCC_OscConfig+0x33c>)
 8001c38:	4013      	ands	r3, r2
 8001c3a:	0019      	movs	r1, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	691a      	ldr	r2, [r3, #16]
 8001c40:	4b57      	ldr	r3, [pc, #348]	; (8001da0 <HAL_RCC_OscConfig+0x32c>)
 8001c42:	430a      	orrs	r2, r1
 8001c44:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001c46:	4b56      	ldr	r3, [pc, #344]	; (8001da0 <HAL_RCC_OscConfig+0x32c>)
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	4b55      	ldr	r3, [pc, #340]	; (8001da0 <HAL_RCC_OscConfig+0x32c>)
 8001c4c:	2180      	movs	r1, #128	; 0x80
 8001c4e:	0049      	lsls	r1, r1, #1
 8001c50:	430a      	orrs	r2, r1
 8001c52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c54:	f7ff faec 	bl	8001230 <HAL_GetTick>
 8001c58:	0003      	movs	r3, r0
 8001c5a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c5c:	e008      	b.n	8001c70 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c5e:	f7ff fae7 	bl	8001230 <HAL_GetTick>
 8001c62:	0002      	movs	r2, r0
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	1ad3      	subs	r3, r2, r3
 8001c68:	2b02      	cmp	r3, #2
 8001c6a:	d901      	bls.n	8001c70 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	e209      	b.n	8002084 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c70:	4b4b      	ldr	r3, [pc, #300]	; (8001da0 <HAL_RCC_OscConfig+0x32c>)
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	2380      	movs	r3, #128	; 0x80
 8001c76:	00db      	lsls	r3, r3, #3
 8001c78:	4013      	ands	r3, r2
 8001c7a:	d0f0      	beq.n	8001c5e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c7c:	4b48      	ldr	r3, [pc, #288]	; (8001da0 <HAL_RCC_OscConfig+0x32c>)
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	4a4a      	ldr	r2, [pc, #296]	; (8001dac <HAL_RCC_OscConfig+0x338>)
 8001c82:	4013      	ands	r3, r2
 8001c84:	0019      	movs	r1, r3
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	695b      	ldr	r3, [r3, #20]
 8001c8a:	021a      	lsls	r2, r3, #8
 8001c8c:	4b44      	ldr	r3, [pc, #272]	; (8001da0 <HAL_RCC_OscConfig+0x32c>)
 8001c8e:	430a      	orrs	r2, r1
 8001c90:	605a      	str	r2, [r3, #4]
 8001c92:	e01b      	b.n	8001ccc <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001c94:	4b42      	ldr	r3, [pc, #264]	; (8001da0 <HAL_RCC_OscConfig+0x32c>)
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	4b41      	ldr	r3, [pc, #260]	; (8001da0 <HAL_RCC_OscConfig+0x32c>)
 8001c9a:	4949      	ldr	r1, [pc, #292]	; (8001dc0 <HAL_RCC_OscConfig+0x34c>)
 8001c9c:	400a      	ands	r2, r1
 8001c9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca0:	f7ff fac6 	bl	8001230 <HAL_GetTick>
 8001ca4:	0003      	movs	r3, r0
 8001ca6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ca8:	e008      	b.n	8001cbc <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001caa:	f7ff fac1 	bl	8001230 <HAL_GetTick>
 8001cae:	0002      	movs	r2, r0
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	1ad3      	subs	r3, r2, r3
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	d901      	bls.n	8001cbc <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001cb8:	2303      	movs	r3, #3
 8001cba:	e1e3      	b.n	8002084 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001cbc:	4b38      	ldr	r3, [pc, #224]	; (8001da0 <HAL_RCC_OscConfig+0x32c>)
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	2380      	movs	r3, #128	; 0x80
 8001cc2:	00db      	lsls	r3, r3, #3
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	d1f0      	bne.n	8001caa <HAL_RCC_OscConfig+0x236>
 8001cc8:	e000      	b.n	8001ccc <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001cca:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	2208      	movs	r2, #8
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	d047      	beq.n	8001d66 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001cd6:	4b32      	ldr	r3, [pc, #200]	; (8001da0 <HAL_RCC_OscConfig+0x32c>)
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	2238      	movs	r2, #56	; 0x38
 8001cdc:	4013      	ands	r3, r2
 8001cde:	2b18      	cmp	r3, #24
 8001ce0:	d10a      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001ce2:	4b2f      	ldr	r3, [pc, #188]	; (8001da0 <HAL_RCC_OscConfig+0x32c>)
 8001ce4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ce6:	2202      	movs	r2, #2
 8001ce8:	4013      	ands	r3, r2
 8001cea:	d03c      	beq.n	8001d66 <HAL_RCC_OscConfig+0x2f2>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	699b      	ldr	r3, [r3, #24]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d138      	bne.n	8001d66 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e1c5      	b.n	8002084 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	699b      	ldr	r3, [r3, #24]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d019      	beq.n	8001d34 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001d00:	4b27      	ldr	r3, [pc, #156]	; (8001da0 <HAL_RCC_OscConfig+0x32c>)
 8001d02:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001d04:	4b26      	ldr	r3, [pc, #152]	; (8001da0 <HAL_RCC_OscConfig+0x32c>)
 8001d06:	2101      	movs	r1, #1
 8001d08:	430a      	orrs	r2, r1
 8001d0a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d0c:	f7ff fa90 	bl	8001230 <HAL_GetTick>
 8001d10:	0003      	movs	r3, r0
 8001d12:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d14:	e008      	b.n	8001d28 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d16:	f7ff fa8b 	bl	8001230 <HAL_GetTick>
 8001d1a:	0002      	movs	r2, r0
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	d901      	bls.n	8001d28 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001d24:	2303      	movs	r3, #3
 8001d26:	e1ad      	b.n	8002084 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d28:	4b1d      	ldr	r3, [pc, #116]	; (8001da0 <HAL_RCC_OscConfig+0x32c>)
 8001d2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d2c:	2202      	movs	r2, #2
 8001d2e:	4013      	ands	r3, r2
 8001d30:	d0f1      	beq.n	8001d16 <HAL_RCC_OscConfig+0x2a2>
 8001d32:	e018      	b.n	8001d66 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001d34:	4b1a      	ldr	r3, [pc, #104]	; (8001da0 <HAL_RCC_OscConfig+0x32c>)
 8001d36:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001d38:	4b19      	ldr	r3, [pc, #100]	; (8001da0 <HAL_RCC_OscConfig+0x32c>)
 8001d3a:	2101      	movs	r1, #1
 8001d3c:	438a      	bics	r2, r1
 8001d3e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d40:	f7ff fa76 	bl	8001230 <HAL_GetTick>
 8001d44:	0003      	movs	r3, r0
 8001d46:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d48:	e008      	b.n	8001d5c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d4a:	f7ff fa71 	bl	8001230 <HAL_GetTick>
 8001d4e:	0002      	movs	r2, r0
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	1ad3      	subs	r3, r2, r3
 8001d54:	2b02      	cmp	r3, #2
 8001d56:	d901      	bls.n	8001d5c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001d58:	2303      	movs	r3, #3
 8001d5a:	e193      	b.n	8002084 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d5c:	4b10      	ldr	r3, [pc, #64]	; (8001da0 <HAL_RCC_OscConfig+0x32c>)
 8001d5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d60:	2202      	movs	r2, #2
 8001d62:	4013      	ands	r3, r2
 8001d64:	d1f1      	bne.n	8001d4a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	2204      	movs	r2, #4
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	d100      	bne.n	8001d72 <HAL_RCC_OscConfig+0x2fe>
 8001d70:	e0c6      	b.n	8001f00 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d72:	231f      	movs	r3, #31
 8001d74:	18fb      	adds	r3, r7, r3
 8001d76:	2200      	movs	r2, #0
 8001d78:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001d7a:	4b09      	ldr	r3, [pc, #36]	; (8001da0 <HAL_RCC_OscConfig+0x32c>)
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	2238      	movs	r2, #56	; 0x38
 8001d80:	4013      	ands	r3, r2
 8001d82:	2b20      	cmp	r3, #32
 8001d84:	d11e      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001d86:	4b06      	ldr	r3, [pc, #24]	; (8001da0 <HAL_RCC_OscConfig+0x32c>)
 8001d88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d8a:	2202      	movs	r2, #2
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	d100      	bne.n	8001d92 <HAL_RCC_OscConfig+0x31e>
 8001d90:	e0b6      	b.n	8001f00 <HAL_RCC_OscConfig+0x48c>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d000      	beq.n	8001d9c <HAL_RCC_OscConfig+0x328>
 8001d9a:	e0b1      	b.n	8001f00 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e171      	b.n	8002084 <HAL_RCC_OscConfig+0x610>
 8001da0:	40021000 	.word	0x40021000
 8001da4:	fffeffff 	.word	0xfffeffff
 8001da8:	fffbffff 	.word	0xfffbffff
 8001dac:	ffff80ff 	.word	0xffff80ff
 8001db0:	ffffc7ff 	.word	0xffffc7ff
 8001db4:	00f42400 	.word	0x00f42400
 8001db8:	20000004 	.word	0x20000004
 8001dbc:	20000008 	.word	0x20000008
 8001dc0:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001dc4:	4bb1      	ldr	r3, [pc, #708]	; (800208c <HAL_RCC_OscConfig+0x618>)
 8001dc6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001dc8:	2380      	movs	r3, #128	; 0x80
 8001dca:	055b      	lsls	r3, r3, #21
 8001dcc:	4013      	ands	r3, r2
 8001dce:	d101      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x360>
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e000      	b.n	8001dd6 <HAL_RCC_OscConfig+0x362>
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d011      	beq.n	8001dfe <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001dda:	4bac      	ldr	r3, [pc, #688]	; (800208c <HAL_RCC_OscConfig+0x618>)
 8001ddc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001dde:	4bab      	ldr	r3, [pc, #684]	; (800208c <HAL_RCC_OscConfig+0x618>)
 8001de0:	2180      	movs	r1, #128	; 0x80
 8001de2:	0549      	lsls	r1, r1, #21
 8001de4:	430a      	orrs	r2, r1
 8001de6:	63da      	str	r2, [r3, #60]	; 0x3c
 8001de8:	4ba8      	ldr	r3, [pc, #672]	; (800208c <HAL_RCC_OscConfig+0x618>)
 8001dea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001dec:	2380      	movs	r3, #128	; 0x80
 8001dee:	055b      	lsls	r3, r3, #21
 8001df0:	4013      	ands	r3, r2
 8001df2:	60fb      	str	r3, [r7, #12]
 8001df4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001df6:	231f      	movs	r3, #31
 8001df8:	18fb      	adds	r3, r7, r3
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dfe:	4ba4      	ldr	r3, [pc, #656]	; (8002090 <HAL_RCC_OscConfig+0x61c>)
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	2380      	movs	r3, #128	; 0x80
 8001e04:	005b      	lsls	r3, r3, #1
 8001e06:	4013      	ands	r3, r2
 8001e08:	d11a      	bne.n	8001e40 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e0a:	4ba1      	ldr	r3, [pc, #644]	; (8002090 <HAL_RCC_OscConfig+0x61c>)
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	4ba0      	ldr	r3, [pc, #640]	; (8002090 <HAL_RCC_OscConfig+0x61c>)
 8001e10:	2180      	movs	r1, #128	; 0x80
 8001e12:	0049      	lsls	r1, r1, #1
 8001e14:	430a      	orrs	r2, r1
 8001e16:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001e18:	f7ff fa0a 	bl	8001230 <HAL_GetTick>
 8001e1c:	0003      	movs	r3, r0
 8001e1e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e20:	e008      	b.n	8001e34 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e22:	f7ff fa05 	bl	8001230 <HAL_GetTick>
 8001e26:	0002      	movs	r2, r0
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	2b02      	cmp	r3, #2
 8001e2e:	d901      	bls.n	8001e34 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001e30:	2303      	movs	r3, #3
 8001e32:	e127      	b.n	8002084 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e34:	4b96      	ldr	r3, [pc, #600]	; (8002090 <HAL_RCC_OscConfig+0x61c>)
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	2380      	movs	r3, #128	; 0x80
 8001e3a:	005b      	lsls	r3, r3, #1
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	d0f0      	beq.n	8001e22 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d106      	bne.n	8001e56 <HAL_RCC_OscConfig+0x3e2>
 8001e48:	4b90      	ldr	r3, [pc, #576]	; (800208c <HAL_RCC_OscConfig+0x618>)
 8001e4a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001e4c:	4b8f      	ldr	r3, [pc, #572]	; (800208c <HAL_RCC_OscConfig+0x618>)
 8001e4e:	2101      	movs	r1, #1
 8001e50:	430a      	orrs	r2, r1
 8001e52:	65da      	str	r2, [r3, #92]	; 0x5c
 8001e54:	e01c      	b.n	8001e90 <HAL_RCC_OscConfig+0x41c>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	2b05      	cmp	r3, #5
 8001e5c:	d10c      	bne.n	8001e78 <HAL_RCC_OscConfig+0x404>
 8001e5e:	4b8b      	ldr	r3, [pc, #556]	; (800208c <HAL_RCC_OscConfig+0x618>)
 8001e60:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001e62:	4b8a      	ldr	r3, [pc, #552]	; (800208c <HAL_RCC_OscConfig+0x618>)
 8001e64:	2104      	movs	r1, #4
 8001e66:	430a      	orrs	r2, r1
 8001e68:	65da      	str	r2, [r3, #92]	; 0x5c
 8001e6a:	4b88      	ldr	r3, [pc, #544]	; (800208c <HAL_RCC_OscConfig+0x618>)
 8001e6c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001e6e:	4b87      	ldr	r3, [pc, #540]	; (800208c <HAL_RCC_OscConfig+0x618>)
 8001e70:	2101      	movs	r1, #1
 8001e72:	430a      	orrs	r2, r1
 8001e74:	65da      	str	r2, [r3, #92]	; 0x5c
 8001e76:	e00b      	b.n	8001e90 <HAL_RCC_OscConfig+0x41c>
 8001e78:	4b84      	ldr	r3, [pc, #528]	; (800208c <HAL_RCC_OscConfig+0x618>)
 8001e7a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001e7c:	4b83      	ldr	r3, [pc, #524]	; (800208c <HAL_RCC_OscConfig+0x618>)
 8001e7e:	2101      	movs	r1, #1
 8001e80:	438a      	bics	r2, r1
 8001e82:	65da      	str	r2, [r3, #92]	; 0x5c
 8001e84:	4b81      	ldr	r3, [pc, #516]	; (800208c <HAL_RCC_OscConfig+0x618>)
 8001e86:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001e88:	4b80      	ldr	r3, [pc, #512]	; (800208c <HAL_RCC_OscConfig+0x618>)
 8001e8a:	2104      	movs	r1, #4
 8001e8c:	438a      	bics	r2, r1
 8001e8e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d014      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e98:	f7ff f9ca 	bl	8001230 <HAL_GetTick>
 8001e9c:	0003      	movs	r3, r0
 8001e9e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ea0:	e009      	b.n	8001eb6 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ea2:	f7ff f9c5 	bl	8001230 <HAL_GetTick>
 8001ea6:	0002      	movs	r2, r0
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	1ad3      	subs	r3, r2, r3
 8001eac:	4a79      	ldr	r2, [pc, #484]	; (8002094 <HAL_RCC_OscConfig+0x620>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d901      	bls.n	8001eb6 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e0e6      	b.n	8002084 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001eb6:	4b75      	ldr	r3, [pc, #468]	; (800208c <HAL_RCC_OscConfig+0x618>)
 8001eb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eba:	2202      	movs	r2, #2
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	d0f0      	beq.n	8001ea2 <HAL_RCC_OscConfig+0x42e>
 8001ec0:	e013      	b.n	8001eea <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ec2:	f7ff f9b5 	bl	8001230 <HAL_GetTick>
 8001ec6:	0003      	movs	r3, r0
 8001ec8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001eca:	e009      	b.n	8001ee0 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ecc:	f7ff f9b0 	bl	8001230 <HAL_GetTick>
 8001ed0:	0002      	movs	r2, r0
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	4a6f      	ldr	r2, [pc, #444]	; (8002094 <HAL_RCC_OscConfig+0x620>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d901      	bls.n	8001ee0 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001edc:	2303      	movs	r3, #3
 8001ede:	e0d1      	b.n	8002084 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ee0:	4b6a      	ldr	r3, [pc, #424]	; (800208c <HAL_RCC_OscConfig+0x618>)
 8001ee2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ee4:	2202      	movs	r2, #2
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	d1f0      	bne.n	8001ecc <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001eea:	231f      	movs	r3, #31
 8001eec:	18fb      	adds	r3, r7, r3
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d105      	bne.n	8001f00 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001ef4:	4b65      	ldr	r3, [pc, #404]	; (800208c <HAL_RCC_OscConfig+0x618>)
 8001ef6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001ef8:	4b64      	ldr	r3, [pc, #400]	; (800208c <HAL_RCC_OscConfig+0x618>)
 8001efa:	4967      	ldr	r1, [pc, #412]	; (8002098 <HAL_RCC_OscConfig+0x624>)
 8001efc:	400a      	ands	r2, r1
 8001efe:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	69db      	ldr	r3, [r3, #28]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d100      	bne.n	8001f0a <HAL_RCC_OscConfig+0x496>
 8001f08:	e0bb      	b.n	8002082 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f0a:	4b60      	ldr	r3, [pc, #384]	; (800208c <HAL_RCC_OscConfig+0x618>)
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	2238      	movs	r2, #56	; 0x38
 8001f10:	4013      	ands	r3, r2
 8001f12:	2b10      	cmp	r3, #16
 8001f14:	d100      	bne.n	8001f18 <HAL_RCC_OscConfig+0x4a4>
 8001f16:	e07b      	b.n	8002010 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	69db      	ldr	r3, [r3, #28]
 8001f1c:	2b02      	cmp	r3, #2
 8001f1e:	d156      	bne.n	8001fce <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f20:	4b5a      	ldr	r3, [pc, #360]	; (800208c <HAL_RCC_OscConfig+0x618>)
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	4b59      	ldr	r3, [pc, #356]	; (800208c <HAL_RCC_OscConfig+0x618>)
 8001f26:	495d      	ldr	r1, [pc, #372]	; (800209c <HAL_RCC_OscConfig+0x628>)
 8001f28:	400a      	ands	r2, r1
 8001f2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f2c:	f7ff f980 	bl	8001230 <HAL_GetTick>
 8001f30:	0003      	movs	r3, r0
 8001f32:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f34:	e008      	b.n	8001f48 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f36:	f7ff f97b 	bl	8001230 <HAL_GetTick>
 8001f3a:	0002      	movs	r2, r0
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	1ad3      	subs	r3, r2, r3
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d901      	bls.n	8001f48 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001f44:	2303      	movs	r3, #3
 8001f46:	e09d      	b.n	8002084 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f48:	4b50      	ldr	r3, [pc, #320]	; (800208c <HAL_RCC_OscConfig+0x618>)
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	2380      	movs	r3, #128	; 0x80
 8001f4e:	049b      	lsls	r3, r3, #18
 8001f50:	4013      	ands	r3, r2
 8001f52:	d1f0      	bne.n	8001f36 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f54:	4b4d      	ldr	r3, [pc, #308]	; (800208c <HAL_RCC_OscConfig+0x618>)
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	4a51      	ldr	r2, [pc, #324]	; (80020a0 <HAL_RCC_OscConfig+0x62c>)
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	0019      	movs	r1, r3
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6a1a      	ldr	r2, [r3, #32]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f66:	431a      	orrs	r2, r3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f6c:	021b      	lsls	r3, r3, #8
 8001f6e:	431a      	orrs	r2, r3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f74:	431a      	orrs	r2, r3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7a:	431a      	orrs	r2, r3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f80:	431a      	orrs	r2, r3
 8001f82:	4b42      	ldr	r3, [pc, #264]	; (800208c <HAL_RCC_OscConfig+0x618>)
 8001f84:	430a      	orrs	r2, r1
 8001f86:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f88:	4b40      	ldr	r3, [pc, #256]	; (800208c <HAL_RCC_OscConfig+0x618>)
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	4b3f      	ldr	r3, [pc, #252]	; (800208c <HAL_RCC_OscConfig+0x618>)
 8001f8e:	2180      	movs	r1, #128	; 0x80
 8001f90:	0449      	lsls	r1, r1, #17
 8001f92:	430a      	orrs	r2, r1
 8001f94:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001f96:	4b3d      	ldr	r3, [pc, #244]	; (800208c <HAL_RCC_OscConfig+0x618>)
 8001f98:	68da      	ldr	r2, [r3, #12]
 8001f9a:	4b3c      	ldr	r3, [pc, #240]	; (800208c <HAL_RCC_OscConfig+0x618>)
 8001f9c:	2180      	movs	r1, #128	; 0x80
 8001f9e:	0549      	lsls	r1, r1, #21
 8001fa0:	430a      	orrs	r2, r1
 8001fa2:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fa4:	f7ff f944 	bl	8001230 <HAL_GetTick>
 8001fa8:	0003      	movs	r3, r0
 8001faa:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fac:	e008      	b.n	8001fc0 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fae:	f7ff f93f 	bl	8001230 <HAL_GetTick>
 8001fb2:	0002      	movs	r2, r0
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	2b02      	cmp	r3, #2
 8001fba:	d901      	bls.n	8001fc0 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	e061      	b.n	8002084 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fc0:	4b32      	ldr	r3, [pc, #200]	; (800208c <HAL_RCC_OscConfig+0x618>)
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	2380      	movs	r3, #128	; 0x80
 8001fc6:	049b      	lsls	r3, r3, #18
 8001fc8:	4013      	ands	r3, r2
 8001fca:	d0f0      	beq.n	8001fae <HAL_RCC_OscConfig+0x53a>
 8001fcc:	e059      	b.n	8002082 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fce:	4b2f      	ldr	r3, [pc, #188]	; (800208c <HAL_RCC_OscConfig+0x618>)
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	4b2e      	ldr	r3, [pc, #184]	; (800208c <HAL_RCC_OscConfig+0x618>)
 8001fd4:	4931      	ldr	r1, [pc, #196]	; (800209c <HAL_RCC_OscConfig+0x628>)
 8001fd6:	400a      	ands	r2, r1
 8001fd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fda:	f7ff f929 	bl	8001230 <HAL_GetTick>
 8001fde:	0003      	movs	r3, r0
 8001fe0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fe2:	e008      	b.n	8001ff6 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fe4:	f7ff f924 	bl	8001230 <HAL_GetTick>
 8001fe8:	0002      	movs	r2, r0
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	2b02      	cmp	r3, #2
 8001ff0:	d901      	bls.n	8001ff6 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	e046      	b.n	8002084 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ff6:	4b25      	ldr	r3, [pc, #148]	; (800208c <HAL_RCC_OscConfig+0x618>)
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	2380      	movs	r3, #128	; 0x80
 8001ffc:	049b      	lsls	r3, r3, #18
 8001ffe:	4013      	ands	r3, r2
 8002000:	d1f0      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8002002:	4b22      	ldr	r3, [pc, #136]	; (800208c <HAL_RCC_OscConfig+0x618>)
 8002004:	68da      	ldr	r2, [r3, #12]
 8002006:	4b21      	ldr	r3, [pc, #132]	; (800208c <HAL_RCC_OscConfig+0x618>)
 8002008:	4926      	ldr	r1, [pc, #152]	; (80020a4 <HAL_RCC_OscConfig+0x630>)
 800200a:	400a      	ands	r2, r1
 800200c:	60da      	str	r2, [r3, #12]
 800200e:	e038      	b.n	8002082 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	69db      	ldr	r3, [r3, #28]
 8002014:	2b01      	cmp	r3, #1
 8002016:	d101      	bne.n	800201c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	e033      	b.n	8002084 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800201c:	4b1b      	ldr	r3, [pc, #108]	; (800208c <HAL_RCC_OscConfig+0x618>)
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	2203      	movs	r2, #3
 8002026:	401a      	ands	r2, r3
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6a1b      	ldr	r3, [r3, #32]
 800202c:	429a      	cmp	r2, r3
 800202e:	d126      	bne.n	800207e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	2270      	movs	r2, #112	; 0x70
 8002034:	401a      	ands	r2, r3
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800203a:	429a      	cmp	r2, r3
 800203c:	d11f      	bne.n	800207e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800203e:	697a      	ldr	r2, [r7, #20]
 8002040:	23fe      	movs	r3, #254	; 0xfe
 8002042:	01db      	lsls	r3, r3, #7
 8002044:	401a      	ands	r2, r3
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800204a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800204c:	429a      	cmp	r2, r3
 800204e:	d116      	bne.n	800207e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002050:	697a      	ldr	r2, [r7, #20]
 8002052:	23f8      	movs	r3, #248	; 0xf8
 8002054:	039b      	lsls	r3, r3, #14
 8002056:	401a      	ands	r2, r3
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800205c:	429a      	cmp	r2, r3
 800205e:	d10e      	bne.n	800207e <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002060:	697a      	ldr	r2, [r7, #20]
 8002062:	23e0      	movs	r3, #224	; 0xe0
 8002064:	051b      	lsls	r3, r3, #20
 8002066:	401a      	ands	r2, r3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800206c:	429a      	cmp	r2, r3
 800206e:	d106      	bne.n	800207e <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	0f5b      	lsrs	r3, r3, #29
 8002074:	075a      	lsls	r2, r3, #29
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800207a:	429a      	cmp	r2, r3
 800207c:	d001      	beq.n	8002082 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e000      	b.n	8002084 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8002082:	2300      	movs	r3, #0
}
 8002084:	0018      	movs	r0, r3
 8002086:	46bd      	mov	sp, r7
 8002088:	b008      	add	sp, #32
 800208a:	bd80      	pop	{r7, pc}
 800208c:	40021000 	.word	0x40021000
 8002090:	40007000 	.word	0x40007000
 8002094:	00001388 	.word	0x00001388
 8002098:	efffffff 	.word	0xefffffff
 800209c:	feffffff 	.word	0xfeffffff
 80020a0:	11c1808c 	.word	0x11c1808c
 80020a4:	eefefffc 	.word	0xeefefffc

080020a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b084      	sub	sp, #16
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d101      	bne.n	80020bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e0e9      	b.n	8002290 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020bc:	4b76      	ldr	r3, [pc, #472]	; (8002298 <HAL_RCC_ClockConfig+0x1f0>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	2207      	movs	r2, #7
 80020c2:	4013      	ands	r3, r2
 80020c4:	683a      	ldr	r2, [r7, #0]
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d91e      	bls.n	8002108 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ca:	4b73      	ldr	r3, [pc, #460]	; (8002298 <HAL_RCC_ClockConfig+0x1f0>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	2207      	movs	r2, #7
 80020d0:	4393      	bics	r3, r2
 80020d2:	0019      	movs	r1, r3
 80020d4:	4b70      	ldr	r3, [pc, #448]	; (8002298 <HAL_RCC_ClockConfig+0x1f0>)
 80020d6:	683a      	ldr	r2, [r7, #0]
 80020d8:	430a      	orrs	r2, r1
 80020da:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80020dc:	f7ff f8a8 	bl	8001230 <HAL_GetTick>
 80020e0:	0003      	movs	r3, r0
 80020e2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80020e4:	e009      	b.n	80020fa <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020e6:	f7ff f8a3 	bl	8001230 <HAL_GetTick>
 80020ea:	0002      	movs	r2, r0
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	1ad3      	subs	r3, r2, r3
 80020f0:	4a6a      	ldr	r2, [pc, #424]	; (800229c <HAL_RCC_ClockConfig+0x1f4>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d901      	bls.n	80020fa <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80020f6:	2303      	movs	r3, #3
 80020f8:	e0ca      	b.n	8002290 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80020fa:	4b67      	ldr	r3, [pc, #412]	; (8002298 <HAL_RCC_ClockConfig+0x1f0>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	2207      	movs	r2, #7
 8002100:	4013      	ands	r3, r2
 8002102:	683a      	ldr	r2, [r7, #0]
 8002104:	429a      	cmp	r2, r3
 8002106:	d1ee      	bne.n	80020e6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	2202      	movs	r2, #2
 800210e:	4013      	ands	r3, r2
 8002110:	d015      	beq.n	800213e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	2204      	movs	r2, #4
 8002118:	4013      	ands	r3, r2
 800211a:	d006      	beq.n	800212a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800211c:	4b60      	ldr	r3, [pc, #384]	; (80022a0 <HAL_RCC_ClockConfig+0x1f8>)
 800211e:	689a      	ldr	r2, [r3, #8]
 8002120:	4b5f      	ldr	r3, [pc, #380]	; (80022a0 <HAL_RCC_ClockConfig+0x1f8>)
 8002122:	21e0      	movs	r1, #224	; 0xe0
 8002124:	01c9      	lsls	r1, r1, #7
 8002126:	430a      	orrs	r2, r1
 8002128:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800212a:	4b5d      	ldr	r3, [pc, #372]	; (80022a0 <HAL_RCC_ClockConfig+0x1f8>)
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	4a5d      	ldr	r2, [pc, #372]	; (80022a4 <HAL_RCC_ClockConfig+0x1fc>)
 8002130:	4013      	ands	r3, r2
 8002132:	0019      	movs	r1, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	689a      	ldr	r2, [r3, #8]
 8002138:	4b59      	ldr	r3, [pc, #356]	; (80022a0 <HAL_RCC_ClockConfig+0x1f8>)
 800213a:	430a      	orrs	r2, r1
 800213c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	2201      	movs	r2, #1
 8002144:	4013      	ands	r3, r2
 8002146:	d057      	beq.n	80021f8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	2b01      	cmp	r3, #1
 800214e:	d107      	bne.n	8002160 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002150:	4b53      	ldr	r3, [pc, #332]	; (80022a0 <HAL_RCC_ClockConfig+0x1f8>)
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	2380      	movs	r3, #128	; 0x80
 8002156:	029b      	lsls	r3, r3, #10
 8002158:	4013      	ands	r3, r2
 800215a:	d12b      	bne.n	80021b4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	e097      	b.n	8002290 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	2b02      	cmp	r3, #2
 8002166:	d107      	bne.n	8002178 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002168:	4b4d      	ldr	r3, [pc, #308]	; (80022a0 <HAL_RCC_ClockConfig+0x1f8>)
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	2380      	movs	r3, #128	; 0x80
 800216e:	049b      	lsls	r3, r3, #18
 8002170:	4013      	ands	r3, r2
 8002172:	d11f      	bne.n	80021b4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e08b      	b.n	8002290 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d107      	bne.n	8002190 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002180:	4b47      	ldr	r3, [pc, #284]	; (80022a0 <HAL_RCC_ClockConfig+0x1f8>)
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	2380      	movs	r3, #128	; 0x80
 8002186:	00db      	lsls	r3, r3, #3
 8002188:	4013      	ands	r3, r2
 800218a:	d113      	bne.n	80021b4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e07f      	b.n	8002290 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	2b03      	cmp	r3, #3
 8002196:	d106      	bne.n	80021a6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002198:	4b41      	ldr	r3, [pc, #260]	; (80022a0 <HAL_RCC_ClockConfig+0x1f8>)
 800219a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800219c:	2202      	movs	r2, #2
 800219e:	4013      	ands	r3, r2
 80021a0:	d108      	bne.n	80021b4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e074      	b.n	8002290 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021a6:	4b3e      	ldr	r3, [pc, #248]	; (80022a0 <HAL_RCC_ClockConfig+0x1f8>)
 80021a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021aa:	2202      	movs	r2, #2
 80021ac:	4013      	ands	r3, r2
 80021ae:	d101      	bne.n	80021b4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e06d      	b.n	8002290 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80021b4:	4b3a      	ldr	r3, [pc, #232]	; (80022a0 <HAL_RCC_ClockConfig+0x1f8>)
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	2207      	movs	r2, #7
 80021ba:	4393      	bics	r3, r2
 80021bc:	0019      	movs	r1, r3
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	685a      	ldr	r2, [r3, #4]
 80021c2:	4b37      	ldr	r3, [pc, #220]	; (80022a0 <HAL_RCC_ClockConfig+0x1f8>)
 80021c4:	430a      	orrs	r2, r1
 80021c6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021c8:	f7ff f832 	bl	8001230 <HAL_GetTick>
 80021cc:	0003      	movs	r3, r0
 80021ce:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021d0:	e009      	b.n	80021e6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021d2:	f7ff f82d 	bl	8001230 <HAL_GetTick>
 80021d6:	0002      	movs	r2, r0
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	4a2f      	ldr	r2, [pc, #188]	; (800229c <HAL_RCC_ClockConfig+0x1f4>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d901      	bls.n	80021e6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	e054      	b.n	8002290 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021e6:	4b2e      	ldr	r3, [pc, #184]	; (80022a0 <HAL_RCC_ClockConfig+0x1f8>)
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	2238      	movs	r2, #56	; 0x38
 80021ec:	401a      	ands	r2, r3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	00db      	lsls	r3, r3, #3
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d1ec      	bne.n	80021d2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021f8:	4b27      	ldr	r3, [pc, #156]	; (8002298 <HAL_RCC_ClockConfig+0x1f0>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	2207      	movs	r2, #7
 80021fe:	4013      	ands	r3, r2
 8002200:	683a      	ldr	r2, [r7, #0]
 8002202:	429a      	cmp	r2, r3
 8002204:	d21e      	bcs.n	8002244 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002206:	4b24      	ldr	r3, [pc, #144]	; (8002298 <HAL_RCC_ClockConfig+0x1f0>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	2207      	movs	r2, #7
 800220c:	4393      	bics	r3, r2
 800220e:	0019      	movs	r1, r3
 8002210:	4b21      	ldr	r3, [pc, #132]	; (8002298 <HAL_RCC_ClockConfig+0x1f0>)
 8002212:	683a      	ldr	r2, [r7, #0]
 8002214:	430a      	orrs	r2, r1
 8002216:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002218:	f7ff f80a 	bl	8001230 <HAL_GetTick>
 800221c:	0003      	movs	r3, r0
 800221e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002220:	e009      	b.n	8002236 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002222:	f7ff f805 	bl	8001230 <HAL_GetTick>
 8002226:	0002      	movs	r2, r0
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	4a1b      	ldr	r2, [pc, #108]	; (800229c <HAL_RCC_ClockConfig+0x1f4>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d901      	bls.n	8002236 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002232:	2303      	movs	r3, #3
 8002234:	e02c      	b.n	8002290 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002236:	4b18      	ldr	r3, [pc, #96]	; (8002298 <HAL_RCC_ClockConfig+0x1f0>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	2207      	movs	r2, #7
 800223c:	4013      	ands	r3, r2
 800223e:	683a      	ldr	r2, [r7, #0]
 8002240:	429a      	cmp	r2, r3
 8002242:	d1ee      	bne.n	8002222 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	2204      	movs	r2, #4
 800224a:	4013      	ands	r3, r2
 800224c:	d009      	beq.n	8002262 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800224e:	4b14      	ldr	r3, [pc, #80]	; (80022a0 <HAL_RCC_ClockConfig+0x1f8>)
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	4a15      	ldr	r2, [pc, #84]	; (80022a8 <HAL_RCC_ClockConfig+0x200>)
 8002254:	4013      	ands	r3, r2
 8002256:	0019      	movs	r1, r3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	68da      	ldr	r2, [r3, #12]
 800225c:	4b10      	ldr	r3, [pc, #64]	; (80022a0 <HAL_RCC_ClockConfig+0x1f8>)
 800225e:	430a      	orrs	r2, r1
 8002260:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002262:	f000 f829 	bl	80022b8 <HAL_RCC_GetSysClockFreq>
 8002266:	0001      	movs	r1, r0
 8002268:	4b0d      	ldr	r3, [pc, #52]	; (80022a0 <HAL_RCC_ClockConfig+0x1f8>)
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	0a1b      	lsrs	r3, r3, #8
 800226e:	220f      	movs	r2, #15
 8002270:	401a      	ands	r2, r3
 8002272:	4b0e      	ldr	r3, [pc, #56]	; (80022ac <HAL_RCC_ClockConfig+0x204>)
 8002274:	0092      	lsls	r2, r2, #2
 8002276:	58d3      	ldr	r3, [r2, r3]
 8002278:	221f      	movs	r2, #31
 800227a:	4013      	ands	r3, r2
 800227c:	000a      	movs	r2, r1
 800227e:	40da      	lsrs	r2, r3
 8002280:	4b0b      	ldr	r3, [pc, #44]	; (80022b0 <HAL_RCC_ClockConfig+0x208>)
 8002282:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002284:	4b0b      	ldr	r3, [pc, #44]	; (80022b4 <HAL_RCC_ClockConfig+0x20c>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	0018      	movs	r0, r3
 800228a:	f7fe ff75 	bl	8001178 <HAL_InitTick>
 800228e:	0003      	movs	r3, r0
}
 8002290:	0018      	movs	r0, r3
 8002292:	46bd      	mov	sp, r7
 8002294:	b004      	add	sp, #16
 8002296:	bd80      	pop	{r7, pc}
 8002298:	40022000 	.word	0x40022000
 800229c:	00001388 	.word	0x00001388
 80022a0:	40021000 	.word	0x40021000
 80022a4:	fffff0ff 	.word	0xfffff0ff
 80022a8:	ffff8fff 	.word	0xffff8fff
 80022ac:	080042a0 	.word	0x080042a0
 80022b0:	20000004 	.word	0x20000004
 80022b4:	20000008 	.word	0x20000008

080022b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b086      	sub	sp, #24
 80022bc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022be:	4b3c      	ldr	r3, [pc, #240]	; (80023b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	2238      	movs	r2, #56	; 0x38
 80022c4:	4013      	ands	r3, r2
 80022c6:	d10f      	bne.n	80022e8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80022c8:	4b39      	ldr	r3, [pc, #228]	; (80023b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	0adb      	lsrs	r3, r3, #11
 80022ce:	2207      	movs	r2, #7
 80022d0:	4013      	ands	r3, r2
 80022d2:	2201      	movs	r2, #1
 80022d4:	409a      	lsls	r2, r3
 80022d6:	0013      	movs	r3, r2
 80022d8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80022da:	6839      	ldr	r1, [r7, #0]
 80022dc:	4835      	ldr	r0, [pc, #212]	; (80023b4 <HAL_RCC_GetSysClockFreq+0xfc>)
 80022de:	f7fd ff11 	bl	8000104 <__udivsi3>
 80022e2:	0003      	movs	r3, r0
 80022e4:	613b      	str	r3, [r7, #16]
 80022e6:	e05d      	b.n	80023a4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80022e8:	4b31      	ldr	r3, [pc, #196]	; (80023b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	2238      	movs	r2, #56	; 0x38
 80022ee:	4013      	ands	r3, r2
 80022f0:	2b08      	cmp	r3, #8
 80022f2:	d102      	bne.n	80022fa <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80022f4:	4b30      	ldr	r3, [pc, #192]	; (80023b8 <HAL_RCC_GetSysClockFreq+0x100>)
 80022f6:	613b      	str	r3, [r7, #16]
 80022f8:	e054      	b.n	80023a4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022fa:	4b2d      	ldr	r3, [pc, #180]	; (80023b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	2238      	movs	r2, #56	; 0x38
 8002300:	4013      	ands	r3, r2
 8002302:	2b10      	cmp	r3, #16
 8002304:	d138      	bne.n	8002378 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002306:	4b2a      	ldr	r3, [pc, #168]	; (80023b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002308:	68db      	ldr	r3, [r3, #12]
 800230a:	2203      	movs	r2, #3
 800230c:	4013      	ands	r3, r2
 800230e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002310:	4b27      	ldr	r3, [pc, #156]	; (80023b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	091b      	lsrs	r3, r3, #4
 8002316:	2207      	movs	r2, #7
 8002318:	4013      	ands	r3, r2
 800231a:	3301      	adds	r3, #1
 800231c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2b03      	cmp	r3, #3
 8002322:	d10d      	bne.n	8002340 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002324:	68b9      	ldr	r1, [r7, #8]
 8002326:	4824      	ldr	r0, [pc, #144]	; (80023b8 <HAL_RCC_GetSysClockFreq+0x100>)
 8002328:	f7fd feec 	bl	8000104 <__udivsi3>
 800232c:	0003      	movs	r3, r0
 800232e:	0019      	movs	r1, r3
 8002330:	4b1f      	ldr	r3, [pc, #124]	; (80023b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	0a1b      	lsrs	r3, r3, #8
 8002336:	227f      	movs	r2, #127	; 0x7f
 8002338:	4013      	ands	r3, r2
 800233a:	434b      	muls	r3, r1
 800233c:	617b      	str	r3, [r7, #20]
        break;
 800233e:	e00d      	b.n	800235c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002340:	68b9      	ldr	r1, [r7, #8]
 8002342:	481c      	ldr	r0, [pc, #112]	; (80023b4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002344:	f7fd fede 	bl	8000104 <__udivsi3>
 8002348:	0003      	movs	r3, r0
 800234a:	0019      	movs	r1, r3
 800234c:	4b18      	ldr	r3, [pc, #96]	; (80023b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	0a1b      	lsrs	r3, r3, #8
 8002352:	227f      	movs	r2, #127	; 0x7f
 8002354:	4013      	ands	r3, r2
 8002356:	434b      	muls	r3, r1
 8002358:	617b      	str	r3, [r7, #20]
        break;
 800235a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800235c:	4b14      	ldr	r3, [pc, #80]	; (80023b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	0f5b      	lsrs	r3, r3, #29
 8002362:	2207      	movs	r2, #7
 8002364:	4013      	ands	r3, r2
 8002366:	3301      	adds	r3, #1
 8002368:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800236a:	6879      	ldr	r1, [r7, #4]
 800236c:	6978      	ldr	r0, [r7, #20]
 800236e:	f7fd fec9 	bl	8000104 <__udivsi3>
 8002372:	0003      	movs	r3, r0
 8002374:	613b      	str	r3, [r7, #16]
 8002376:	e015      	b.n	80023a4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002378:	4b0d      	ldr	r3, [pc, #52]	; (80023b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	2238      	movs	r2, #56	; 0x38
 800237e:	4013      	ands	r3, r2
 8002380:	2b20      	cmp	r3, #32
 8002382:	d103      	bne.n	800238c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002384:	2380      	movs	r3, #128	; 0x80
 8002386:	021b      	lsls	r3, r3, #8
 8002388:	613b      	str	r3, [r7, #16]
 800238a:	e00b      	b.n	80023a4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800238c:	4b08      	ldr	r3, [pc, #32]	; (80023b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	2238      	movs	r2, #56	; 0x38
 8002392:	4013      	ands	r3, r2
 8002394:	2b18      	cmp	r3, #24
 8002396:	d103      	bne.n	80023a0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002398:	23fa      	movs	r3, #250	; 0xfa
 800239a:	01db      	lsls	r3, r3, #7
 800239c:	613b      	str	r3, [r7, #16]
 800239e:	e001      	b.n	80023a4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80023a0:	2300      	movs	r3, #0
 80023a2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80023a4:	693b      	ldr	r3, [r7, #16]
}
 80023a6:	0018      	movs	r0, r3
 80023a8:	46bd      	mov	sp, r7
 80023aa:	b006      	add	sp, #24
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	46c0      	nop			; (mov r8, r8)
 80023b0:	40021000 	.word	0x40021000
 80023b4:	00f42400 	.word	0x00f42400
 80023b8:	007a1200 	.word	0x007a1200

080023bc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023c0:	4b02      	ldr	r3, [pc, #8]	; (80023cc <HAL_RCC_GetHCLKFreq+0x10>)
 80023c2:	681b      	ldr	r3, [r3, #0]
}
 80023c4:	0018      	movs	r0, r3
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	46c0      	nop			; (mov r8, r8)
 80023cc:	20000004 	.word	0x20000004

080023d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023d0:	b5b0      	push	{r4, r5, r7, lr}
 80023d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80023d4:	f7ff fff2 	bl	80023bc <HAL_RCC_GetHCLKFreq>
 80023d8:	0004      	movs	r4, r0
 80023da:	f7ff fb3f 	bl	8001a5c <LL_RCC_GetAPB1Prescaler>
 80023de:	0003      	movs	r3, r0
 80023e0:	0b1a      	lsrs	r2, r3, #12
 80023e2:	4b05      	ldr	r3, [pc, #20]	; (80023f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80023e4:	0092      	lsls	r2, r2, #2
 80023e6:	58d3      	ldr	r3, [r2, r3]
 80023e8:	221f      	movs	r2, #31
 80023ea:	4013      	ands	r3, r2
 80023ec:	40dc      	lsrs	r4, r3
 80023ee:	0023      	movs	r3, r4
}
 80023f0:	0018      	movs	r0, r3
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bdb0      	pop	{r4, r5, r7, pc}
 80023f6:	46c0      	nop			; (mov r8, r8)
 80023f8:	080042e0 	.word	0x080042e0

080023fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b086      	sub	sp, #24
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002404:	2313      	movs	r3, #19
 8002406:	18fb      	adds	r3, r7, r3
 8002408:	2200      	movs	r2, #0
 800240a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800240c:	2312      	movs	r3, #18
 800240e:	18fb      	adds	r3, r7, r3
 8002410:	2200      	movs	r2, #0
 8002412:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	2380      	movs	r3, #128	; 0x80
 800241a:	029b      	lsls	r3, r3, #10
 800241c:	4013      	ands	r3, r2
 800241e:	d100      	bne.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002420:	e0a3      	b.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002422:	2011      	movs	r0, #17
 8002424:	183b      	adds	r3, r7, r0
 8002426:	2200      	movs	r2, #0
 8002428:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800242a:	4bc3      	ldr	r3, [pc, #780]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800242c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800242e:	2380      	movs	r3, #128	; 0x80
 8002430:	055b      	lsls	r3, r3, #21
 8002432:	4013      	ands	r3, r2
 8002434:	d110      	bne.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002436:	4bc0      	ldr	r3, [pc, #768]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002438:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800243a:	4bbf      	ldr	r3, [pc, #764]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800243c:	2180      	movs	r1, #128	; 0x80
 800243e:	0549      	lsls	r1, r1, #21
 8002440:	430a      	orrs	r2, r1
 8002442:	63da      	str	r2, [r3, #60]	; 0x3c
 8002444:	4bbc      	ldr	r3, [pc, #752]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002446:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002448:	2380      	movs	r3, #128	; 0x80
 800244a:	055b      	lsls	r3, r3, #21
 800244c:	4013      	ands	r3, r2
 800244e:	60bb      	str	r3, [r7, #8]
 8002450:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002452:	183b      	adds	r3, r7, r0
 8002454:	2201      	movs	r2, #1
 8002456:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002458:	4bb8      	ldr	r3, [pc, #736]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	4bb7      	ldr	r3, [pc, #732]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800245e:	2180      	movs	r1, #128	; 0x80
 8002460:	0049      	lsls	r1, r1, #1
 8002462:	430a      	orrs	r2, r1
 8002464:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002466:	f7fe fee3 	bl	8001230 <HAL_GetTick>
 800246a:	0003      	movs	r3, r0
 800246c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800246e:	e00b      	b.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002470:	f7fe fede 	bl	8001230 <HAL_GetTick>
 8002474:	0002      	movs	r2, r0
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	2b02      	cmp	r3, #2
 800247c:	d904      	bls.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800247e:	2313      	movs	r3, #19
 8002480:	18fb      	adds	r3, r7, r3
 8002482:	2203      	movs	r2, #3
 8002484:	701a      	strb	r2, [r3, #0]
        break;
 8002486:	e005      	b.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002488:	4bac      	ldr	r3, [pc, #688]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	2380      	movs	r3, #128	; 0x80
 800248e:	005b      	lsls	r3, r3, #1
 8002490:	4013      	ands	r3, r2
 8002492:	d0ed      	beq.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002494:	2313      	movs	r3, #19
 8002496:	18fb      	adds	r3, r7, r3
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d154      	bne.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800249e:	4ba6      	ldr	r3, [pc, #664]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024a0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80024a2:	23c0      	movs	r3, #192	; 0xc0
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	4013      	ands	r3, r2
 80024a8:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d019      	beq.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b4:	697a      	ldr	r2, [r7, #20]
 80024b6:	429a      	cmp	r2, r3
 80024b8:	d014      	beq.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80024ba:	4b9f      	ldr	r3, [pc, #636]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024be:	4aa0      	ldr	r2, [pc, #640]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80024c0:	4013      	ands	r3, r2
 80024c2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80024c4:	4b9c      	ldr	r3, [pc, #624]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024c6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80024c8:	4b9b      	ldr	r3, [pc, #620]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024ca:	2180      	movs	r1, #128	; 0x80
 80024cc:	0249      	lsls	r1, r1, #9
 80024ce:	430a      	orrs	r2, r1
 80024d0:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80024d2:	4b99      	ldr	r3, [pc, #612]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024d4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80024d6:	4b98      	ldr	r3, [pc, #608]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024d8:	499a      	ldr	r1, [pc, #616]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 80024da:	400a      	ands	r2, r1
 80024dc:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80024de:	4b96      	ldr	r3, [pc, #600]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024e0:	697a      	ldr	r2, [r7, #20]
 80024e2:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	2201      	movs	r2, #1
 80024e8:	4013      	ands	r3, r2
 80024ea:	d016      	beq.n	800251a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ec:	f7fe fea0 	bl	8001230 <HAL_GetTick>
 80024f0:	0003      	movs	r3, r0
 80024f2:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024f4:	e00c      	b.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024f6:	f7fe fe9b 	bl	8001230 <HAL_GetTick>
 80024fa:	0002      	movs	r2, r0
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	1ad3      	subs	r3, r2, r3
 8002500:	4a91      	ldr	r2, [pc, #580]	; (8002748 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d904      	bls.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002506:	2313      	movs	r3, #19
 8002508:	18fb      	adds	r3, r7, r3
 800250a:	2203      	movs	r2, #3
 800250c:	701a      	strb	r2, [r3, #0]
            break;
 800250e:	e004      	b.n	800251a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002510:	4b89      	ldr	r3, [pc, #548]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002512:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002514:	2202      	movs	r2, #2
 8002516:	4013      	ands	r3, r2
 8002518:	d0ed      	beq.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800251a:	2313      	movs	r3, #19
 800251c:	18fb      	adds	r3, r7, r3
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d10a      	bne.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002524:	4b84      	ldr	r3, [pc, #528]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002526:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002528:	4a85      	ldr	r2, [pc, #532]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800252a:	4013      	ands	r3, r2
 800252c:	0019      	movs	r1, r3
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002532:	4b81      	ldr	r3, [pc, #516]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002534:	430a      	orrs	r2, r1
 8002536:	65da      	str	r2, [r3, #92]	; 0x5c
 8002538:	e00c      	b.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800253a:	2312      	movs	r3, #18
 800253c:	18fb      	adds	r3, r7, r3
 800253e:	2213      	movs	r2, #19
 8002540:	18ba      	adds	r2, r7, r2
 8002542:	7812      	ldrb	r2, [r2, #0]
 8002544:	701a      	strb	r2, [r3, #0]
 8002546:	e005      	b.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002548:	2312      	movs	r3, #18
 800254a:	18fb      	adds	r3, r7, r3
 800254c:	2213      	movs	r2, #19
 800254e:	18ba      	adds	r2, r7, r2
 8002550:	7812      	ldrb	r2, [r2, #0]
 8002552:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002554:	2311      	movs	r3, #17
 8002556:	18fb      	adds	r3, r7, r3
 8002558:	781b      	ldrb	r3, [r3, #0]
 800255a:	2b01      	cmp	r3, #1
 800255c:	d105      	bne.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800255e:	4b76      	ldr	r3, [pc, #472]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002560:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002562:	4b75      	ldr	r3, [pc, #468]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002564:	4979      	ldr	r1, [pc, #484]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8002566:	400a      	ands	r2, r1
 8002568:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	2201      	movs	r2, #1
 8002570:	4013      	ands	r3, r2
 8002572:	d009      	beq.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002574:	4b70      	ldr	r3, [pc, #448]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002576:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002578:	2203      	movs	r2, #3
 800257a:	4393      	bics	r3, r2
 800257c:	0019      	movs	r1, r3
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	685a      	ldr	r2, [r3, #4]
 8002582:	4b6d      	ldr	r3, [pc, #436]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002584:	430a      	orrs	r2, r1
 8002586:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	2202      	movs	r2, #2
 800258e:	4013      	ands	r3, r2
 8002590:	d009      	beq.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002592:	4b69      	ldr	r3, [pc, #420]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002596:	220c      	movs	r2, #12
 8002598:	4393      	bics	r3, r2
 800259a:	0019      	movs	r1, r3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	689a      	ldr	r2, [r3, #8]
 80025a0:	4b65      	ldr	r3, [pc, #404]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80025a2:	430a      	orrs	r2, r1
 80025a4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	2210      	movs	r2, #16
 80025ac:	4013      	ands	r3, r2
 80025ae:	d009      	beq.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80025b0:	4b61      	ldr	r3, [pc, #388]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80025b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025b4:	4a66      	ldr	r2, [pc, #408]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 80025b6:	4013      	ands	r3, r2
 80025b8:	0019      	movs	r1, r3
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	68da      	ldr	r2, [r3, #12]
 80025be:	4b5e      	ldr	r3, [pc, #376]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80025c0:	430a      	orrs	r2, r1
 80025c2:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	2380      	movs	r3, #128	; 0x80
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	4013      	ands	r3, r2
 80025ce:	d009      	beq.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80025d0:	4b59      	ldr	r3, [pc, #356]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80025d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025d4:	4a5f      	ldr	r2, [pc, #380]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80025d6:	4013      	ands	r3, r2
 80025d8:	0019      	movs	r1, r3
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	699a      	ldr	r2, [r3, #24]
 80025de:	4b56      	ldr	r3, [pc, #344]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80025e0:	430a      	orrs	r2, r1
 80025e2:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	2380      	movs	r3, #128	; 0x80
 80025ea:	00db      	lsls	r3, r3, #3
 80025ec:	4013      	ands	r3, r2
 80025ee:	d009      	beq.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80025f0:	4b51      	ldr	r3, [pc, #324]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80025f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025f4:	4a58      	ldr	r2, [pc, #352]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80025f6:	4013      	ands	r3, r2
 80025f8:	0019      	movs	r1, r3
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	69da      	ldr	r2, [r3, #28]
 80025fe:	4b4e      	ldr	r3, [pc, #312]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002600:	430a      	orrs	r2, r1
 8002602:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	2220      	movs	r2, #32
 800260a:	4013      	ands	r3, r2
 800260c:	d009      	beq.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800260e:	4b4a      	ldr	r3, [pc, #296]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002610:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002612:	4a52      	ldr	r2, [pc, #328]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8002614:	4013      	ands	r3, r2
 8002616:	0019      	movs	r1, r3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	691a      	ldr	r2, [r3, #16]
 800261c:	4b46      	ldr	r3, [pc, #280]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800261e:	430a      	orrs	r2, r1
 8002620:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	2380      	movs	r3, #128	; 0x80
 8002628:	01db      	lsls	r3, r3, #7
 800262a:	4013      	ands	r3, r2
 800262c:	d015      	beq.n	800265a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800262e:	4b42      	ldr	r3, [pc, #264]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002630:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	0899      	lsrs	r1, r3, #2
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6a1a      	ldr	r2, [r3, #32]
 800263a:	4b3f      	ldr	r3, [pc, #252]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800263c:	430a      	orrs	r2, r1
 800263e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6a1a      	ldr	r2, [r3, #32]
 8002644:	2380      	movs	r3, #128	; 0x80
 8002646:	05db      	lsls	r3, r3, #23
 8002648:	429a      	cmp	r2, r3
 800264a:	d106      	bne.n	800265a <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800264c:	4b3a      	ldr	r3, [pc, #232]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800264e:	68da      	ldr	r2, [r3, #12]
 8002650:	4b39      	ldr	r3, [pc, #228]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002652:	2180      	movs	r1, #128	; 0x80
 8002654:	0249      	lsls	r1, r1, #9
 8002656:	430a      	orrs	r2, r1
 8002658:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	2380      	movs	r3, #128	; 0x80
 8002660:	031b      	lsls	r3, r3, #12
 8002662:	4013      	ands	r3, r2
 8002664:	d009      	beq.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002666:	4b34      	ldr	r3, [pc, #208]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002668:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800266a:	2240      	movs	r2, #64	; 0x40
 800266c:	4393      	bics	r3, r2
 800266e:	0019      	movs	r1, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002674:	4b30      	ldr	r3, [pc, #192]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002676:	430a      	orrs	r2, r1
 8002678:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	2380      	movs	r3, #128	; 0x80
 8002680:	039b      	lsls	r3, r3, #14
 8002682:	4013      	ands	r3, r2
 8002684:	d016      	beq.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002686:	4b2c      	ldr	r3, [pc, #176]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002688:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800268a:	4a35      	ldr	r2, [pc, #212]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800268c:	4013      	ands	r3, r2
 800268e:	0019      	movs	r1, r3
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002694:	4b28      	ldr	r3, [pc, #160]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002696:	430a      	orrs	r2, r1
 8002698:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800269e:	2380      	movs	r3, #128	; 0x80
 80026a0:	03db      	lsls	r3, r3, #15
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d106      	bne.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80026a6:	4b24      	ldr	r3, [pc, #144]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80026a8:	68da      	ldr	r2, [r3, #12]
 80026aa:	4b23      	ldr	r3, [pc, #140]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80026ac:	2180      	movs	r1, #128	; 0x80
 80026ae:	0449      	lsls	r1, r1, #17
 80026b0:	430a      	orrs	r2, r1
 80026b2:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	2380      	movs	r3, #128	; 0x80
 80026ba:	03db      	lsls	r3, r3, #15
 80026bc:	4013      	ands	r3, r2
 80026be:	d016      	beq.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80026c0:	4b1d      	ldr	r3, [pc, #116]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80026c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026c4:	4a27      	ldr	r2, [pc, #156]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 80026c6:	4013      	ands	r3, r2
 80026c8:	0019      	movs	r1, r3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026ce:	4b1a      	ldr	r3, [pc, #104]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80026d0:	430a      	orrs	r2, r1
 80026d2:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026d8:	2380      	movs	r3, #128	; 0x80
 80026da:	045b      	lsls	r3, r3, #17
 80026dc:	429a      	cmp	r2, r3
 80026de:	d106      	bne.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80026e0:	4b15      	ldr	r3, [pc, #84]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80026e2:	68da      	ldr	r2, [r3, #12]
 80026e4:	4b14      	ldr	r3, [pc, #80]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80026e6:	2180      	movs	r1, #128	; 0x80
 80026e8:	0449      	lsls	r1, r1, #17
 80026ea:	430a      	orrs	r2, r1
 80026ec:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	2380      	movs	r3, #128	; 0x80
 80026f4:	011b      	lsls	r3, r3, #4
 80026f6:	4013      	ands	r3, r2
 80026f8:	d016      	beq.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80026fa:	4b0f      	ldr	r3, [pc, #60]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80026fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026fe:	4a1a      	ldr	r2, [pc, #104]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8002700:	4013      	ands	r3, r2
 8002702:	0019      	movs	r1, r3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	695a      	ldr	r2, [r3, #20]
 8002708:	4b0b      	ldr	r3, [pc, #44]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800270a:	430a      	orrs	r2, r1
 800270c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	695a      	ldr	r2, [r3, #20]
 8002712:	2380      	movs	r3, #128	; 0x80
 8002714:	01db      	lsls	r3, r3, #7
 8002716:	429a      	cmp	r2, r3
 8002718:	d106      	bne.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800271a:	4b07      	ldr	r3, [pc, #28]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800271c:	68da      	ldr	r2, [r3, #12]
 800271e:	4b06      	ldr	r3, [pc, #24]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002720:	2180      	movs	r1, #128	; 0x80
 8002722:	0249      	lsls	r1, r1, #9
 8002724:	430a      	orrs	r2, r1
 8002726:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002728:	2312      	movs	r3, #18
 800272a:	18fb      	adds	r3, r7, r3
 800272c:	781b      	ldrb	r3, [r3, #0]
}
 800272e:	0018      	movs	r0, r3
 8002730:	46bd      	mov	sp, r7
 8002732:	b006      	add	sp, #24
 8002734:	bd80      	pop	{r7, pc}
 8002736:	46c0      	nop			; (mov r8, r8)
 8002738:	40021000 	.word	0x40021000
 800273c:	40007000 	.word	0x40007000
 8002740:	fffffcff 	.word	0xfffffcff
 8002744:	fffeffff 	.word	0xfffeffff
 8002748:	00001388 	.word	0x00001388
 800274c:	efffffff 	.word	0xefffffff
 8002750:	fffff3ff 	.word	0xfffff3ff
 8002754:	fff3ffff 	.word	0xfff3ffff
 8002758:	ffcfffff 	.word	0xffcfffff
 800275c:	ffffcfff 	.word	0xffffcfff
 8002760:	ffbfffff 	.word	0xffbfffff
 8002764:	feffffff 	.word	0xfeffffff
 8002768:	ffff3fff 	.word	0xffff3fff

0800276c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d101      	bne.n	800277e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e04a      	b.n	8002814 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	223d      	movs	r2, #61	; 0x3d
 8002782:	5c9b      	ldrb	r3, [r3, r2]
 8002784:	b2db      	uxtb	r3, r3
 8002786:	2b00      	cmp	r3, #0
 8002788:	d107      	bne.n	800279a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	223c      	movs	r2, #60	; 0x3c
 800278e:	2100      	movs	r1, #0
 8002790:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	0018      	movs	r0, r3
 8002796:	f7fe fb87 	bl	8000ea8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	223d      	movs	r2, #61	; 0x3d
 800279e:	2102      	movs	r1, #2
 80027a0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	3304      	adds	r3, #4
 80027aa:	0019      	movs	r1, r3
 80027ac:	0010      	movs	r0, r2
 80027ae:	f000 fa1f 	bl	8002bf0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2248      	movs	r2, #72	; 0x48
 80027b6:	2101      	movs	r1, #1
 80027b8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	223e      	movs	r2, #62	; 0x3e
 80027be:	2101      	movs	r1, #1
 80027c0:	5499      	strb	r1, [r3, r2]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	223f      	movs	r2, #63	; 0x3f
 80027c6:	2101      	movs	r1, #1
 80027c8:	5499      	strb	r1, [r3, r2]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2240      	movs	r2, #64	; 0x40
 80027ce:	2101      	movs	r1, #1
 80027d0:	5499      	strb	r1, [r3, r2]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2241      	movs	r2, #65	; 0x41
 80027d6:	2101      	movs	r1, #1
 80027d8:	5499      	strb	r1, [r3, r2]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2242      	movs	r2, #66	; 0x42
 80027de:	2101      	movs	r1, #1
 80027e0:	5499      	strb	r1, [r3, r2]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2243      	movs	r2, #67	; 0x43
 80027e6:	2101      	movs	r1, #1
 80027e8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2244      	movs	r2, #68	; 0x44
 80027ee:	2101      	movs	r1, #1
 80027f0:	5499      	strb	r1, [r3, r2]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2245      	movs	r2, #69	; 0x45
 80027f6:	2101      	movs	r1, #1
 80027f8:	5499      	strb	r1, [r3, r2]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2246      	movs	r2, #70	; 0x46
 80027fe:	2101      	movs	r1, #1
 8002800:	5499      	strb	r1, [r3, r2]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2247      	movs	r2, #71	; 0x47
 8002806:	2101      	movs	r1, #1
 8002808:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	223d      	movs	r2, #61	; 0x3d
 800280e:	2101      	movs	r1, #1
 8002810:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002812:	2300      	movs	r3, #0
}
 8002814:	0018      	movs	r0, r3
 8002816:	46bd      	mov	sp, r7
 8002818:	b002      	add	sp, #8
 800281a:	bd80      	pop	{r7, pc}

0800281c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b084      	sub	sp, #16
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	223d      	movs	r2, #61	; 0x3d
 8002828:	5c9b      	ldrb	r3, [r3, r2]
 800282a:	b2db      	uxtb	r3, r3
 800282c:	2b01      	cmp	r3, #1
 800282e:	d001      	beq.n	8002834 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	e03a      	b.n	80028aa <HAL_TIM_Base_Start+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	223d      	movs	r2, #61	; 0x3d
 8002838:	2102      	movs	r1, #2
 800283a:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a1c      	ldr	r2, [pc, #112]	; (80028b4 <HAL_TIM_Base_Start+0x98>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d00f      	beq.n	8002866 <HAL_TIM_Base_Start+0x4a>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	2380      	movs	r3, #128	; 0x80
 800284c:	05db      	lsls	r3, r3, #23
 800284e:	429a      	cmp	r2, r3
 8002850:	d009      	beq.n	8002866 <HAL_TIM_Base_Start+0x4a>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a18      	ldr	r2, [pc, #96]	; (80028b8 <HAL_TIM_Base_Start+0x9c>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d004      	beq.n	8002866 <HAL_TIM_Base_Start+0x4a>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a16      	ldr	r2, [pc, #88]	; (80028bc <HAL_TIM_Base_Start+0xa0>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d116      	bne.n	8002894 <HAL_TIM_Base_Start+0x78>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	4a14      	ldr	r2, [pc, #80]	; (80028c0 <HAL_TIM_Base_Start+0xa4>)
 800286e:	4013      	ands	r3, r2
 8002870:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2b06      	cmp	r3, #6
 8002876:	d016      	beq.n	80028a6 <HAL_TIM_Base_Start+0x8a>
 8002878:	68fa      	ldr	r2, [r7, #12]
 800287a:	2380      	movs	r3, #128	; 0x80
 800287c:	025b      	lsls	r3, r3, #9
 800287e:	429a      	cmp	r2, r3
 8002880:	d011      	beq.n	80028a6 <HAL_TIM_Base_Start+0x8a>
    {
      __HAL_TIM_ENABLE(htim);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	2101      	movs	r1, #1
 800288e:	430a      	orrs	r2, r1
 8002890:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002892:	e008      	b.n	80028a6 <HAL_TIM_Base_Start+0x8a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	2101      	movs	r1, #1
 80028a0:	430a      	orrs	r2, r1
 80028a2:	601a      	str	r2, [r3, #0]
 80028a4:	e000      	b.n	80028a8 <HAL_TIM_Base_Start+0x8c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028a6:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80028a8:	2300      	movs	r3, #0
}
 80028aa:	0018      	movs	r0, r3
 80028ac:	46bd      	mov	sp, r7
 80028ae:	b004      	add	sp, #16
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	46c0      	nop			; (mov r8, r8)
 80028b4:	40012c00 	.word	0x40012c00
 80028b8:	40000400 	.word	0x40000400
 80028bc:	40014000 	.word	0x40014000
 80028c0:	00010007 	.word	0x00010007

080028c4 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d101      	bne.n	80028d6 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e04a      	b.n	800296c <HAL_TIM_OC_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	223d      	movs	r2, #61	; 0x3d
 80028da:	5c9b      	ldrb	r3, [r3, r2]
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d107      	bne.n	80028f2 <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	223c      	movs	r2, #60	; 0x3c
 80028e6:	2100      	movs	r1, #0
 80028e8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	0018      	movs	r0, r3
 80028ee:	f000 f841 	bl	8002974 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	223d      	movs	r2, #61	; 0x3d
 80028f6:	2102      	movs	r1, #2
 80028f8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	3304      	adds	r3, #4
 8002902:	0019      	movs	r1, r3
 8002904:	0010      	movs	r0, r2
 8002906:	f000 f973 	bl	8002bf0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2248      	movs	r2, #72	; 0x48
 800290e:	2101      	movs	r1, #1
 8002910:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	223e      	movs	r2, #62	; 0x3e
 8002916:	2101      	movs	r1, #1
 8002918:	5499      	strb	r1, [r3, r2]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	223f      	movs	r2, #63	; 0x3f
 800291e:	2101      	movs	r1, #1
 8002920:	5499      	strb	r1, [r3, r2]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2240      	movs	r2, #64	; 0x40
 8002926:	2101      	movs	r1, #1
 8002928:	5499      	strb	r1, [r3, r2]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2241      	movs	r2, #65	; 0x41
 800292e:	2101      	movs	r1, #1
 8002930:	5499      	strb	r1, [r3, r2]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2242      	movs	r2, #66	; 0x42
 8002936:	2101      	movs	r1, #1
 8002938:	5499      	strb	r1, [r3, r2]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2243      	movs	r2, #67	; 0x43
 800293e:	2101      	movs	r1, #1
 8002940:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2244      	movs	r2, #68	; 0x44
 8002946:	2101      	movs	r1, #1
 8002948:	5499      	strb	r1, [r3, r2]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2245      	movs	r2, #69	; 0x45
 800294e:	2101      	movs	r1, #1
 8002950:	5499      	strb	r1, [r3, r2]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2246      	movs	r2, #70	; 0x46
 8002956:	2101      	movs	r1, #1
 8002958:	5499      	strb	r1, [r3, r2]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2247      	movs	r2, #71	; 0x47
 800295e:	2101      	movs	r1, #1
 8002960:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	223d      	movs	r2, #61	; 0x3d
 8002966:	2101      	movs	r1, #1
 8002968:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800296a:	2300      	movs	r3, #0
}
 800296c:	0018      	movs	r0, r3
 800296e:	46bd      	mov	sp, r7
 8002970:	b002      	add	sp, #8
 8002972:	bd80      	pop	{r7, pc}

08002974 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b082      	sub	sp, #8
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800297c:	46c0      	nop			; (mov r8, r8)
 800297e:	46bd      	mov	sp, r7
 8002980:	b002      	add	sp, #8
 8002982:	bd80      	pop	{r7, pc}

08002984 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b086      	sub	sp, #24
 8002988:	af00      	add	r7, sp, #0
 800298a:	60f8      	str	r0, [r7, #12]
 800298c:	60b9      	str	r1, [r7, #8]
 800298e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002990:	2317      	movs	r3, #23
 8002992:	18fb      	adds	r3, r7, r3
 8002994:	2200      	movs	r2, #0
 8002996:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	223c      	movs	r2, #60	; 0x3c
 800299c:	5c9b      	ldrb	r3, [r3, r2]
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d101      	bne.n	80029a6 <HAL_TIM_OC_ConfigChannel+0x22>
 80029a2:	2302      	movs	r3, #2
 80029a4:	e048      	b.n	8002a38 <HAL_TIM_OC_ConfigChannel+0xb4>
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	223c      	movs	r2, #60	; 0x3c
 80029aa:	2101      	movs	r1, #1
 80029ac:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2b14      	cmp	r3, #20
 80029b2:	d835      	bhi.n	8002a20 <HAL_TIM_OC_ConfigChannel+0x9c>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	009a      	lsls	r2, r3, #2
 80029b8:	4b21      	ldr	r3, [pc, #132]	; (8002a40 <HAL_TIM_OC_ConfigChannel+0xbc>)
 80029ba:	18d3      	adds	r3, r2, r3
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	68ba      	ldr	r2, [r7, #8]
 80029c6:	0011      	movs	r1, r2
 80029c8:	0018      	movs	r0, r3
 80029ca:	f000 f991 	bl	8002cf0 <TIM_OC1_SetConfig>
      break;
 80029ce:	e02c      	b.n	8002a2a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	68ba      	ldr	r2, [r7, #8]
 80029d6:	0011      	movs	r1, r2
 80029d8:	0018      	movs	r0, r3
 80029da:	f000 fa13 	bl	8002e04 <TIM_OC2_SetConfig>
      break;
 80029de:	e024      	b.n	8002a2a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	68ba      	ldr	r2, [r7, #8]
 80029e6:	0011      	movs	r1, r2
 80029e8:	0018      	movs	r0, r3
 80029ea:	f000 fa8f 	bl	8002f0c <TIM_OC3_SetConfig>
      break;
 80029ee:	e01c      	b.n	8002a2a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	68ba      	ldr	r2, [r7, #8]
 80029f6:	0011      	movs	r1, r2
 80029f8:	0018      	movs	r0, r3
 80029fa:	f000 fb0f 	bl	800301c <TIM_OC4_SetConfig>
      break;
 80029fe:	e014      	b.n	8002a2a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	68ba      	ldr	r2, [r7, #8]
 8002a06:	0011      	movs	r1, r2
 8002a08:	0018      	movs	r0, r3
 8002a0a:	f000 fb71 	bl	80030f0 <TIM_OC5_SetConfig>
      break;
 8002a0e:	e00c      	b.n	8002a2a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	68ba      	ldr	r2, [r7, #8]
 8002a16:	0011      	movs	r1, r2
 8002a18:	0018      	movs	r0, r3
 8002a1a:	f000 fbc9 	bl	80031b0 <TIM_OC6_SetConfig>
      break;
 8002a1e:	e004      	b.n	8002a2a <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8002a20:	2317      	movs	r3, #23
 8002a22:	18fb      	adds	r3, r7, r3
 8002a24:	2201      	movs	r2, #1
 8002a26:	701a      	strb	r2, [r3, #0]
      break;
 8002a28:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	223c      	movs	r2, #60	; 0x3c
 8002a2e:	2100      	movs	r1, #0
 8002a30:	5499      	strb	r1, [r3, r2]

  return status;
 8002a32:	2317      	movs	r3, #23
 8002a34:	18fb      	adds	r3, r7, r3
 8002a36:	781b      	ldrb	r3, [r3, #0]
}
 8002a38:	0018      	movs	r0, r3
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	b006      	add	sp, #24
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	08004300 	.word	0x08004300

08002a44 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a4e:	230f      	movs	r3, #15
 8002a50:	18fb      	adds	r3, r7, r3
 8002a52:	2200      	movs	r2, #0
 8002a54:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	223c      	movs	r2, #60	; 0x3c
 8002a5a:	5c9b      	ldrb	r3, [r3, r2]
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d101      	bne.n	8002a64 <HAL_TIM_ConfigClockSource+0x20>
 8002a60:	2302      	movs	r3, #2
 8002a62:	e0bc      	b.n	8002bde <HAL_TIM_ConfigClockSource+0x19a>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	223c      	movs	r2, #60	; 0x3c
 8002a68:	2101      	movs	r1, #1
 8002a6a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	223d      	movs	r2, #61	; 0x3d
 8002a70:	2102      	movs	r1, #2
 8002a72:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	4a5a      	ldr	r2, [pc, #360]	; (8002be8 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002a80:	4013      	ands	r3, r2
 8002a82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	4a59      	ldr	r2, [pc, #356]	; (8002bec <HAL_TIM_ConfigClockSource+0x1a8>)
 8002a88:	4013      	ands	r3, r2
 8002a8a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	68ba      	ldr	r2, [r7, #8]
 8002a92:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	2280      	movs	r2, #128	; 0x80
 8002a9a:	0192      	lsls	r2, r2, #6
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d040      	beq.n	8002b22 <HAL_TIM_ConfigClockSource+0xde>
 8002aa0:	2280      	movs	r2, #128	; 0x80
 8002aa2:	0192      	lsls	r2, r2, #6
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d900      	bls.n	8002aaa <HAL_TIM_ConfigClockSource+0x66>
 8002aa8:	e088      	b.n	8002bbc <HAL_TIM_ConfigClockSource+0x178>
 8002aaa:	2280      	movs	r2, #128	; 0x80
 8002aac:	0152      	lsls	r2, r2, #5
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d100      	bne.n	8002ab4 <HAL_TIM_ConfigClockSource+0x70>
 8002ab2:	e088      	b.n	8002bc6 <HAL_TIM_ConfigClockSource+0x182>
 8002ab4:	2280      	movs	r2, #128	; 0x80
 8002ab6:	0152      	lsls	r2, r2, #5
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d900      	bls.n	8002abe <HAL_TIM_ConfigClockSource+0x7a>
 8002abc:	e07e      	b.n	8002bbc <HAL_TIM_ConfigClockSource+0x178>
 8002abe:	2b70      	cmp	r3, #112	; 0x70
 8002ac0:	d018      	beq.n	8002af4 <HAL_TIM_ConfigClockSource+0xb0>
 8002ac2:	d900      	bls.n	8002ac6 <HAL_TIM_ConfigClockSource+0x82>
 8002ac4:	e07a      	b.n	8002bbc <HAL_TIM_ConfigClockSource+0x178>
 8002ac6:	2b60      	cmp	r3, #96	; 0x60
 8002ac8:	d04f      	beq.n	8002b6a <HAL_TIM_ConfigClockSource+0x126>
 8002aca:	d900      	bls.n	8002ace <HAL_TIM_ConfigClockSource+0x8a>
 8002acc:	e076      	b.n	8002bbc <HAL_TIM_ConfigClockSource+0x178>
 8002ace:	2b50      	cmp	r3, #80	; 0x50
 8002ad0:	d03b      	beq.n	8002b4a <HAL_TIM_ConfigClockSource+0x106>
 8002ad2:	d900      	bls.n	8002ad6 <HAL_TIM_ConfigClockSource+0x92>
 8002ad4:	e072      	b.n	8002bbc <HAL_TIM_ConfigClockSource+0x178>
 8002ad6:	2b40      	cmp	r3, #64	; 0x40
 8002ad8:	d057      	beq.n	8002b8a <HAL_TIM_ConfigClockSource+0x146>
 8002ada:	d900      	bls.n	8002ade <HAL_TIM_ConfigClockSource+0x9a>
 8002adc:	e06e      	b.n	8002bbc <HAL_TIM_ConfigClockSource+0x178>
 8002ade:	2b30      	cmp	r3, #48	; 0x30
 8002ae0:	d063      	beq.n	8002baa <HAL_TIM_ConfigClockSource+0x166>
 8002ae2:	d86b      	bhi.n	8002bbc <HAL_TIM_ConfigClockSource+0x178>
 8002ae4:	2b20      	cmp	r3, #32
 8002ae6:	d060      	beq.n	8002baa <HAL_TIM_ConfigClockSource+0x166>
 8002ae8:	d868      	bhi.n	8002bbc <HAL_TIM_ConfigClockSource+0x178>
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d05d      	beq.n	8002baa <HAL_TIM_ConfigClockSource+0x166>
 8002aee:	2b10      	cmp	r3, #16
 8002af0:	d05b      	beq.n	8002baa <HAL_TIM_ConfigClockSource+0x166>
 8002af2:	e063      	b.n	8002bbc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6818      	ldr	r0, [r3, #0]
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	6899      	ldr	r1, [r3, #8]
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	685a      	ldr	r2, [r3, #4]
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	f000 fc34 	bl	8003370 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	2277      	movs	r2, #119	; 0x77
 8002b14:	4313      	orrs	r3, r2
 8002b16:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	68ba      	ldr	r2, [r7, #8]
 8002b1e:	609a      	str	r2, [r3, #8]
      break;
 8002b20:	e052      	b.n	8002bc8 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6818      	ldr	r0, [r3, #0]
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	6899      	ldr	r1, [r3, #8]
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	685a      	ldr	r2, [r3, #4]
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	f000 fc1d 	bl	8003370 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	689a      	ldr	r2, [r3, #8]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	2180      	movs	r1, #128	; 0x80
 8002b42:	01c9      	lsls	r1, r1, #7
 8002b44:	430a      	orrs	r2, r1
 8002b46:	609a      	str	r2, [r3, #8]
      break;
 8002b48:	e03e      	b.n	8002bc8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6818      	ldr	r0, [r3, #0]
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	6859      	ldr	r1, [r3, #4]
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	68db      	ldr	r3, [r3, #12]
 8002b56:	001a      	movs	r2, r3
 8002b58:	f000 fb8e 	bl	8003278 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	2150      	movs	r1, #80	; 0x50
 8002b62:	0018      	movs	r0, r3
 8002b64:	f000 fbe8 	bl	8003338 <TIM_ITRx_SetConfig>
      break;
 8002b68:	e02e      	b.n	8002bc8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6818      	ldr	r0, [r3, #0]
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	6859      	ldr	r1, [r3, #4]
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	001a      	movs	r2, r3
 8002b78:	f000 fbac 	bl	80032d4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	2160      	movs	r1, #96	; 0x60
 8002b82:	0018      	movs	r0, r3
 8002b84:	f000 fbd8 	bl	8003338 <TIM_ITRx_SetConfig>
      break;
 8002b88:	e01e      	b.n	8002bc8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6818      	ldr	r0, [r3, #0]
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	6859      	ldr	r1, [r3, #4]
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	68db      	ldr	r3, [r3, #12]
 8002b96:	001a      	movs	r2, r3
 8002b98:	f000 fb6e 	bl	8003278 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	2140      	movs	r1, #64	; 0x40
 8002ba2:	0018      	movs	r0, r3
 8002ba4:	f000 fbc8 	bl	8003338 <TIM_ITRx_SetConfig>
      break;
 8002ba8:	e00e      	b.n	8002bc8 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	0019      	movs	r1, r3
 8002bb4:	0010      	movs	r0, r2
 8002bb6:	f000 fbbf 	bl	8003338 <TIM_ITRx_SetConfig>
      break;
 8002bba:	e005      	b.n	8002bc8 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002bbc:	230f      	movs	r3, #15
 8002bbe:	18fb      	adds	r3, r7, r3
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	701a      	strb	r2, [r3, #0]
      break;
 8002bc4:	e000      	b.n	8002bc8 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002bc6:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	223d      	movs	r2, #61	; 0x3d
 8002bcc:	2101      	movs	r1, #1
 8002bce:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	223c      	movs	r2, #60	; 0x3c
 8002bd4:	2100      	movs	r1, #0
 8002bd6:	5499      	strb	r1, [r3, r2]

  return status;
 8002bd8:	230f      	movs	r3, #15
 8002bda:	18fb      	adds	r3, r7, r3
 8002bdc:	781b      	ldrb	r3, [r3, #0]
}
 8002bde:	0018      	movs	r0, r3
 8002be0:	46bd      	mov	sp, r7
 8002be2:	b004      	add	sp, #16
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	46c0      	nop			; (mov r8, r8)
 8002be8:	ffceff88 	.word	0xffceff88
 8002bec:	ffff00ff 	.word	0xffff00ff

08002bf0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b084      	sub	sp, #16
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
 8002bf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	4a34      	ldr	r2, [pc, #208]	; (8002cd4 <TIM_Base_SetConfig+0xe4>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d008      	beq.n	8002c1a <TIM_Base_SetConfig+0x2a>
 8002c08:	687a      	ldr	r2, [r7, #4]
 8002c0a:	2380      	movs	r3, #128	; 0x80
 8002c0c:	05db      	lsls	r3, r3, #23
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d003      	beq.n	8002c1a <TIM_Base_SetConfig+0x2a>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4a30      	ldr	r2, [pc, #192]	; (8002cd8 <TIM_Base_SetConfig+0xe8>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d108      	bne.n	8002c2c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2270      	movs	r2, #112	; 0x70
 8002c1e:	4393      	bics	r3, r2
 8002c20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	68fa      	ldr	r2, [r7, #12]
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	4a29      	ldr	r2, [pc, #164]	; (8002cd4 <TIM_Base_SetConfig+0xe4>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d018      	beq.n	8002c66 <TIM_Base_SetConfig+0x76>
 8002c34:	687a      	ldr	r2, [r7, #4]
 8002c36:	2380      	movs	r3, #128	; 0x80
 8002c38:	05db      	lsls	r3, r3, #23
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d013      	beq.n	8002c66 <TIM_Base_SetConfig+0x76>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4a25      	ldr	r2, [pc, #148]	; (8002cd8 <TIM_Base_SetConfig+0xe8>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d00f      	beq.n	8002c66 <TIM_Base_SetConfig+0x76>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a24      	ldr	r2, [pc, #144]	; (8002cdc <TIM_Base_SetConfig+0xec>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d00b      	beq.n	8002c66 <TIM_Base_SetConfig+0x76>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a23      	ldr	r2, [pc, #140]	; (8002ce0 <TIM_Base_SetConfig+0xf0>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d007      	beq.n	8002c66 <TIM_Base_SetConfig+0x76>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4a22      	ldr	r2, [pc, #136]	; (8002ce4 <TIM_Base_SetConfig+0xf4>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d003      	beq.n	8002c66 <TIM_Base_SetConfig+0x76>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4a21      	ldr	r2, [pc, #132]	; (8002ce8 <TIM_Base_SetConfig+0xf8>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d108      	bne.n	8002c78 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	4a20      	ldr	r2, [pc, #128]	; (8002cec <TIM_Base_SetConfig+0xfc>)
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	68db      	ldr	r3, [r3, #12]
 8002c72:	68fa      	ldr	r2, [r7, #12]
 8002c74:	4313      	orrs	r3, r2
 8002c76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2280      	movs	r2, #128	; 0x80
 8002c7c:	4393      	bics	r3, r2
 8002c7e:	001a      	movs	r2, r3
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	695b      	ldr	r3, [r3, #20]
 8002c84:	4313      	orrs	r3, r2
 8002c86:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	68fa      	ldr	r2, [r7, #12]
 8002c8c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	689a      	ldr	r2, [r3, #8]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4a0c      	ldr	r2, [pc, #48]	; (8002cd4 <TIM_Base_SetConfig+0xe4>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d00b      	beq.n	8002cbe <TIM_Base_SetConfig+0xce>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4a0d      	ldr	r2, [pc, #52]	; (8002ce0 <TIM_Base_SetConfig+0xf0>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d007      	beq.n	8002cbe <TIM_Base_SetConfig+0xce>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4a0c      	ldr	r2, [pc, #48]	; (8002ce4 <TIM_Base_SetConfig+0xf4>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d003      	beq.n	8002cbe <TIM_Base_SetConfig+0xce>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4a0b      	ldr	r2, [pc, #44]	; (8002ce8 <TIM_Base_SetConfig+0xf8>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d103      	bne.n	8002cc6 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	691a      	ldr	r2, [r3, #16]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2201      	movs	r2, #1
 8002cca:	615a      	str	r2, [r3, #20]
}
 8002ccc:	46c0      	nop			; (mov r8, r8)
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	b004      	add	sp, #16
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	40012c00 	.word	0x40012c00
 8002cd8:	40000400 	.word	0x40000400
 8002cdc:	40002000 	.word	0x40002000
 8002ce0:	40014000 	.word	0x40014000
 8002ce4:	40014400 	.word	0x40014400
 8002ce8:	40014800 	.word	0x40014800
 8002cec:	fffffcff 	.word	0xfffffcff

08002cf0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b086      	sub	sp, #24
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
 8002cf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6a1b      	ldr	r3, [r3, #32]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	4393      	bics	r3, r2
 8002d02:	001a      	movs	r2, r3
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6a1b      	ldr	r3, [r3, #32]
 8002d0c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	699b      	ldr	r3, [r3, #24]
 8002d18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	4a32      	ldr	r2, [pc, #200]	; (8002de8 <TIM_OC1_SetConfig+0xf8>)
 8002d1e:	4013      	ands	r3, r2
 8002d20:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2203      	movs	r2, #3
 8002d26:	4393      	bics	r3, r2
 8002d28:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	68fa      	ldr	r2, [r7, #12]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	2202      	movs	r2, #2
 8002d38:	4393      	bics	r3, r2
 8002d3a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	697a      	ldr	r2, [r7, #20]
 8002d42:	4313      	orrs	r3, r2
 8002d44:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4a28      	ldr	r2, [pc, #160]	; (8002dec <TIM_OC1_SetConfig+0xfc>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d00b      	beq.n	8002d66 <TIM_OC1_SetConfig+0x76>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4a27      	ldr	r2, [pc, #156]	; (8002df0 <TIM_OC1_SetConfig+0x100>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d007      	beq.n	8002d66 <TIM_OC1_SetConfig+0x76>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4a26      	ldr	r2, [pc, #152]	; (8002df4 <TIM_OC1_SetConfig+0x104>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d003      	beq.n	8002d66 <TIM_OC1_SetConfig+0x76>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a25      	ldr	r2, [pc, #148]	; (8002df8 <TIM_OC1_SetConfig+0x108>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d10c      	bne.n	8002d80 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	2208      	movs	r2, #8
 8002d6a:	4393      	bics	r3, r2
 8002d6c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	68db      	ldr	r3, [r3, #12]
 8002d72:	697a      	ldr	r2, [r7, #20]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	2204      	movs	r2, #4
 8002d7c:	4393      	bics	r3, r2
 8002d7e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	4a1a      	ldr	r2, [pc, #104]	; (8002dec <TIM_OC1_SetConfig+0xfc>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d00b      	beq.n	8002da0 <TIM_OC1_SetConfig+0xb0>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	4a19      	ldr	r2, [pc, #100]	; (8002df0 <TIM_OC1_SetConfig+0x100>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d007      	beq.n	8002da0 <TIM_OC1_SetConfig+0xb0>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	4a18      	ldr	r2, [pc, #96]	; (8002df4 <TIM_OC1_SetConfig+0x104>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d003      	beq.n	8002da0 <TIM_OC1_SetConfig+0xb0>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	4a17      	ldr	r2, [pc, #92]	; (8002df8 <TIM_OC1_SetConfig+0x108>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d111      	bne.n	8002dc4 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	4a16      	ldr	r2, [pc, #88]	; (8002dfc <TIM_OC1_SetConfig+0x10c>)
 8002da4:	4013      	ands	r3, r2
 8002da6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	4a15      	ldr	r2, [pc, #84]	; (8002e00 <TIM_OC1_SetConfig+0x110>)
 8002dac:	4013      	ands	r3, r2
 8002dae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	695b      	ldr	r3, [r3, #20]
 8002db4:	693a      	ldr	r2, [r7, #16]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	699b      	ldr	r3, [r3, #24]
 8002dbe:	693a      	ldr	r2, [r7, #16]
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	693a      	ldr	r2, [r7, #16]
 8002dc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	68fa      	ldr	r2, [r7, #12]
 8002dce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	685a      	ldr	r2, [r3, #4]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	697a      	ldr	r2, [r7, #20]
 8002ddc:	621a      	str	r2, [r3, #32]
}
 8002dde:	46c0      	nop			; (mov r8, r8)
 8002de0:	46bd      	mov	sp, r7
 8002de2:	b006      	add	sp, #24
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	46c0      	nop			; (mov r8, r8)
 8002de8:	fffeff8f 	.word	0xfffeff8f
 8002dec:	40012c00 	.word	0x40012c00
 8002df0:	40014000 	.word	0x40014000
 8002df4:	40014400 	.word	0x40014400
 8002df8:	40014800 	.word	0x40014800
 8002dfc:	fffffeff 	.word	0xfffffeff
 8002e00:	fffffdff 	.word	0xfffffdff

08002e04 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b086      	sub	sp, #24
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
 8002e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6a1b      	ldr	r3, [r3, #32]
 8002e12:	2210      	movs	r2, #16
 8002e14:	4393      	bics	r3, r2
 8002e16:	001a      	movs	r2, r3
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6a1b      	ldr	r3, [r3, #32]
 8002e20:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	699b      	ldr	r3, [r3, #24]
 8002e2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	4a2e      	ldr	r2, [pc, #184]	; (8002eec <TIM_OC2_SetConfig+0xe8>)
 8002e32:	4013      	ands	r3, r2
 8002e34:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	4a2d      	ldr	r2, [pc, #180]	; (8002ef0 <TIM_OC2_SetConfig+0xec>)
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	021b      	lsls	r3, r3, #8
 8002e44:	68fa      	ldr	r2, [r7, #12]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	2220      	movs	r2, #32
 8002e4e:	4393      	bics	r3, r2
 8002e50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	011b      	lsls	r3, r3, #4
 8002e58:	697a      	ldr	r2, [r7, #20]
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4a24      	ldr	r2, [pc, #144]	; (8002ef4 <TIM_OC2_SetConfig+0xf0>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d10d      	bne.n	8002e82 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	2280      	movs	r2, #128	; 0x80
 8002e6a:	4393      	bics	r3, r2
 8002e6c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	68db      	ldr	r3, [r3, #12]
 8002e72:	011b      	lsls	r3, r3, #4
 8002e74:	697a      	ldr	r2, [r7, #20]
 8002e76:	4313      	orrs	r3, r2
 8002e78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	2240      	movs	r2, #64	; 0x40
 8002e7e:	4393      	bics	r3, r2
 8002e80:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	4a1b      	ldr	r2, [pc, #108]	; (8002ef4 <TIM_OC2_SetConfig+0xf0>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d00b      	beq.n	8002ea2 <TIM_OC2_SetConfig+0x9e>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	4a1a      	ldr	r2, [pc, #104]	; (8002ef8 <TIM_OC2_SetConfig+0xf4>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d007      	beq.n	8002ea2 <TIM_OC2_SetConfig+0x9e>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	4a19      	ldr	r2, [pc, #100]	; (8002efc <TIM_OC2_SetConfig+0xf8>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d003      	beq.n	8002ea2 <TIM_OC2_SetConfig+0x9e>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	4a18      	ldr	r2, [pc, #96]	; (8002f00 <TIM_OC2_SetConfig+0xfc>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d113      	bne.n	8002eca <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	4a17      	ldr	r2, [pc, #92]	; (8002f04 <TIM_OC2_SetConfig+0x100>)
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	4a16      	ldr	r2, [pc, #88]	; (8002f08 <TIM_OC2_SetConfig+0x104>)
 8002eae:	4013      	ands	r3, r2
 8002eb0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	695b      	ldr	r3, [r3, #20]
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	693a      	ldr	r2, [r7, #16]
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	699b      	ldr	r3, [r3, #24]
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	693a      	ldr	r2, [r7, #16]
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	693a      	ldr	r2, [r7, #16]
 8002ece:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	68fa      	ldr	r2, [r7, #12]
 8002ed4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	685a      	ldr	r2, [r3, #4]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	697a      	ldr	r2, [r7, #20]
 8002ee2:	621a      	str	r2, [r3, #32]
}
 8002ee4:	46c0      	nop			; (mov r8, r8)
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	b006      	add	sp, #24
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	feff8fff 	.word	0xfeff8fff
 8002ef0:	fffffcff 	.word	0xfffffcff
 8002ef4:	40012c00 	.word	0x40012c00
 8002ef8:	40014000 	.word	0x40014000
 8002efc:	40014400 	.word	0x40014400
 8002f00:	40014800 	.word	0x40014800
 8002f04:	fffffbff 	.word	0xfffffbff
 8002f08:	fffff7ff 	.word	0xfffff7ff

08002f0c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b086      	sub	sp, #24
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
 8002f14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6a1b      	ldr	r3, [r3, #32]
 8002f1a:	4a35      	ldr	r2, [pc, #212]	; (8002ff0 <TIM_OC3_SetConfig+0xe4>)
 8002f1c:	401a      	ands	r2, r3
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6a1b      	ldr	r3, [r3, #32]
 8002f26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	69db      	ldr	r3, [r3, #28]
 8002f32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	4a2f      	ldr	r2, [pc, #188]	; (8002ff4 <TIM_OC3_SetConfig+0xe8>)
 8002f38:	4013      	ands	r3, r2
 8002f3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2203      	movs	r2, #3
 8002f40:	4393      	bics	r3, r2
 8002f42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	68fa      	ldr	r2, [r7, #12]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	4a29      	ldr	r2, [pc, #164]	; (8002ff8 <TIM_OC3_SetConfig+0xec>)
 8002f52:	4013      	ands	r3, r2
 8002f54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	021b      	lsls	r3, r3, #8
 8002f5c:	697a      	ldr	r2, [r7, #20]
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	4a25      	ldr	r2, [pc, #148]	; (8002ffc <TIM_OC3_SetConfig+0xf0>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d10d      	bne.n	8002f86 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	4a24      	ldr	r2, [pc, #144]	; (8003000 <TIM_OC3_SetConfig+0xf4>)
 8002f6e:	4013      	ands	r3, r2
 8002f70:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	021b      	lsls	r3, r3, #8
 8002f78:	697a      	ldr	r2, [r7, #20]
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	4a20      	ldr	r2, [pc, #128]	; (8003004 <TIM_OC3_SetConfig+0xf8>)
 8002f82:	4013      	ands	r3, r2
 8002f84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4a1c      	ldr	r2, [pc, #112]	; (8002ffc <TIM_OC3_SetConfig+0xf0>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d00b      	beq.n	8002fa6 <TIM_OC3_SetConfig+0x9a>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4a1d      	ldr	r2, [pc, #116]	; (8003008 <TIM_OC3_SetConfig+0xfc>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d007      	beq.n	8002fa6 <TIM_OC3_SetConfig+0x9a>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4a1c      	ldr	r2, [pc, #112]	; (800300c <TIM_OC3_SetConfig+0x100>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d003      	beq.n	8002fa6 <TIM_OC3_SetConfig+0x9a>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4a1b      	ldr	r2, [pc, #108]	; (8003010 <TIM_OC3_SetConfig+0x104>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d113      	bne.n	8002fce <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	4a1a      	ldr	r2, [pc, #104]	; (8003014 <TIM_OC3_SetConfig+0x108>)
 8002faa:	4013      	ands	r3, r2
 8002fac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	4a19      	ldr	r2, [pc, #100]	; (8003018 <TIM_OC3_SetConfig+0x10c>)
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	695b      	ldr	r3, [r3, #20]
 8002fba:	011b      	lsls	r3, r3, #4
 8002fbc:	693a      	ldr	r2, [r7, #16]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	699b      	ldr	r3, [r3, #24]
 8002fc6:	011b      	lsls	r3, r3, #4
 8002fc8:	693a      	ldr	r2, [r7, #16]
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	693a      	ldr	r2, [r7, #16]
 8002fd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	68fa      	ldr	r2, [r7, #12]
 8002fd8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	685a      	ldr	r2, [r3, #4]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	697a      	ldr	r2, [r7, #20]
 8002fe6:	621a      	str	r2, [r3, #32]
}
 8002fe8:	46c0      	nop			; (mov r8, r8)
 8002fea:	46bd      	mov	sp, r7
 8002fec:	b006      	add	sp, #24
 8002fee:	bd80      	pop	{r7, pc}
 8002ff0:	fffffeff 	.word	0xfffffeff
 8002ff4:	fffeff8f 	.word	0xfffeff8f
 8002ff8:	fffffdff 	.word	0xfffffdff
 8002ffc:	40012c00 	.word	0x40012c00
 8003000:	fffff7ff 	.word	0xfffff7ff
 8003004:	fffffbff 	.word	0xfffffbff
 8003008:	40014000 	.word	0x40014000
 800300c:	40014400 	.word	0x40014400
 8003010:	40014800 	.word	0x40014800
 8003014:	ffffefff 	.word	0xffffefff
 8003018:	ffffdfff 	.word	0xffffdfff

0800301c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b086      	sub	sp, #24
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
 8003024:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6a1b      	ldr	r3, [r3, #32]
 800302a:	4a28      	ldr	r2, [pc, #160]	; (80030cc <TIM_OC4_SetConfig+0xb0>)
 800302c:	401a      	ands	r2, r3
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6a1b      	ldr	r3, [r3, #32]
 8003036:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	69db      	ldr	r3, [r3, #28]
 8003042:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	4a22      	ldr	r2, [pc, #136]	; (80030d0 <TIM_OC4_SetConfig+0xb4>)
 8003048:	4013      	ands	r3, r2
 800304a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	4a21      	ldr	r2, [pc, #132]	; (80030d4 <TIM_OC4_SetConfig+0xb8>)
 8003050:	4013      	ands	r3, r2
 8003052:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	021b      	lsls	r3, r3, #8
 800305a:	68fa      	ldr	r2, [r7, #12]
 800305c:	4313      	orrs	r3, r2
 800305e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	4a1d      	ldr	r2, [pc, #116]	; (80030d8 <TIM_OC4_SetConfig+0xbc>)
 8003064:	4013      	ands	r3, r2
 8003066:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	031b      	lsls	r3, r3, #12
 800306e:	693a      	ldr	r2, [r7, #16]
 8003070:	4313      	orrs	r3, r2
 8003072:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	4a19      	ldr	r2, [pc, #100]	; (80030dc <TIM_OC4_SetConfig+0xc0>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d00b      	beq.n	8003094 <TIM_OC4_SetConfig+0x78>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	4a18      	ldr	r2, [pc, #96]	; (80030e0 <TIM_OC4_SetConfig+0xc4>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d007      	beq.n	8003094 <TIM_OC4_SetConfig+0x78>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	4a17      	ldr	r2, [pc, #92]	; (80030e4 <TIM_OC4_SetConfig+0xc8>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d003      	beq.n	8003094 <TIM_OC4_SetConfig+0x78>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	4a16      	ldr	r2, [pc, #88]	; (80030e8 <TIM_OC4_SetConfig+0xcc>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d109      	bne.n	80030a8 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	4a15      	ldr	r2, [pc, #84]	; (80030ec <TIM_OC4_SetConfig+0xd0>)
 8003098:	4013      	ands	r3, r2
 800309a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	695b      	ldr	r3, [r3, #20]
 80030a0:	019b      	lsls	r3, r3, #6
 80030a2:	697a      	ldr	r2, [r7, #20]
 80030a4:	4313      	orrs	r3, r2
 80030a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	697a      	ldr	r2, [r7, #20]
 80030ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	68fa      	ldr	r2, [r7, #12]
 80030b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	685a      	ldr	r2, [r3, #4]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	693a      	ldr	r2, [r7, #16]
 80030c0:	621a      	str	r2, [r3, #32]
}
 80030c2:	46c0      	nop			; (mov r8, r8)
 80030c4:	46bd      	mov	sp, r7
 80030c6:	b006      	add	sp, #24
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	46c0      	nop			; (mov r8, r8)
 80030cc:	ffffefff 	.word	0xffffefff
 80030d0:	feff8fff 	.word	0xfeff8fff
 80030d4:	fffffcff 	.word	0xfffffcff
 80030d8:	ffffdfff 	.word	0xffffdfff
 80030dc:	40012c00 	.word	0x40012c00
 80030e0:	40014000 	.word	0x40014000
 80030e4:	40014400 	.word	0x40014400
 80030e8:	40014800 	.word	0x40014800
 80030ec:	ffffbfff 	.word	0xffffbfff

080030f0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b086      	sub	sp, #24
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
 80030f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6a1b      	ldr	r3, [r3, #32]
 80030fe:	4a25      	ldr	r2, [pc, #148]	; (8003194 <TIM_OC5_SetConfig+0xa4>)
 8003100:	401a      	ands	r2, r3
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6a1b      	ldr	r3, [r3, #32]
 800310a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003116:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	4a1f      	ldr	r2, [pc, #124]	; (8003198 <TIM_OC5_SetConfig+0xa8>)
 800311c:	4013      	ands	r3, r2
 800311e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	68fa      	ldr	r2, [r7, #12]
 8003126:	4313      	orrs	r3, r2
 8003128:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	4a1b      	ldr	r2, [pc, #108]	; (800319c <TIM_OC5_SetConfig+0xac>)
 800312e:	4013      	ands	r3, r2
 8003130:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	041b      	lsls	r3, r3, #16
 8003138:	693a      	ldr	r2, [r7, #16]
 800313a:	4313      	orrs	r3, r2
 800313c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	4a17      	ldr	r2, [pc, #92]	; (80031a0 <TIM_OC5_SetConfig+0xb0>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d00b      	beq.n	800315e <TIM_OC5_SetConfig+0x6e>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	4a16      	ldr	r2, [pc, #88]	; (80031a4 <TIM_OC5_SetConfig+0xb4>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d007      	beq.n	800315e <TIM_OC5_SetConfig+0x6e>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4a15      	ldr	r2, [pc, #84]	; (80031a8 <TIM_OC5_SetConfig+0xb8>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d003      	beq.n	800315e <TIM_OC5_SetConfig+0x6e>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4a14      	ldr	r2, [pc, #80]	; (80031ac <TIM_OC5_SetConfig+0xbc>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d109      	bne.n	8003172 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	4a0c      	ldr	r2, [pc, #48]	; (8003194 <TIM_OC5_SetConfig+0xa4>)
 8003162:	4013      	ands	r3, r2
 8003164:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	695b      	ldr	r3, [r3, #20]
 800316a:	021b      	lsls	r3, r3, #8
 800316c:	697a      	ldr	r2, [r7, #20]
 800316e:	4313      	orrs	r3, r2
 8003170:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	697a      	ldr	r2, [r7, #20]
 8003176:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	68fa      	ldr	r2, [r7, #12]
 800317c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	685a      	ldr	r2, [r3, #4]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	693a      	ldr	r2, [r7, #16]
 800318a:	621a      	str	r2, [r3, #32]
}
 800318c:	46c0      	nop			; (mov r8, r8)
 800318e:	46bd      	mov	sp, r7
 8003190:	b006      	add	sp, #24
 8003192:	bd80      	pop	{r7, pc}
 8003194:	fffeffff 	.word	0xfffeffff
 8003198:	fffeff8f 	.word	0xfffeff8f
 800319c:	fffdffff 	.word	0xfffdffff
 80031a0:	40012c00 	.word	0x40012c00
 80031a4:	40014000 	.word	0x40014000
 80031a8:	40014400 	.word	0x40014400
 80031ac:	40014800 	.word	0x40014800

080031b0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b086      	sub	sp, #24
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
 80031b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6a1b      	ldr	r3, [r3, #32]
 80031be:	4a26      	ldr	r2, [pc, #152]	; (8003258 <TIM_OC6_SetConfig+0xa8>)
 80031c0:	401a      	ands	r2, r3
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6a1b      	ldr	r3, [r3, #32]
 80031ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	4a20      	ldr	r2, [pc, #128]	; (800325c <TIM_OC6_SetConfig+0xac>)
 80031dc:	4013      	ands	r3, r2
 80031de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	021b      	lsls	r3, r3, #8
 80031e6:	68fa      	ldr	r2, [r7, #12]
 80031e8:	4313      	orrs	r3, r2
 80031ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	4a1c      	ldr	r2, [pc, #112]	; (8003260 <TIM_OC6_SetConfig+0xb0>)
 80031f0:	4013      	ands	r3, r2
 80031f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	051b      	lsls	r3, r3, #20
 80031fa:	693a      	ldr	r2, [r7, #16]
 80031fc:	4313      	orrs	r3, r2
 80031fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	4a18      	ldr	r2, [pc, #96]	; (8003264 <TIM_OC6_SetConfig+0xb4>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d00b      	beq.n	8003220 <TIM_OC6_SetConfig+0x70>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	4a17      	ldr	r2, [pc, #92]	; (8003268 <TIM_OC6_SetConfig+0xb8>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d007      	beq.n	8003220 <TIM_OC6_SetConfig+0x70>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	4a16      	ldr	r2, [pc, #88]	; (800326c <TIM_OC6_SetConfig+0xbc>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d003      	beq.n	8003220 <TIM_OC6_SetConfig+0x70>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	4a15      	ldr	r2, [pc, #84]	; (8003270 <TIM_OC6_SetConfig+0xc0>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d109      	bne.n	8003234 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	4a14      	ldr	r2, [pc, #80]	; (8003274 <TIM_OC6_SetConfig+0xc4>)
 8003224:	4013      	ands	r3, r2
 8003226:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	695b      	ldr	r3, [r3, #20]
 800322c:	029b      	lsls	r3, r3, #10
 800322e:	697a      	ldr	r2, [r7, #20]
 8003230:	4313      	orrs	r3, r2
 8003232:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	697a      	ldr	r2, [r7, #20]
 8003238:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	68fa      	ldr	r2, [r7, #12]
 800323e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	685a      	ldr	r2, [r3, #4]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	693a      	ldr	r2, [r7, #16]
 800324c:	621a      	str	r2, [r3, #32]
}
 800324e:	46c0      	nop			; (mov r8, r8)
 8003250:	46bd      	mov	sp, r7
 8003252:	b006      	add	sp, #24
 8003254:	bd80      	pop	{r7, pc}
 8003256:	46c0      	nop			; (mov r8, r8)
 8003258:	ffefffff 	.word	0xffefffff
 800325c:	feff8fff 	.word	0xfeff8fff
 8003260:	ffdfffff 	.word	0xffdfffff
 8003264:	40012c00 	.word	0x40012c00
 8003268:	40014000 	.word	0x40014000
 800326c:	40014400 	.word	0x40014400
 8003270:	40014800 	.word	0x40014800
 8003274:	fffbffff 	.word	0xfffbffff

08003278 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b086      	sub	sp, #24
 800327c:	af00      	add	r7, sp, #0
 800327e:	60f8      	str	r0, [r7, #12]
 8003280:	60b9      	str	r1, [r7, #8]
 8003282:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6a1b      	ldr	r3, [r3, #32]
 8003288:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	6a1b      	ldr	r3, [r3, #32]
 800328e:	2201      	movs	r2, #1
 8003290:	4393      	bics	r3, r2
 8003292:	001a      	movs	r2, r3
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	699b      	ldr	r3, [r3, #24]
 800329c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	22f0      	movs	r2, #240	; 0xf0
 80032a2:	4393      	bics	r3, r2
 80032a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	011b      	lsls	r3, r3, #4
 80032aa:	693a      	ldr	r2, [r7, #16]
 80032ac:	4313      	orrs	r3, r2
 80032ae:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	220a      	movs	r2, #10
 80032b4:	4393      	bics	r3, r2
 80032b6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80032b8:	697a      	ldr	r2, [r7, #20]
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	4313      	orrs	r3, r2
 80032be:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	693a      	ldr	r2, [r7, #16]
 80032c4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	697a      	ldr	r2, [r7, #20]
 80032ca:	621a      	str	r2, [r3, #32]
}
 80032cc:	46c0      	nop			; (mov r8, r8)
 80032ce:	46bd      	mov	sp, r7
 80032d0:	b006      	add	sp, #24
 80032d2:	bd80      	pop	{r7, pc}

080032d4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b086      	sub	sp, #24
 80032d8:	af00      	add	r7, sp, #0
 80032da:	60f8      	str	r0, [r7, #12]
 80032dc:	60b9      	str	r1, [r7, #8]
 80032de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	6a1b      	ldr	r3, [r3, #32]
 80032e4:	2210      	movs	r2, #16
 80032e6:	4393      	bics	r3, r2
 80032e8:	001a      	movs	r2, r3
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	699b      	ldr	r3, [r3, #24]
 80032f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	6a1b      	ldr	r3, [r3, #32]
 80032f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	4a0d      	ldr	r2, [pc, #52]	; (8003334 <TIM_TI2_ConfigInputStage+0x60>)
 80032fe:	4013      	ands	r3, r2
 8003300:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	031b      	lsls	r3, r3, #12
 8003306:	697a      	ldr	r2, [r7, #20]
 8003308:	4313      	orrs	r3, r2
 800330a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	22a0      	movs	r2, #160	; 0xa0
 8003310:	4393      	bics	r3, r2
 8003312:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	011b      	lsls	r3, r3, #4
 8003318:	693a      	ldr	r2, [r7, #16]
 800331a:	4313      	orrs	r3, r2
 800331c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	697a      	ldr	r2, [r7, #20]
 8003322:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	693a      	ldr	r2, [r7, #16]
 8003328:	621a      	str	r2, [r3, #32]
}
 800332a:	46c0      	nop			; (mov r8, r8)
 800332c:	46bd      	mov	sp, r7
 800332e:	b006      	add	sp, #24
 8003330:	bd80      	pop	{r7, pc}
 8003332:	46c0      	nop			; (mov r8, r8)
 8003334:	ffff0fff 	.word	0xffff0fff

08003338 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b084      	sub	sp, #16
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	4a08      	ldr	r2, [pc, #32]	; (800336c <TIM_ITRx_SetConfig+0x34>)
 800334c:	4013      	ands	r3, r2
 800334e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003350:	683a      	ldr	r2, [r7, #0]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	4313      	orrs	r3, r2
 8003356:	2207      	movs	r2, #7
 8003358:	4313      	orrs	r3, r2
 800335a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	68fa      	ldr	r2, [r7, #12]
 8003360:	609a      	str	r2, [r3, #8]
}
 8003362:	46c0      	nop			; (mov r8, r8)
 8003364:	46bd      	mov	sp, r7
 8003366:	b004      	add	sp, #16
 8003368:	bd80      	pop	{r7, pc}
 800336a:	46c0      	nop			; (mov r8, r8)
 800336c:	ffcfff8f 	.word	0xffcfff8f

08003370 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b086      	sub	sp, #24
 8003374:	af00      	add	r7, sp, #0
 8003376:	60f8      	str	r0, [r7, #12]
 8003378:	60b9      	str	r1, [r7, #8]
 800337a:	607a      	str	r2, [r7, #4]
 800337c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	4a09      	ldr	r2, [pc, #36]	; (80033ac <TIM_ETR_SetConfig+0x3c>)
 8003388:	4013      	ands	r3, r2
 800338a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	021a      	lsls	r2, r3, #8
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	431a      	orrs	r2, r3
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	4313      	orrs	r3, r2
 8003398:	697a      	ldr	r2, [r7, #20]
 800339a:	4313      	orrs	r3, r2
 800339c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	697a      	ldr	r2, [r7, #20]
 80033a2:	609a      	str	r2, [r3, #8]
}
 80033a4:	46c0      	nop			; (mov r8, r8)
 80033a6:	46bd      	mov	sp, r7
 80033a8:	b006      	add	sp, #24
 80033aa:	bd80      	pop	{r7, pc}
 80033ac:	ffff00ff 	.word	0xffff00ff

080033b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b084      	sub	sp, #16
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	223c      	movs	r2, #60	; 0x3c
 80033be:	5c9b      	ldrb	r3, [r3, r2]
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d101      	bne.n	80033c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80033c4:	2302      	movs	r3, #2
 80033c6:	e055      	b.n	8003474 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	223c      	movs	r2, #60	; 0x3c
 80033cc:	2101      	movs	r1, #1
 80033ce:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	223d      	movs	r2, #61	; 0x3d
 80033d4:	2102      	movs	r1, #2
 80033d6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a23      	ldr	r2, [pc, #140]	; (800347c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d108      	bne.n	8003404 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	4a22      	ldr	r2, [pc, #136]	; (8003480 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80033f6:	4013      	ands	r3, r2
 80033f8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	68fa      	ldr	r2, [r7, #12]
 8003400:	4313      	orrs	r3, r2
 8003402:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2270      	movs	r2, #112	; 0x70
 8003408:	4393      	bics	r3, r2
 800340a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	68fa      	ldr	r2, [r7, #12]
 8003412:	4313      	orrs	r3, r2
 8003414:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	68fa      	ldr	r2, [r7, #12]
 800341c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a16      	ldr	r2, [pc, #88]	; (800347c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d00f      	beq.n	8003448 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	2380      	movs	r3, #128	; 0x80
 800342e:	05db      	lsls	r3, r3, #23
 8003430:	429a      	cmp	r2, r3
 8003432:	d009      	beq.n	8003448 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a12      	ldr	r2, [pc, #72]	; (8003484 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d004      	beq.n	8003448 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a11      	ldr	r2, [pc, #68]	; (8003488 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d10c      	bne.n	8003462 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	2280      	movs	r2, #128	; 0x80
 800344c:	4393      	bics	r3, r2
 800344e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	68ba      	ldr	r2, [r7, #8]
 8003456:	4313      	orrs	r3, r2
 8003458:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	68ba      	ldr	r2, [r7, #8]
 8003460:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	223d      	movs	r2, #61	; 0x3d
 8003466:	2101      	movs	r1, #1
 8003468:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	223c      	movs	r2, #60	; 0x3c
 800346e:	2100      	movs	r1, #0
 8003470:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003472:	2300      	movs	r3, #0
}
 8003474:	0018      	movs	r0, r3
 8003476:	46bd      	mov	sp, r7
 8003478:	b004      	add	sp, #16
 800347a:	bd80      	pop	{r7, pc}
 800347c:	40012c00 	.word	0x40012c00
 8003480:	ff0fffff 	.word	0xff0fffff
 8003484:	40000400 	.word	0x40000400
 8003488:	40014000 	.word	0x40014000

0800348c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b082      	sub	sp, #8
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d101      	bne.n	800349e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e046      	b.n	800352c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2288      	movs	r2, #136	; 0x88
 80034a2:	589b      	ldr	r3, [r3, r2]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d107      	bne.n	80034b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2284      	movs	r2, #132	; 0x84
 80034ac:	2100      	movs	r1, #0
 80034ae:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	0018      	movs	r0, r3
 80034b4:	f7fd fd50 	bl	8000f58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2288      	movs	r2, #136	; 0x88
 80034bc:	2124      	movs	r1, #36	; 0x24
 80034be:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	2101      	movs	r1, #1
 80034cc:	438a      	bics	r2, r1
 80034ce:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	0018      	movs	r0, r3
 80034d4:	f000 f8cc 	bl	8003670 <UART_SetConfig>
 80034d8:	0003      	movs	r3, r0
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d101      	bne.n	80034e2 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e024      	b.n	800352c <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d003      	beq.n	80034f2 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	0018      	movs	r0, r3
 80034ee:	f000 fb7d 	bl	8003bec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	685a      	ldr	r2, [r3, #4]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	490d      	ldr	r1, [pc, #52]	; (8003534 <HAL_UART_Init+0xa8>)
 80034fe:	400a      	ands	r2, r1
 8003500:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	689a      	ldr	r2, [r3, #8]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	212a      	movs	r1, #42	; 0x2a
 800350e:	438a      	bics	r2, r1
 8003510:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	2101      	movs	r1, #1
 800351e:	430a      	orrs	r2, r1
 8003520:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	0018      	movs	r0, r3
 8003526:	f000 fc15 	bl	8003d54 <UART_CheckIdleState>
 800352a:	0003      	movs	r3, r0
}
 800352c:	0018      	movs	r0, r3
 800352e:	46bd      	mov	sp, r7
 8003530:	b002      	add	sp, #8
 8003532:	bd80      	pop	{r7, pc}
 8003534:	ffffb7ff 	.word	0xffffb7ff

08003538 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b08a      	sub	sp, #40	; 0x28
 800353c:	af02      	add	r7, sp, #8
 800353e:	60f8      	str	r0, [r7, #12]
 8003540:	60b9      	str	r1, [r7, #8]
 8003542:	603b      	str	r3, [r7, #0]
 8003544:	1dbb      	adds	r3, r7, #6
 8003546:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2288      	movs	r2, #136	; 0x88
 800354c:	589b      	ldr	r3, [r3, r2]
 800354e:	2b20      	cmp	r3, #32
 8003550:	d000      	beq.n	8003554 <HAL_UART_Transmit+0x1c>
 8003552:	e088      	b.n	8003666 <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d003      	beq.n	8003562 <HAL_UART_Transmit+0x2a>
 800355a:	1dbb      	adds	r3, r7, #6
 800355c:	881b      	ldrh	r3, [r3, #0]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d101      	bne.n	8003566 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e080      	b.n	8003668 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	689a      	ldr	r2, [r3, #8]
 800356a:	2380      	movs	r3, #128	; 0x80
 800356c:	015b      	lsls	r3, r3, #5
 800356e:	429a      	cmp	r2, r3
 8003570:	d109      	bne.n	8003586 <HAL_UART_Transmit+0x4e>
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	691b      	ldr	r3, [r3, #16]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d105      	bne.n	8003586 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	2201      	movs	r2, #1
 800357e:	4013      	ands	r3, r2
 8003580:	d001      	beq.n	8003586 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e070      	b.n	8003668 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2290      	movs	r2, #144	; 0x90
 800358a:	2100      	movs	r1, #0
 800358c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2288      	movs	r2, #136	; 0x88
 8003592:	2121      	movs	r1, #33	; 0x21
 8003594:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003596:	f7fd fe4b 	bl	8001230 <HAL_GetTick>
 800359a:	0003      	movs	r3, r0
 800359c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	1dba      	adds	r2, r7, #6
 80035a2:	2154      	movs	r1, #84	; 0x54
 80035a4:	8812      	ldrh	r2, [r2, #0]
 80035a6:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	1dba      	adds	r2, r7, #6
 80035ac:	2156      	movs	r1, #86	; 0x56
 80035ae:	8812      	ldrh	r2, [r2, #0]
 80035b0:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	689a      	ldr	r2, [r3, #8]
 80035b6:	2380      	movs	r3, #128	; 0x80
 80035b8:	015b      	lsls	r3, r3, #5
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d108      	bne.n	80035d0 <HAL_UART_Transmit+0x98>
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	691b      	ldr	r3, [r3, #16]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d104      	bne.n	80035d0 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 80035c6:	2300      	movs	r3, #0
 80035c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	61bb      	str	r3, [r7, #24]
 80035ce:	e003      	b.n	80035d8 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80035d4:	2300      	movs	r3, #0
 80035d6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80035d8:	e02c      	b.n	8003634 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80035da:	697a      	ldr	r2, [r7, #20]
 80035dc:	68f8      	ldr	r0, [r7, #12]
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	9300      	str	r3, [sp, #0]
 80035e2:	0013      	movs	r3, r2
 80035e4:	2200      	movs	r2, #0
 80035e6:	2180      	movs	r1, #128	; 0x80
 80035e8:	f000 fc02 	bl	8003df0 <UART_WaitOnFlagUntilTimeout>
 80035ec:	1e03      	subs	r3, r0, #0
 80035ee:	d001      	beq.n	80035f4 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 80035f0:	2303      	movs	r3, #3
 80035f2:	e039      	b.n	8003668 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d10b      	bne.n	8003612 <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80035fa:	69bb      	ldr	r3, [r7, #24]
 80035fc:	881b      	ldrh	r3, [r3, #0]
 80035fe:	001a      	movs	r2, r3
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	05d2      	lsls	r2, r2, #23
 8003606:	0dd2      	lsrs	r2, r2, #23
 8003608:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800360a:	69bb      	ldr	r3, [r7, #24]
 800360c:	3302      	adds	r3, #2
 800360e:	61bb      	str	r3, [r7, #24]
 8003610:	e007      	b.n	8003622 <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	781a      	ldrb	r2, [r3, #0]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800361c:	69fb      	ldr	r3, [r7, #28]
 800361e:	3301      	adds	r3, #1
 8003620:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2256      	movs	r2, #86	; 0x56
 8003626:	5a9b      	ldrh	r3, [r3, r2]
 8003628:	b29b      	uxth	r3, r3
 800362a:	3b01      	subs	r3, #1
 800362c:	b299      	uxth	r1, r3
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2256      	movs	r2, #86	; 0x56
 8003632:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2256      	movs	r2, #86	; 0x56
 8003638:	5a9b      	ldrh	r3, [r3, r2]
 800363a:	b29b      	uxth	r3, r3
 800363c:	2b00      	cmp	r3, #0
 800363e:	d1cc      	bne.n	80035da <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003640:	697a      	ldr	r2, [r7, #20]
 8003642:	68f8      	ldr	r0, [r7, #12]
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	9300      	str	r3, [sp, #0]
 8003648:	0013      	movs	r3, r2
 800364a:	2200      	movs	r2, #0
 800364c:	2140      	movs	r1, #64	; 0x40
 800364e:	f000 fbcf 	bl	8003df0 <UART_WaitOnFlagUntilTimeout>
 8003652:	1e03      	subs	r3, r0, #0
 8003654:	d001      	beq.n	800365a <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	e006      	b.n	8003668 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2288      	movs	r2, #136	; 0x88
 800365e:	2120      	movs	r1, #32
 8003660:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8003662:	2300      	movs	r3, #0
 8003664:	e000      	b.n	8003668 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 8003666:	2302      	movs	r3, #2
  }
}
 8003668:	0018      	movs	r0, r3
 800366a:	46bd      	mov	sp, r7
 800366c:	b008      	add	sp, #32
 800366e:	bd80      	pop	{r7, pc}

08003670 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003670:	b5b0      	push	{r4, r5, r7, lr}
 8003672:	b090      	sub	sp, #64	; 0x40
 8003674:	af00      	add	r7, sp, #0
 8003676:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003678:	231a      	movs	r3, #26
 800367a:	2220      	movs	r2, #32
 800367c:	189b      	adds	r3, r3, r2
 800367e:	19db      	adds	r3, r3, r7
 8003680:	2200      	movs	r2, #0
 8003682:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003686:	689a      	ldr	r2, [r3, #8]
 8003688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800368a:	691b      	ldr	r3, [r3, #16]
 800368c:	431a      	orrs	r2, r3
 800368e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003690:	695b      	ldr	r3, [r3, #20]
 8003692:	431a      	orrs	r2, r3
 8003694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003696:	69db      	ldr	r3, [r3, #28]
 8003698:	4313      	orrs	r3, r2
 800369a:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800369c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4aaf      	ldr	r2, [pc, #700]	; (8003960 <UART_SetConfig+0x2f0>)
 80036a4:	4013      	ands	r3, r2
 80036a6:	0019      	movs	r1, r3
 80036a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036ae:	430b      	orrs	r3, r1
 80036b0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	4aaa      	ldr	r2, [pc, #680]	; (8003964 <UART_SetConfig+0x2f4>)
 80036ba:	4013      	ands	r3, r2
 80036bc:	0018      	movs	r0, r3
 80036be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c0:	68d9      	ldr	r1, [r3, #12]
 80036c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	0003      	movs	r3, r0
 80036c8:	430b      	orrs	r3, r1
 80036ca:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80036cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ce:	699b      	ldr	r3, [r3, #24]
 80036d0:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80036d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4aa4      	ldr	r2, [pc, #656]	; (8003968 <UART_SetConfig+0x2f8>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d004      	beq.n	80036e6 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80036dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036de:	6a1b      	ldr	r3, [r3, #32]
 80036e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80036e2:	4313      	orrs	r3, r2
 80036e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80036e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	4a9f      	ldr	r2, [pc, #636]	; (800396c <UART_SetConfig+0x2fc>)
 80036ee:	4013      	ands	r3, r2
 80036f0:	0019      	movs	r1, r3
 80036f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036f8:	430b      	orrs	r3, r1
 80036fa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80036fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003702:	220f      	movs	r2, #15
 8003704:	4393      	bics	r3, r2
 8003706:	0018      	movs	r0, r3
 8003708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800370a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800370c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	0003      	movs	r3, r0
 8003712:	430b      	orrs	r3, r1
 8003714:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a95      	ldr	r2, [pc, #596]	; (8003970 <UART_SetConfig+0x300>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d131      	bne.n	8003784 <UART_SetConfig+0x114>
 8003720:	4b94      	ldr	r3, [pc, #592]	; (8003974 <UART_SetConfig+0x304>)
 8003722:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003724:	2203      	movs	r2, #3
 8003726:	4013      	ands	r3, r2
 8003728:	2b03      	cmp	r3, #3
 800372a:	d01d      	beq.n	8003768 <UART_SetConfig+0xf8>
 800372c:	d823      	bhi.n	8003776 <UART_SetConfig+0x106>
 800372e:	2b02      	cmp	r3, #2
 8003730:	d00c      	beq.n	800374c <UART_SetConfig+0xdc>
 8003732:	d820      	bhi.n	8003776 <UART_SetConfig+0x106>
 8003734:	2b00      	cmp	r3, #0
 8003736:	d002      	beq.n	800373e <UART_SetConfig+0xce>
 8003738:	2b01      	cmp	r3, #1
 800373a:	d00e      	beq.n	800375a <UART_SetConfig+0xea>
 800373c:	e01b      	b.n	8003776 <UART_SetConfig+0x106>
 800373e:	231b      	movs	r3, #27
 8003740:	2220      	movs	r2, #32
 8003742:	189b      	adds	r3, r3, r2
 8003744:	19db      	adds	r3, r3, r7
 8003746:	2200      	movs	r2, #0
 8003748:	701a      	strb	r2, [r3, #0]
 800374a:	e0b4      	b.n	80038b6 <UART_SetConfig+0x246>
 800374c:	231b      	movs	r3, #27
 800374e:	2220      	movs	r2, #32
 8003750:	189b      	adds	r3, r3, r2
 8003752:	19db      	adds	r3, r3, r7
 8003754:	2202      	movs	r2, #2
 8003756:	701a      	strb	r2, [r3, #0]
 8003758:	e0ad      	b.n	80038b6 <UART_SetConfig+0x246>
 800375a:	231b      	movs	r3, #27
 800375c:	2220      	movs	r2, #32
 800375e:	189b      	adds	r3, r3, r2
 8003760:	19db      	adds	r3, r3, r7
 8003762:	2204      	movs	r2, #4
 8003764:	701a      	strb	r2, [r3, #0]
 8003766:	e0a6      	b.n	80038b6 <UART_SetConfig+0x246>
 8003768:	231b      	movs	r3, #27
 800376a:	2220      	movs	r2, #32
 800376c:	189b      	adds	r3, r3, r2
 800376e:	19db      	adds	r3, r3, r7
 8003770:	2208      	movs	r2, #8
 8003772:	701a      	strb	r2, [r3, #0]
 8003774:	e09f      	b.n	80038b6 <UART_SetConfig+0x246>
 8003776:	231b      	movs	r3, #27
 8003778:	2220      	movs	r2, #32
 800377a:	189b      	adds	r3, r3, r2
 800377c:	19db      	adds	r3, r3, r7
 800377e:	2210      	movs	r2, #16
 8003780:	701a      	strb	r2, [r3, #0]
 8003782:	e098      	b.n	80038b6 <UART_SetConfig+0x246>
 8003784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a7b      	ldr	r2, [pc, #492]	; (8003978 <UART_SetConfig+0x308>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d131      	bne.n	80037f2 <UART_SetConfig+0x182>
 800378e:	4b79      	ldr	r3, [pc, #484]	; (8003974 <UART_SetConfig+0x304>)
 8003790:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003792:	220c      	movs	r2, #12
 8003794:	4013      	ands	r3, r2
 8003796:	2b0c      	cmp	r3, #12
 8003798:	d01d      	beq.n	80037d6 <UART_SetConfig+0x166>
 800379a:	d823      	bhi.n	80037e4 <UART_SetConfig+0x174>
 800379c:	2b08      	cmp	r3, #8
 800379e:	d00c      	beq.n	80037ba <UART_SetConfig+0x14a>
 80037a0:	d820      	bhi.n	80037e4 <UART_SetConfig+0x174>
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d002      	beq.n	80037ac <UART_SetConfig+0x13c>
 80037a6:	2b04      	cmp	r3, #4
 80037a8:	d00e      	beq.n	80037c8 <UART_SetConfig+0x158>
 80037aa:	e01b      	b.n	80037e4 <UART_SetConfig+0x174>
 80037ac:	231b      	movs	r3, #27
 80037ae:	2220      	movs	r2, #32
 80037b0:	189b      	adds	r3, r3, r2
 80037b2:	19db      	adds	r3, r3, r7
 80037b4:	2200      	movs	r2, #0
 80037b6:	701a      	strb	r2, [r3, #0]
 80037b8:	e07d      	b.n	80038b6 <UART_SetConfig+0x246>
 80037ba:	231b      	movs	r3, #27
 80037bc:	2220      	movs	r2, #32
 80037be:	189b      	adds	r3, r3, r2
 80037c0:	19db      	adds	r3, r3, r7
 80037c2:	2202      	movs	r2, #2
 80037c4:	701a      	strb	r2, [r3, #0]
 80037c6:	e076      	b.n	80038b6 <UART_SetConfig+0x246>
 80037c8:	231b      	movs	r3, #27
 80037ca:	2220      	movs	r2, #32
 80037cc:	189b      	adds	r3, r3, r2
 80037ce:	19db      	adds	r3, r3, r7
 80037d0:	2204      	movs	r2, #4
 80037d2:	701a      	strb	r2, [r3, #0]
 80037d4:	e06f      	b.n	80038b6 <UART_SetConfig+0x246>
 80037d6:	231b      	movs	r3, #27
 80037d8:	2220      	movs	r2, #32
 80037da:	189b      	adds	r3, r3, r2
 80037dc:	19db      	adds	r3, r3, r7
 80037de:	2208      	movs	r2, #8
 80037e0:	701a      	strb	r2, [r3, #0]
 80037e2:	e068      	b.n	80038b6 <UART_SetConfig+0x246>
 80037e4:	231b      	movs	r3, #27
 80037e6:	2220      	movs	r2, #32
 80037e8:	189b      	adds	r3, r3, r2
 80037ea:	19db      	adds	r3, r3, r7
 80037ec:	2210      	movs	r2, #16
 80037ee:	701a      	strb	r2, [r3, #0]
 80037f0:	e061      	b.n	80038b6 <UART_SetConfig+0x246>
 80037f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a61      	ldr	r2, [pc, #388]	; (800397c <UART_SetConfig+0x30c>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d106      	bne.n	800380a <UART_SetConfig+0x19a>
 80037fc:	231b      	movs	r3, #27
 80037fe:	2220      	movs	r2, #32
 8003800:	189b      	adds	r3, r3, r2
 8003802:	19db      	adds	r3, r3, r7
 8003804:	2200      	movs	r2, #0
 8003806:	701a      	strb	r2, [r3, #0]
 8003808:	e055      	b.n	80038b6 <UART_SetConfig+0x246>
 800380a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a5c      	ldr	r2, [pc, #368]	; (8003980 <UART_SetConfig+0x310>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d106      	bne.n	8003822 <UART_SetConfig+0x1b2>
 8003814:	231b      	movs	r3, #27
 8003816:	2220      	movs	r2, #32
 8003818:	189b      	adds	r3, r3, r2
 800381a:	19db      	adds	r3, r3, r7
 800381c:	2200      	movs	r2, #0
 800381e:	701a      	strb	r2, [r3, #0]
 8003820:	e049      	b.n	80038b6 <UART_SetConfig+0x246>
 8003822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a50      	ldr	r2, [pc, #320]	; (8003968 <UART_SetConfig+0x2f8>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d13e      	bne.n	80038aa <UART_SetConfig+0x23a>
 800382c:	4b51      	ldr	r3, [pc, #324]	; (8003974 <UART_SetConfig+0x304>)
 800382e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003830:	23c0      	movs	r3, #192	; 0xc0
 8003832:	011b      	lsls	r3, r3, #4
 8003834:	4013      	ands	r3, r2
 8003836:	22c0      	movs	r2, #192	; 0xc0
 8003838:	0112      	lsls	r2, r2, #4
 800383a:	4293      	cmp	r3, r2
 800383c:	d027      	beq.n	800388e <UART_SetConfig+0x21e>
 800383e:	22c0      	movs	r2, #192	; 0xc0
 8003840:	0112      	lsls	r2, r2, #4
 8003842:	4293      	cmp	r3, r2
 8003844:	d82a      	bhi.n	800389c <UART_SetConfig+0x22c>
 8003846:	2280      	movs	r2, #128	; 0x80
 8003848:	0112      	lsls	r2, r2, #4
 800384a:	4293      	cmp	r3, r2
 800384c:	d011      	beq.n	8003872 <UART_SetConfig+0x202>
 800384e:	2280      	movs	r2, #128	; 0x80
 8003850:	0112      	lsls	r2, r2, #4
 8003852:	4293      	cmp	r3, r2
 8003854:	d822      	bhi.n	800389c <UART_SetConfig+0x22c>
 8003856:	2b00      	cmp	r3, #0
 8003858:	d004      	beq.n	8003864 <UART_SetConfig+0x1f4>
 800385a:	2280      	movs	r2, #128	; 0x80
 800385c:	00d2      	lsls	r2, r2, #3
 800385e:	4293      	cmp	r3, r2
 8003860:	d00e      	beq.n	8003880 <UART_SetConfig+0x210>
 8003862:	e01b      	b.n	800389c <UART_SetConfig+0x22c>
 8003864:	231b      	movs	r3, #27
 8003866:	2220      	movs	r2, #32
 8003868:	189b      	adds	r3, r3, r2
 800386a:	19db      	adds	r3, r3, r7
 800386c:	2200      	movs	r2, #0
 800386e:	701a      	strb	r2, [r3, #0]
 8003870:	e021      	b.n	80038b6 <UART_SetConfig+0x246>
 8003872:	231b      	movs	r3, #27
 8003874:	2220      	movs	r2, #32
 8003876:	189b      	adds	r3, r3, r2
 8003878:	19db      	adds	r3, r3, r7
 800387a:	2202      	movs	r2, #2
 800387c:	701a      	strb	r2, [r3, #0]
 800387e:	e01a      	b.n	80038b6 <UART_SetConfig+0x246>
 8003880:	231b      	movs	r3, #27
 8003882:	2220      	movs	r2, #32
 8003884:	189b      	adds	r3, r3, r2
 8003886:	19db      	adds	r3, r3, r7
 8003888:	2204      	movs	r2, #4
 800388a:	701a      	strb	r2, [r3, #0]
 800388c:	e013      	b.n	80038b6 <UART_SetConfig+0x246>
 800388e:	231b      	movs	r3, #27
 8003890:	2220      	movs	r2, #32
 8003892:	189b      	adds	r3, r3, r2
 8003894:	19db      	adds	r3, r3, r7
 8003896:	2208      	movs	r2, #8
 8003898:	701a      	strb	r2, [r3, #0]
 800389a:	e00c      	b.n	80038b6 <UART_SetConfig+0x246>
 800389c:	231b      	movs	r3, #27
 800389e:	2220      	movs	r2, #32
 80038a0:	189b      	adds	r3, r3, r2
 80038a2:	19db      	adds	r3, r3, r7
 80038a4:	2210      	movs	r2, #16
 80038a6:	701a      	strb	r2, [r3, #0]
 80038a8:	e005      	b.n	80038b6 <UART_SetConfig+0x246>
 80038aa:	231b      	movs	r3, #27
 80038ac:	2220      	movs	r2, #32
 80038ae:	189b      	adds	r3, r3, r2
 80038b0:	19db      	adds	r3, r3, r7
 80038b2:	2210      	movs	r2, #16
 80038b4:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80038b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a2b      	ldr	r2, [pc, #172]	; (8003968 <UART_SetConfig+0x2f8>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d000      	beq.n	80038c2 <UART_SetConfig+0x252>
 80038c0:	e0a9      	b.n	8003a16 <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80038c2:	231b      	movs	r3, #27
 80038c4:	2220      	movs	r2, #32
 80038c6:	189b      	adds	r3, r3, r2
 80038c8:	19db      	adds	r3, r3, r7
 80038ca:	781b      	ldrb	r3, [r3, #0]
 80038cc:	2b08      	cmp	r3, #8
 80038ce:	d015      	beq.n	80038fc <UART_SetConfig+0x28c>
 80038d0:	dc18      	bgt.n	8003904 <UART_SetConfig+0x294>
 80038d2:	2b04      	cmp	r3, #4
 80038d4:	d00d      	beq.n	80038f2 <UART_SetConfig+0x282>
 80038d6:	dc15      	bgt.n	8003904 <UART_SetConfig+0x294>
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d002      	beq.n	80038e2 <UART_SetConfig+0x272>
 80038dc:	2b02      	cmp	r3, #2
 80038de:	d005      	beq.n	80038ec <UART_SetConfig+0x27c>
 80038e0:	e010      	b.n	8003904 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038e2:	f7fe fd75 	bl	80023d0 <HAL_RCC_GetPCLK1Freq>
 80038e6:	0003      	movs	r3, r0
 80038e8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80038ea:	e014      	b.n	8003916 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038ec:	4b25      	ldr	r3, [pc, #148]	; (8003984 <UART_SetConfig+0x314>)
 80038ee:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80038f0:	e011      	b.n	8003916 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038f2:	f7fe fce1 	bl	80022b8 <HAL_RCC_GetSysClockFreq>
 80038f6:	0003      	movs	r3, r0
 80038f8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80038fa:	e00c      	b.n	8003916 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038fc:	2380      	movs	r3, #128	; 0x80
 80038fe:	021b      	lsls	r3, r3, #8
 8003900:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003902:	e008      	b.n	8003916 <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 8003904:	2300      	movs	r3, #0
 8003906:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003908:	231a      	movs	r3, #26
 800390a:	2220      	movs	r2, #32
 800390c:	189b      	adds	r3, r3, r2
 800390e:	19db      	adds	r3, r3, r7
 8003910:	2201      	movs	r2, #1
 8003912:	701a      	strb	r2, [r3, #0]
        break;
 8003914:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003916:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003918:	2b00      	cmp	r3, #0
 800391a:	d100      	bne.n	800391e <UART_SetConfig+0x2ae>
 800391c:	e14b      	b.n	8003bb6 <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800391e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003920:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003922:	4b19      	ldr	r3, [pc, #100]	; (8003988 <UART_SetConfig+0x318>)
 8003924:	0052      	lsls	r2, r2, #1
 8003926:	5ad3      	ldrh	r3, [r2, r3]
 8003928:	0019      	movs	r1, r3
 800392a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800392c:	f7fc fbea 	bl	8000104 <__udivsi3>
 8003930:	0003      	movs	r3, r0
 8003932:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003936:	685a      	ldr	r2, [r3, #4]
 8003938:	0013      	movs	r3, r2
 800393a:	005b      	lsls	r3, r3, #1
 800393c:	189b      	adds	r3, r3, r2
 800393e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003940:	429a      	cmp	r2, r3
 8003942:	d305      	bcc.n	8003950 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800394a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800394c:	429a      	cmp	r2, r3
 800394e:	d91d      	bls.n	800398c <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8003950:	231a      	movs	r3, #26
 8003952:	2220      	movs	r2, #32
 8003954:	189b      	adds	r3, r3, r2
 8003956:	19db      	adds	r3, r3, r7
 8003958:	2201      	movs	r2, #1
 800395a:	701a      	strb	r2, [r3, #0]
 800395c:	e12b      	b.n	8003bb6 <UART_SetConfig+0x546>
 800395e:	46c0      	nop			; (mov r8, r8)
 8003960:	cfff69f3 	.word	0xcfff69f3
 8003964:	ffffcfff 	.word	0xffffcfff
 8003968:	40008000 	.word	0x40008000
 800396c:	11fff4ff 	.word	0x11fff4ff
 8003970:	40013800 	.word	0x40013800
 8003974:	40021000 	.word	0x40021000
 8003978:	40004400 	.word	0x40004400
 800397c:	40004800 	.word	0x40004800
 8003980:	40004c00 	.word	0x40004c00
 8003984:	00f42400 	.word	0x00f42400
 8003988:	08004354 	.word	0x08004354
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800398c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800398e:	61bb      	str	r3, [r7, #24]
 8003990:	2300      	movs	r3, #0
 8003992:	61fb      	str	r3, [r7, #28]
 8003994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003996:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003998:	4b92      	ldr	r3, [pc, #584]	; (8003be4 <UART_SetConfig+0x574>)
 800399a:	0052      	lsls	r2, r2, #1
 800399c:	5ad3      	ldrh	r3, [r2, r3]
 800399e:	613b      	str	r3, [r7, #16]
 80039a0:	2300      	movs	r3, #0
 80039a2:	617b      	str	r3, [r7, #20]
 80039a4:	693a      	ldr	r2, [r7, #16]
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	69b8      	ldr	r0, [r7, #24]
 80039aa:	69f9      	ldr	r1, [r7, #28]
 80039ac:	f7fc fd20 	bl	80003f0 <__aeabi_uldivmod>
 80039b0:	0002      	movs	r2, r0
 80039b2:	000b      	movs	r3, r1
 80039b4:	0e11      	lsrs	r1, r2, #24
 80039b6:	021d      	lsls	r5, r3, #8
 80039b8:	430d      	orrs	r5, r1
 80039ba:	0214      	lsls	r4, r2, #8
 80039bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	085b      	lsrs	r3, r3, #1
 80039c2:	60bb      	str	r3, [r7, #8]
 80039c4:	2300      	movs	r3, #0
 80039c6:	60fb      	str	r3, [r7, #12]
 80039c8:	68b8      	ldr	r0, [r7, #8]
 80039ca:	68f9      	ldr	r1, [r7, #12]
 80039cc:	1900      	adds	r0, r0, r4
 80039ce:	4169      	adcs	r1, r5
 80039d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	603b      	str	r3, [r7, #0]
 80039d6:	2300      	movs	r3, #0
 80039d8:	607b      	str	r3, [r7, #4]
 80039da:	683a      	ldr	r2, [r7, #0]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	f7fc fd07 	bl	80003f0 <__aeabi_uldivmod>
 80039e2:	0002      	movs	r2, r0
 80039e4:	000b      	movs	r3, r1
 80039e6:	0013      	movs	r3, r2
 80039e8:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80039ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039ec:	23c0      	movs	r3, #192	; 0xc0
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d309      	bcc.n	8003a08 <UART_SetConfig+0x398>
 80039f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039f6:	2380      	movs	r3, #128	; 0x80
 80039f8:	035b      	lsls	r3, r3, #13
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d204      	bcs.n	8003a08 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 80039fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a04:	60da      	str	r2, [r3, #12]
 8003a06:	e0d6      	b.n	8003bb6 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8003a08:	231a      	movs	r3, #26
 8003a0a:	2220      	movs	r2, #32
 8003a0c:	189b      	adds	r3, r3, r2
 8003a0e:	19db      	adds	r3, r3, r7
 8003a10:	2201      	movs	r2, #1
 8003a12:	701a      	strb	r2, [r3, #0]
 8003a14:	e0cf      	b.n	8003bb6 <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a18:	69da      	ldr	r2, [r3, #28]
 8003a1a:	2380      	movs	r3, #128	; 0x80
 8003a1c:	021b      	lsls	r3, r3, #8
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	d000      	beq.n	8003a24 <UART_SetConfig+0x3b4>
 8003a22:	e070      	b.n	8003b06 <UART_SetConfig+0x496>
  {
    switch (clocksource)
 8003a24:	231b      	movs	r3, #27
 8003a26:	2220      	movs	r2, #32
 8003a28:	189b      	adds	r3, r3, r2
 8003a2a:	19db      	adds	r3, r3, r7
 8003a2c:	781b      	ldrb	r3, [r3, #0]
 8003a2e:	2b08      	cmp	r3, #8
 8003a30:	d015      	beq.n	8003a5e <UART_SetConfig+0x3ee>
 8003a32:	dc18      	bgt.n	8003a66 <UART_SetConfig+0x3f6>
 8003a34:	2b04      	cmp	r3, #4
 8003a36:	d00d      	beq.n	8003a54 <UART_SetConfig+0x3e4>
 8003a38:	dc15      	bgt.n	8003a66 <UART_SetConfig+0x3f6>
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d002      	beq.n	8003a44 <UART_SetConfig+0x3d4>
 8003a3e:	2b02      	cmp	r3, #2
 8003a40:	d005      	beq.n	8003a4e <UART_SetConfig+0x3de>
 8003a42:	e010      	b.n	8003a66 <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a44:	f7fe fcc4 	bl	80023d0 <HAL_RCC_GetPCLK1Freq>
 8003a48:	0003      	movs	r3, r0
 8003a4a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003a4c:	e014      	b.n	8003a78 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a4e:	4b66      	ldr	r3, [pc, #408]	; (8003be8 <UART_SetConfig+0x578>)
 8003a50:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003a52:	e011      	b.n	8003a78 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a54:	f7fe fc30 	bl	80022b8 <HAL_RCC_GetSysClockFreq>
 8003a58:	0003      	movs	r3, r0
 8003a5a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003a5c:	e00c      	b.n	8003a78 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a5e:	2380      	movs	r3, #128	; 0x80
 8003a60:	021b      	lsls	r3, r3, #8
 8003a62:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003a64:	e008      	b.n	8003a78 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8003a66:	2300      	movs	r3, #0
 8003a68:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003a6a:	231a      	movs	r3, #26
 8003a6c:	2220      	movs	r2, #32
 8003a6e:	189b      	adds	r3, r3, r2
 8003a70:	19db      	adds	r3, r3, r7
 8003a72:	2201      	movs	r2, #1
 8003a74:	701a      	strb	r2, [r3, #0]
        break;
 8003a76:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003a78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d100      	bne.n	8003a80 <UART_SetConfig+0x410>
 8003a7e:	e09a      	b.n	8003bb6 <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a84:	4b57      	ldr	r3, [pc, #348]	; (8003be4 <UART_SetConfig+0x574>)
 8003a86:	0052      	lsls	r2, r2, #1
 8003a88:	5ad3      	ldrh	r3, [r2, r3]
 8003a8a:	0019      	movs	r1, r3
 8003a8c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003a8e:	f7fc fb39 	bl	8000104 <__udivsi3>
 8003a92:	0003      	movs	r3, r0
 8003a94:	005a      	lsls	r2, r3, #1
 8003a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	085b      	lsrs	r3, r3, #1
 8003a9c:	18d2      	adds	r2, r2, r3
 8003a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	0019      	movs	r1, r3
 8003aa4:	0010      	movs	r0, r2
 8003aa6:	f7fc fb2d 	bl	8000104 <__udivsi3>
 8003aaa:	0003      	movs	r3, r0
 8003aac:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ab0:	2b0f      	cmp	r3, #15
 8003ab2:	d921      	bls.n	8003af8 <UART_SetConfig+0x488>
 8003ab4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ab6:	2380      	movs	r3, #128	; 0x80
 8003ab8:	025b      	lsls	r3, r3, #9
 8003aba:	429a      	cmp	r2, r3
 8003abc:	d21c      	bcs.n	8003af8 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ac0:	b29a      	uxth	r2, r3
 8003ac2:	200e      	movs	r0, #14
 8003ac4:	2420      	movs	r4, #32
 8003ac6:	1903      	adds	r3, r0, r4
 8003ac8:	19db      	adds	r3, r3, r7
 8003aca:	210f      	movs	r1, #15
 8003acc:	438a      	bics	r2, r1
 8003ace:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ad2:	085b      	lsrs	r3, r3, #1
 8003ad4:	b29b      	uxth	r3, r3
 8003ad6:	2207      	movs	r2, #7
 8003ad8:	4013      	ands	r3, r2
 8003ada:	b299      	uxth	r1, r3
 8003adc:	1903      	adds	r3, r0, r4
 8003ade:	19db      	adds	r3, r3, r7
 8003ae0:	1902      	adds	r2, r0, r4
 8003ae2:	19d2      	adds	r2, r2, r7
 8003ae4:	8812      	ldrh	r2, [r2, #0]
 8003ae6:	430a      	orrs	r2, r1
 8003ae8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	1902      	adds	r2, r0, r4
 8003af0:	19d2      	adds	r2, r2, r7
 8003af2:	8812      	ldrh	r2, [r2, #0]
 8003af4:	60da      	str	r2, [r3, #12]
 8003af6:	e05e      	b.n	8003bb6 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8003af8:	231a      	movs	r3, #26
 8003afa:	2220      	movs	r2, #32
 8003afc:	189b      	adds	r3, r3, r2
 8003afe:	19db      	adds	r3, r3, r7
 8003b00:	2201      	movs	r2, #1
 8003b02:	701a      	strb	r2, [r3, #0]
 8003b04:	e057      	b.n	8003bb6 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003b06:	231b      	movs	r3, #27
 8003b08:	2220      	movs	r2, #32
 8003b0a:	189b      	adds	r3, r3, r2
 8003b0c:	19db      	adds	r3, r3, r7
 8003b0e:	781b      	ldrb	r3, [r3, #0]
 8003b10:	2b08      	cmp	r3, #8
 8003b12:	d015      	beq.n	8003b40 <UART_SetConfig+0x4d0>
 8003b14:	dc18      	bgt.n	8003b48 <UART_SetConfig+0x4d8>
 8003b16:	2b04      	cmp	r3, #4
 8003b18:	d00d      	beq.n	8003b36 <UART_SetConfig+0x4c6>
 8003b1a:	dc15      	bgt.n	8003b48 <UART_SetConfig+0x4d8>
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d002      	beq.n	8003b26 <UART_SetConfig+0x4b6>
 8003b20:	2b02      	cmp	r3, #2
 8003b22:	d005      	beq.n	8003b30 <UART_SetConfig+0x4c0>
 8003b24:	e010      	b.n	8003b48 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b26:	f7fe fc53 	bl	80023d0 <HAL_RCC_GetPCLK1Freq>
 8003b2a:	0003      	movs	r3, r0
 8003b2c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003b2e:	e014      	b.n	8003b5a <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b30:	4b2d      	ldr	r3, [pc, #180]	; (8003be8 <UART_SetConfig+0x578>)
 8003b32:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003b34:	e011      	b.n	8003b5a <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b36:	f7fe fbbf 	bl	80022b8 <HAL_RCC_GetSysClockFreq>
 8003b3a:	0003      	movs	r3, r0
 8003b3c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003b3e:	e00c      	b.n	8003b5a <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b40:	2380      	movs	r3, #128	; 0x80
 8003b42:	021b      	lsls	r3, r3, #8
 8003b44:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003b46:	e008      	b.n	8003b5a <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003b4c:	231a      	movs	r3, #26
 8003b4e:	2220      	movs	r2, #32
 8003b50:	189b      	adds	r3, r3, r2
 8003b52:	19db      	adds	r3, r3, r7
 8003b54:	2201      	movs	r2, #1
 8003b56:	701a      	strb	r2, [r3, #0]
        break;
 8003b58:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003b5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d02a      	beq.n	8003bb6 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b64:	4b1f      	ldr	r3, [pc, #124]	; (8003be4 <UART_SetConfig+0x574>)
 8003b66:	0052      	lsls	r2, r2, #1
 8003b68:	5ad3      	ldrh	r3, [r2, r3]
 8003b6a:	0019      	movs	r1, r3
 8003b6c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003b6e:	f7fc fac9 	bl	8000104 <__udivsi3>
 8003b72:	0003      	movs	r3, r0
 8003b74:	001a      	movs	r2, r3
 8003b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	085b      	lsrs	r3, r3, #1
 8003b7c:	18d2      	adds	r2, r2, r3
 8003b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	0019      	movs	r1, r3
 8003b84:	0010      	movs	r0, r2
 8003b86:	f7fc fabd 	bl	8000104 <__udivsi3>
 8003b8a:	0003      	movs	r3, r0
 8003b8c:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b90:	2b0f      	cmp	r3, #15
 8003b92:	d90a      	bls.n	8003baa <UART_SetConfig+0x53a>
 8003b94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b96:	2380      	movs	r3, #128	; 0x80
 8003b98:	025b      	lsls	r3, r3, #9
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d205      	bcs.n	8003baa <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ba0:	b29a      	uxth	r2, r3
 8003ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	60da      	str	r2, [r3, #12]
 8003ba8:	e005      	b.n	8003bb6 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8003baa:	231a      	movs	r3, #26
 8003bac:	2220      	movs	r2, #32
 8003bae:	189b      	adds	r3, r3, r2
 8003bb0:	19db      	adds	r3, r3, r7
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb8:	226a      	movs	r2, #106	; 0x6a
 8003bba:	2101      	movs	r1, #1
 8003bbc:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8003bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc0:	2268      	movs	r2, #104	; 0x68
 8003bc2:	2101      	movs	r1, #1
 8003bc4:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc8:	2200      	movs	r2, #0
 8003bca:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8003bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bce:	2200      	movs	r2, #0
 8003bd0:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8003bd2:	231a      	movs	r3, #26
 8003bd4:	2220      	movs	r2, #32
 8003bd6:	189b      	adds	r3, r3, r2
 8003bd8:	19db      	adds	r3, r3, r7
 8003bda:	781b      	ldrb	r3, [r3, #0]
}
 8003bdc:	0018      	movs	r0, r3
 8003bde:	46bd      	mov	sp, r7
 8003be0:	b010      	add	sp, #64	; 0x40
 8003be2:	bdb0      	pop	{r4, r5, r7, pc}
 8003be4:	08004354 	.word	0x08004354
 8003be8:	00f42400 	.word	0x00f42400

08003bec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b082      	sub	sp, #8
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	d00b      	beq.n	8003c16 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	4a4a      	ldr	r2, [pc, #296]	; (8003d30 <UART_AdvFeatureConfig+0x144>)
 8003c06:	4013      	ands	r3, r2
 8003c08:	0019      	movs	r1, r3
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	430a      	orrs	r2, r1
 8003c14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c1a:	2202      	movs	r2, #2
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	d00b      	beq.n	8003c38 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	4a43      	ldr	r2, [pc, #268]	; (8003d34 <UART_AdvFeatureConfig+0x148>)
 8003c28:	4013      	ands	r3, r2
 8003c2a:	0019      	movs	r1, r3
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	430a      	orrs	r2, r1
 8003c36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c3c:	2204      	movs	r2, #4
 8003c3e:	4013      	ands	r3, r2
 8003c40:	d00b      	beq.n	8003c5a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	4a3b      	ldr	r2, [pc, #236]	; (8003d38 <UART_AdvFeatureConfig+0x14c>)
 8003c4a:	4013      	ands	r3, r2
 8003c4c:	0019      	movs	r1, r3
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	430a      	orrs	r2, r1
 8003c58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c5e:	2208      	movs	r2, #8
 8003c60:	4013      	ands	r3, r2
 8003c62:	d00b      	beq.n	8003c7c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	4a34      	ldr	r2, [pc, #208]	; (8003d3c <UART_AdvFeatureConfig+0x150>)
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	0019      	movs	r1, r3
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	430a      	orrs	r2, r1
 8003c7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c80:	2210      	movs	r2, #16
 8003c82:	4013      	ands	r3, r2
 8003c84:	d00b      	beq.n	8003c9e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	4a2c      	ldr	r2, [pc, #176]	; (8003d40 <UART_AdvFeatureConfig+0x154>)
 8003c8e:	4013      	ands	r3, r2
 8003c90:	0019      	movs	r1, r3
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	430a      	orrs	r2, r1
 8003c9c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ca2:	2220      	movs	r2, #32
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	d00b      	beq.n	8003cc0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	4a25      	ldr	r2, [pc, #148]	; (8003d44 <UART_AdvFeatureConfig+0x158>)
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	0019      	movs	r1, r3
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	430a      	orrs	r2, r1
 8003cbe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cc4:	2240      	movs	r2, #64	; 0x40
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	d01d      	beq.n	8003d06 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	4a1d      	ldr	r2, [pc, #116]	; (8003d48 <UART_AdvFeatureConfig+0x15c>)
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	0019      	movs	r1, r3
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	430a      	orrs	r2, r1
 8003ce0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ce6:	2380      	movs	r3, #128	; 0x80
 8003ce8:	035b      	lsls	r3, r3, #13
 8003cea:	429a      	cmp	r2, r3
 8003cec:	d10b      	bne.n	8003d06 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	4a15      	ldr	r2, [pc, #84]	; (8003d4c <UART_AdvFeatureConfig+0x160>)
 8003cf6:	4013      	ands	r3, r2
 8003cf8:	0019      	movs	r1, r3
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	430a      	orrs	r2, r1
 8003d04:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d0a:	2280      	movs	r2, #128	; 0x80
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	d00b      	beq.n	8003d28 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	4a0e      	ldr	r2, [pc, #56]	; (8003d50 <UART_AdvFeatureConfig+0x164>)
 8003d18:	4013      	ands	r3, r2
 8003d1a:	0019      	movs	r1, r3
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	430a      	orrs	r2, r1
 8003d26:	605a      	str	r2, [r3, #4]
  }
}
 8003d28:	46c0      	nop			; (mov r8, r8)
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	b002      	add	sp, #8
 8003d2e:	bd80      	pop	{r7, pc}
 8003d30:	fffdffff 	.word	0xfffdffff
 8003d34:	fffeffff 	.word	0xfffeffff
 8003d38:	fffbffff 	.word	0xfffbffff
 8003d3c:	ffff7fff 	.word	0xffff7fff
 8003d40:	ffffefff 	.word	0xffffefff
 8003d44:	ffffdfff 	.word	0xffffdfff
 8003d48:	ffefffff 	.word	0xffefffff
 8003d4c:	ff9fffff 	.word	0xff9fffff
 8003d50:	fff7ffff 	.word	0xfff7ffff

08003d54 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b086      	sub	sp, #24
 8003d58:	af02      	add	r7, sp, #8
 8003d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2290      	movs	r2, #144	; 0x90
 8003d60:	2100      	movs	r1, #0
 8003d62:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003d64:	f7fd fa64 	bl	8001230 <HAL_GetTick>
 8003d68:	0003      	movs	r3, r0
 8003d6a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	2208      	movs	r2, #8
 8003d74:	4013      	ands	r3, r2
 8003d76:	2b08      	cmp	r3, #8
 8003d78:	d10c      	bne.n	8003d94 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2280      	movs	r2, #128	; 0x80
 8003d7e:	0391      	lsls	r1, r2, #14
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	4a1a      	ldr	r2, [pc, #104]	; (8003dec <UART_CheckIdleState+0x98>)
 8003d84:	9200      	str	r2, [sp, #0]
 8003d86:	2200      	movs	r2, #0
 8003d88:	f000 f832 	bl	8003df0 <UART_WaitOnFlagUntilTimeout>
 8003d8c:	1e03      	subs	r3, r0, #0
 8003d8e:	d001      	beq.n	8003d94 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d90:	2303      	movs	r3, #3
 8003d92:	e026      	b.n	8003de2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	2204      	movs	r2, #4
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	2b04      	cmp	r3, #4
 8003da0:	d10c      	bne.n	8003dbc <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2280      	movs	r2, #128	; 0x80
 8003da6:	03d1      	lsls	r1, r2, #15
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	4a10      	ldr	r2, [pc, #64]	; (8003dec <UART_CheckIdleState+0x98>)
 8003dac:	9200      	str	r2, [sp, #0]
 8003dae:	2200      	movs	r2, #0
 8003db0:	f000 f81e 	bl	8003df0 <UART_WaitOnFlagUntilTimeout>
 8003db4:	1e03      	subs	r3, r0, #0
 8003db6:	d001      	beq.n	8003dbc <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003db8:	2303      	movs	r3, #3
 8003dba:	e012      	b.n	8003de2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2288      	movs	r2, #136	; 0x88
 8003dc0:	2120      	movs	r1, #32
 8003dc2:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	228c      	movs	r2, #140	; 0x8c
 8003dc8:	2120      	movs	r1, #32
 8003dca:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2284      	movs	r2, #132	; 0x84
 8003ddc:	2100      	movs	r1, #0
 8003dde:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003de0:	2300      	movs	r3, #0
}
 8003de2:	0018      	movs	r0, r3
 8003de4:	46bd      	mov	sp, r7
 8003de6:	b004      	add	sp, #16
 8003de8:	bd80      	pop	{r7, pc}
 8003dea:	46c0      	nop			; (mov r8, r8)
 8003dec:	01ffffff 	.word	0x01ffffff

08003df0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b094      	sub	sp, #80	; 0x50
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	60f8      	str	r0, [r7, #12]
 8003df8:	60b9      	str	r1, [r7, #8]
 8003dfa:	603b      	str	r3, [r7, #0]
 8003dfc:	1dfb      	adds	r3, r7, #7
 8003dfe:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e00:	e0a7      	b.n	8003f52 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003e04:	3301      	adds	r3, #1
 8003e06:	d100      	bne.n	8003e0a <UART_WaitOnFlagUntilTimeout+0x1a>
 8003e08:	e0a3      	b.n	8003f52 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e0a:	f7fd fa11 	bl	8001230 <HAL_GetTick>
 8003e0e:	0002      	movs	r2, r0
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	1ad3      	subs	r3, r2, r3
 8003e14:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003e16:	429a      	cmp	r2, r3
 8003e18:	d302      	bcc.n	8003e20 <UART_WaitOnFlagUntilTimeout+0x30>
 8003e1a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d13f      	bne.n	8003ea0 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e20:	f3ef 8310 	mrs	r3, PRIMASK
 8003e24:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003e28:	647b      	str	r3, [r7, #68]	; 0x44
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e30:	f383 8810 	msr	PRIMASK, r3
}
 8003e34:	46c0      	nop			; (mov r8, r8)
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	494e      	ldr	r1, [pc, #312]	; (8003f7c <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003e42:	400a      	ands	r2, r1
 8003e44:	601a      	str	r2, [r3, #0]
 8003e46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e48:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e4c:	f383 8810 	msr	PRIMASK, r3
}
 8003e50:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e52:	f3ef 8310 	mrs	r3, PRIMASK
 8003e56:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003e58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e5a:	643b      	str	r3, [r7, #64]	; 0x40
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e62:	f383 8810 	msr	PRIMASK, r3
}
 8003e66:	46c0      	nop			; (mov r8, r8)
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	689a      	ldr	r2, [r3, #8]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	2101      	movs	r1, #1
 8003e74:	438a      	bics	r2, r1
 8003e76:	609a      	str	r2, [r3, #8]
 8003e78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e7e:	f383 8810 	msr	PRIMASK, r3
}
 8003e82:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2288      	movs	r2, #136	; 0x88
 8003e88:	2120      	movs	r1, #32
 8003e8a:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	228c      	movs	r2, #140	; 0x8c
 8003e90:	2120      	movs	r1, #32
 8003e92:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2284      	movs	r2, #132	; 0x84
 8003e98:	2100      	movs	r1, #0
 8003e9a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003e9c:	2303      	movs	r3, #3
 8003e9e:	e069      	b.n	8003f74 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	2204      	movs	r2, #4
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	d052      	beq.n	8003f52 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	69da      	ldr	r2, [r3, #28]
 8003eb2:	2380      	movs	r3, #128	; 0x80
 8003eb4:	011b      	lsls	r3, r3, #4
 8003eb6:	401a      	ands	r2, r3
 8003eb8:	2380      	movs	r3, #128	; 0x80
 8003eba:	011b      	lsls	r3, r3, #4
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d148      	bne.n	8003f52 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	2280      	movs	r2, #128	; 0x80
 8003ec6:	0112      	lsls	r2, r2, #4
 8003ec8:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003eca:	f3ef 8310 	mrs	r3, PRIMASK
 8003ece:	613b      	str	r3, [r7, #16]
  return(result);
 8003ed0:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003ed2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	f383 8810 	msr	PRIMASK, r3
}
 8003ede:	46c0      	nop			; (mov r8, r8)
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4924      	ldr	r1, [pc, #144]	; (8003f7c <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003eec:	400a      	ands	r2, r1
 8003eee:	601a      	str	r2, [r3, #0]
 8003ef0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ef2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ef4:	69bb      	ldr	r3, [r7, #24]
 8003ef6:	f383 8810 	msr	PRIMASK, r3
}
 8003efa:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003efc:	f3ef 8310 	mrs	r3, PRIMASK
 8003f00:	61fb      	str	r3, [r7, #28]
  return(result);
 8003f02:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f04:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f06:	2301      	movs	r3, #1
 8003f08:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f0a:	6a3b      	ldr	r3, [r7, #32]
 8003f0c:	f383 8810 	msr	PRIMASK, r3
}
 8003f10:	46c0      	nop			; (mov r8, r8)
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	689a      	ldr	r2, [r3, #8]
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	2101      	movs	r1, #1
 8003f1e:	438a      	bics	r2, r1
 8003f20:	609a      	str	r2, [r3, #8]
 8003f22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f24:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f28:	f383 8810 	msr	PRIMASK, r3
}
 8003f2c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2288      	movs	r2, #136	; 0x88
 8003f32:	2120      	movs	r1, #32
 8003f34:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	228c      	movs	r2, #140	; 0x8c
 8003f3a:	2120      	movs	r1, #32
 8003f3c:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2290      	movs	r2, #144	; 0x90
 8003f42:	2120      	movs	r1, #32
 8003f44:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2284      	movs	r2, #132	; 0x84
 8003f4a:	2100      	movs	r1, #0
 8003f4c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003f4e:	2303      	movs	r3, #3
 8003f50:	e010      	b.n	8003f74 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	69db      	ldr	r3, [r3, #28]
 8003f58:	68ba      	ldr	r2, [r7, #8]
 8003f5a:	4013      	ands	r3, r2
 8003f5c:	68ba      	ldr	r2, [r7, #8]
 8003f5e:	1ad3      	subs	r3, r2, r3
 8003f60:	425a      	negs	r2, r3
 8003f62:	4153      	adcs	r3, r2
 8003f64:	b2db      	uxtb	r3, r3
 8003f66:	001a      	movs	r2, r3
 8003f68:	1dfb      	adds	r3, r7, #7
 8003f6a:	781b      	ldrb	r3, [r3, #0]
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d100      	bne.n	8003f72 <UART_WaitOnFlagUntilTimeout+0x182>
 8003f70:	e747      	b.n	8003e02 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f72:	2300      	movs	r3, #0
}
 8003f74:	0018      	movs	r0, r3
 8003f76:	46bd      	mov	sp, r7
 8003f78:	b014      	add	sp, #80	; 0x50
 8003f7a:	bd80      	pop	{r7, pc}
 8003f7c:	fffffe5f 	.word	0xfffffe5f

08003f80 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b084      	sub	sp, #16
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2284      	movs	r2, #132	; 0x84
 8003f8c:	5c9b      	ldrb	r3, [r3, r2]
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	d101      	bne.n	8003f96 <HAL_UARTEx_EnableFifoMode+0x16>
 8003f92:	2302      	movs	r3, #2
 8003f94:	e02d      	b.n	8003ff2 <HAL_UARTEx_EnableFifoMode+0x72>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2284      	movs	r2, #132	; 0x84
 8003f9a:	2101      	movs	r1, #1
 8003f9c:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2288      	movs	r2, #136	; 0x88
 8003fa2:	2124      	movs	r1, #36	; 0x24
 8003fa4:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	2101      	movs	r1, #1
 8003fba:	438a      	bics	r2, r1
 8003fbc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2280      	movs	r2, #128	; 0x80
 8003fc2:	0592      	lsls	r2, r2, #22
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2280      	movs	r2, #128	; 0x80
 8003fcc:	0592      	lsls	r2, r2, #22
 8003fce:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	68fa      	ldr	r2, [r7, #12]
 8003fd6:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	0018      	movs	r0, r3
 8003fdc:	f000 f8ca 	bl	8004174 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2288      	movs	r2, #136	; 0x88
 8003fe4:	2120      	movs	r1, #32
 8003fe6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2284      	movs	r2, #132	; 0x84
 8003fec:	2100      	movs	r1, #0
 8003fee:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003ff0:	2300      	movs	r3, #0
}
 8003ff2:	0018      	movs	r0, r3
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	b004      	add	sp, #16
 8003ff8:	bd80      	pop	{r7, pc}
	...

08003ffc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b084      	sub	sp, #16
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2284      	movs	r2, #132	; 0x84
 8004008:	5c9b      	ldrb	r3, [r3, r2]
 800400a:	2b01      	cmp	r3, #1
 800400c:	d101      	bne.n	8004012 <HAL_UARTEx_DisableFifoMode+0x16>
 800400e:	2302      	movs	r3, #2
 8004010:	e027      	b.n	8004062 <HAL_UARTEx_DisableFifoMode+0x66>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2284      	movs	r2, #132	; 0x84
 8004016:	2101      	movs	r1, #1
 8004018:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2288      	movs	r2, #136	; 0x88
 800401e:	2124      	movs	r1, #36	; 0x24
 8004020:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	2101      	movs	r1, #1
 8004036:	438a      	bics	r2, r1
 8004038:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	4a0b      	ldr	r2, [pc, #44]	; (800406c <HAL_UARTEx_DisableFifoMode+0x70>)
 800403e:	4013      	ands	r3, r2
 8004040:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	68fa      	ldr	r2, [r7, #12]
 800404e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2288      	movs	r2, #136	; 0x88
 8004054:	2120      	movs	r1, #32
 8004056:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2284      	movs	r2, #132	; 0x84
 800405c:	2100      	movs	r1, #0
 800405e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004060:	2300      	movs	r3, #0
}
 8004062:	0018      	movs	r0, r3
 8004064:	46bd      	mov	sp, r7
 8004066:	b004      	add	sp, #16
 8004068:	bd80      	pop	{r7, pc}
 800406a:	46c0      	nop			; (mov r8, r8)
 800406c:	dfffffff 	.word	0xdfffffff

08004070 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b084      	sub	sp, #16
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2284      	movs	r2, #132	; 0x84
 800407e:	5c9b      	ldrb	r3, [r3, r2]
 8004080:	2b01      	cmp	r3, #1
 8004082:	d101      	bne.n	8004088 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004084:	2302      	movs	r3, #2
 8004086:	e02e      	b.n	80040e6 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2284      	movs	r2, #132	; 0x84
 800408c:	2101      	movs	r1, #1
 800408e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2288      	movs	r2, #136	; 0x88
 8004094:	2124      	movs	r1, #36	; 0x24
 8004096:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	2101      	movs	r1, #1
 80040ac:	438a      	bics	r2, r1
 80040ae:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	00db      	lsls	r3, r3, #3
 80040b8:	08d9      	lsrs	r1, r3, #3
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	683a      	ldr	r2, [r7, #0]
 80040c0:	430a      	orrs	r2, r1
 80040c2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	0018      	movs	r0, r3
 80040c8:	f000 f854 	bl	8004174 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	68fa      	ldr	r2, [r7, #12]
 80040d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2288      	movs	r2, #136	; 0x88
 80040d8:	2120      	movs	r1, #32
 80040da:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2284      	movs	r2, #132	; 0x84
 80040e0:	2100      	movs	r1, #0
 80040e2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80040e4:	2300      	movs	r3, #0
}
 80040e6:	0018      	movs	r0, r3
 80040e8:	46bd      	mov	sp, r7
 80040ea:	b004      	add	sp, #16
 80040ec:	bd80      	pop	{r7, pc}
	...

080040f0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b084      	sub	sp, #16
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
 80040f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2284      	movs	r2, #132	; 0x84
 80040fe:	5c9b      	ldrb	r3, [r3, r2]
 8004100:	2b01      	cmp	r3, #1
 8004102:	d101      	bne.n	8004108 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004104:	2302      	movs	r3, #2
 8004106:	e02f      	b.n	8004168 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2284      	movs	r2, #132	; 0x84
 800410c:	2101      	movs	r1, #1
 800410e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2288      	movs	r2, #136	; 0x88
 8004114:	2124      	movs	r1, #36	; 0x24
 8004116:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	2101      	movs	r1, #1
 800412c:	438a      	bics	r2, r1
 800412e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	4a0e      	ldr	r2, [pc, #56]	; (8004170 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8004138:	4013      	ands	r3, r2
 800413a:	0019      	movs	r1, r3
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	683a      	ldr	r2, [r7, #0]
 8004142:	430a      	orrs	r2, r1
 8004144:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	0018      	movs	r0, r3
 800414a:	f000 f813 	bl	8004174 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	68fa      	ldr	r2, [r7, #12]
 8004154:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2288      	movs	r2, #136	; 0x88
 800415a:	2120      	movs	r1, #32
 800415c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2284      	movs	r2, #132	; 0x84
 8004162:	2100      	movs	r1, #0
 8004164:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004166:	2300      	movs	r3, #0
}
 8004168:	0018      	movs	r0, r3
 800416a:	46bd      	mov	sp, r7
 800416c:	b004      	add	sp, #16
 800416e:	bd80      	pop	{r7, pc}
 8004170:	f1ffffff 	.word	0xf1ffffff

08004174 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004174:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004176:	b085      	sub	sp, #20
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004180:	2b00      	cmp	r3, #0
 8004182:	d108      	bne.n	8004196 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	226a      	movs	r2, #106	; 0x6a
 8004188:	2101      	movs	r1, #1
 800418a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2268      	movs	r2, #104	; 0x68
 8004190:	2101      	movs	r1, #1
 8004192:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004194:	e043      	b.n	800421e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004196:	260f      	movs	r6, #15
 8004198:	19bb      	adds	r3, r7, r6
 800419a:	2208      	movs	r2, #8
 800419c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800419e:	200e      	movs	r0, #14
 80041a0:	183b      	adds	r3, r7, r0
 80041a2:	2208      	movs	r2, #8
 80041a4:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	0e5b      	lsrs	r3, r3, #25
 80041ae:	b2da      	uxtb	r2, r3
 80041b0:	240d      	movs	r4, #13
 80041b2:	193b      	adds	r3, r7, r4
 80041b4:	2107      	movs	r1, #7
 80041b6:	400a      	ands	r2, r1
 80041b8:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	0f5b      	lsrs	r3, r3, #29
 80041c2:	b2da      	uxtb	r2, r3
 80041c4:	250c      	movs	r5, #12
 80041c6:	197b      	adds	r3, r7, r5
 80041c8:	2107      	movs	r1, #7
 80041ca:	400a      	ands	r2, r1
 80041cc:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80041ce:	183b      	adds	r3, r7, r0
 80041d0:	781b      	ldrb	r3, [r3, #0]
 80041d2:	197a      	adds	r2, r7, r5
 80041d4:	7812      	ldrb	r2, [r2, #0]
 80041d6:	4914      	ldr	r1, [pc, #80]	; (8004228 <UARTEx_SetNbDataToProcess+0xb4>)
 80041d8:	5c8a      	ldrb	r2, [r1, r2]
 80041da:	435a      	muls	r2, r3
 80041dc:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80041de:	197b      	adds	r3, r7, r5
 80041e0:	781b      	ldrb	r3, [r3, #0]
 80041e2:	4a12      	ldr	r2, [pc, #72]	; (800422c <UARTEx_SetNbDataToProcess+0xb8>)
 80041e4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80041e6:	0019      	movs	r1, r3
 80041e8:	f7fc f816 	bl	8000218 <__divsi3>
 80041ec:	0003      	movs	r3, r0
 80041ee:	b299      	uxth	r1, r3
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	226a      	movs	r2, #106	; 0x6a
 80041f4:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80041f6:	19bb      	adds	r3, r7, r6
 80041f8:	781b      	ldrb	r3, [r3, #0]
 80041fa:	193a      	adds	r2, r7, r4
 80041fc:	7812      	ldrb	r2, [r2, #0]
 80041fe:	490a      	ldr	r1, [pc, #40]	; (8004228 <UARTEx_SetNbDataToProcess+0xb4>)
 8004200:	5c8a      	ldrb	r2, [r1, r2]
 8004202:	435a      	muls	r2, r3
 8004204:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8004206:	193b      	adds	r3, r7, r4
 8004208:	781b      	ldrb	r3, [r3, #0]
 800420a:	4a08      	ldr	r2, [pc, #32]	; (800422c <UARTEx_SetNbDataToProcess+0xb8>)
 800420c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800420e:	0019      	movs	r1, r3
 8004210:	f7fc f802 	bl	8000218 <__divsi3>
 8004214:	0003      	movs	r3, r0
 8004216:	b299      	uxth	r1, r3
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2268      	movs	r2, #104	; 0x68
 800421c:	5299      	strh	r1, [r3, r2]
}
 800421e:	46c0      	nop			; (mov r8, r8)
 8004220:	46bd      	mov	sp, r7
 8004222:	b005      	add	sp, #20
 8004224:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004226:	46c0      	nop			; (mov r8, r8)
 8004228:	0800436c 	.word	0x0800436c
 800422c:	08004374 	.word	0x08004374

08004230 <__libc_init_array>:
 8004230:	b570      	push	{r4, r5, r6, lr}
 8004232:	2600      	movs	r6, #0
 8004234:	4d0c      	ldr	r5, [pc, #48]	; (8004268 <__libc_init_array+0x38>)
 8004236:	4c0d      	ldr	r4, [pc, #52]	; (800426c <__libc_init_array+0x3c>)
 8004238:	1b64      	subs	r4, r4, r5
 800423a:	10a4      	asrs	r4, r4, #2
 800423c:	42a6      	cmp	r6, r4
 800423e:	d109      	bne.n	8004254 <__libc_init_array+0x24>
 8004240:	2600      	movs	r6, #0
 8004242:	f000 f821 	bl	8004288 <_init>
 8004246:	4d0a      	ldr	r5, [pc, #40]	; (8004270 <__libc_init_array+0x40>)
 8004248:	4c0a      	ldr	r4, [pc, #40]	; (8004274 <__libc_init_array+0x44>)
 800424a:	1b64      	subs	r4, r4, r5
 800424c:	10a4      	asrs	r4, r4, #2
 800424e:	42a6      	cmp	r6, r4
 8004250:	d105      	bne.n	800425e <__libc_init_array+0x2e>
 8004252:	bd70      	pop	{r4, r5, r6, pc}
 8004254:	00b3      	lsls	r3, r6, #2
 8004256:	58eb      	ldr	r3, [r5, r3]
 8004258:	4798      	blx	r3
 800425a:	3601      	adds	r6, #1
 800425c:	e7ee      	b.n	800423c <__libc_init_array+0xc>
 800425e:	00b3      	lsls	r3, r6, #2
 8004260:	58eb      	ldr	r3, [r5, r3]
 8004262:	4798      	blx	r3
 8004264:	3601      	adds	r6, #1
 8004266:	e7f2      	b.n	800424e <__libc_init_array+0x1e>
 8004268:	08004384 	.word	0x08004384
 800426c:	08004384 	.word	0x08004384
 8004270:	08004384 	.word	0x08004384
 8004274:	08004388 	.word	0x08004388

08004278 <memset>:
 8004278:	0003      	movs	r3, r0
 800427a:	1882      	adds	r2, r0, r2
 800427c:	4293      	cmp	r3, r2
 800427e:	d100      	bne.n	8004282 <memset+0xa>
 8004280:	4770      	bx	lr
 8004282:	7019      	strb	r1, [r3, #0]
 8004284:	3301      	adds	r3, #1
 8004286:	e7f9      	b.n	800427c <memset+0x4>

08004288 <_init>:
 8004288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800428a:	46c0      	nop			; (mov r8, r8)
 800428c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800428e:	bc08      	pop	{r3}
 8004290:	469e      	mov	lr, r3
 8004292:	4770      	bx	lr

08004294 <_fini>:
 8004294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004296:	46c0      	nop			; (mov r8, r8)
 8004298:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800429a:	bc08      	pop	{r3}
 800429c:	469e      	mov	lr, r3
 800429e:	4770      	bx	lr
